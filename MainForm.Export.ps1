#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 2b855348-feeb-402b-ba34-805d19f52a6d
# Source File: MainForm.psf
#------------------------------------------------------------------------
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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
/297+Pf/ACM5PTUtDgAA#>
#endregion

<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2020 v5.7.172
     Generated on:       11/27/2020 11:01 AM
     Generated by:       hrbnkh
    --------------------------------------------------------------------------------
    .DESCRIPTION
        GUI script generated by PowerShell Studio 2020
#>


#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Show-MainForm_psf {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formAPS = New-Object 'System.Windows.Forms.Form'
	$tabcontrol1 = New-Object 'System.Windows.Forms.TabControl'
	$tabpage1 = New-Object 'System.Windows.Forms.TabPage'
	$labelHostOrDescription = New-Object 'System.Windows.Forms.Label'
	$textboxHost = New-Object 'System.Windows.Forms.TextBox'
	$NewParentName = New-Object 'System.Windows.Forms.Label'
	$textboxNewParent = New-Object 'System.Windows.Forms.TextBox'
	$btnAdd_New_Parent = New-Object 'System.Windows.Forms.Button'
	$listview1 = New-Object 'System.Windows.Forms.ListView'
	$labelParent = New-Object 'System.Windows.Forms.Label'
	$comboboxParent = New-Object 'System.Windows.Forms.ComboBox'
	$textboxAddLogin = New-Object 'System.Windows.Forms.TextBox'
	$labelAddLogin = New-Object 'System.Windows.Forms.Label'
	$labelAddPassword = New-Object 'System.Windows.Forms.Label'
	$textboxAddPassword = New-Object 'System.Windows.Forms.TextBox'
	$buttonAddPassword = New-Object 'System.Windows.Forms.Button'
	$textboxRunLog = New-Object 'System.Windows.Forms.TextBox'
	$textboxChosenFile = New-Object 'System.Windows.Forms.TextBox'
	$labelChosenFile = New-Object 'System.Windows.Forms.Label'
	$labelPasswordToKey = New-Object 'System.Windows.Forms.Label'
	$textboxPasstoKey = New-Object 'System.Windows.Forms.TextBox'
	$buttonRun = New-Object 'System.Windows.Forms.Button'
	$tabpage2 = New-Object 'System.Windows.Forms.TabPage'
	$textboxConfrimPassword = New-Object 'System.Windows.Forms.TextBox'
	$labelConfrimPassword = New-Object 'System.Windows.Forms.Label'
	$textboxCreatePassword = New-Object 'System.Windows.Forms.TextBox'
	$Password = New-Object 'System.Windows.Forms.Label'
	$textboxCreateLog = New-Object 'System.Windows.Forms.TextBox'
	$textboxCreateFileName = New-Object 'System.Windows.Forms.TextBox'
	$textboxCreateLogin = New-Object 'System.Windows.Forms.TextBox'
	$comboboxCreateType = New-Object 'System.Windows.Forms.ComboBox'
	$labelFilename = New-Object 'System.Windows.Forms.Label'
	$labelYouLogin = New-Object 'System.Windows.Forms.Label'
	$Type = New-Object 'System.Windows.Forms.Label'
	$buttonCreate = New-Object 'System.Windows.Forms.Button'
	$tabpage3 = New-Object 'System.Windows.Forms.TabPage'
	$textbox1 = New-Object 'System.Windows.Forms.TextBox'
	$button1 = New-Object 'System.Windows.Forms.Button'
	$menustrip1 = New-Object 'System.Windows.Forms.MenuStrip'
	$fileToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$exitToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$editToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$copyToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$pasteToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$helpToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$aboutToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$openfiledialog1 = New-Object 'System.Windows.Forms.OpenFileDialog'
	$loadAPSToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$versionToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$errorprovider1 = New-Object 'System.Windows.Forms.ErrorProvider'
	$columnheader1 = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheader2 = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheader3 = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheader4 = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheader5 = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheader6 = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheader7 = New-Object 'System.Windows.Forms.ColumnHeader'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$MainConfig = Get-Content .\config\main.config
	Write-Host "Load config"
	foreach ($line in $MainConfig)
	{
		Switch ($line)
		{
			{ ($line -like "#*") -or ($line -like $null) -or ($line -like "{*") } { }
			default {
				$Name = [regex]::split($line, '==')[0].Replace(" ", "")
				$Value = [regex]::split($line, '==')[1]
				try
				{
					Get-Variable -Name $Name -ErrorAction SilentlyContinue
				}
				catch
				{
					New-Variable -Name $Name -Value $Value
				}
				finally
				{
					Set-Variable -Name $Name -Value $Value
				}
			}
		}
	}
	
	$formAPS_Load={
		#TODO: Initialize Form Controls here
		Write-Host "Load module"
		Import-Module -PassThru "$PathToModule$ModuleName" #-Force -ErrorAction Ignore -WarningAction Ignore
		$test = "tesgkdfdagv"
		$Global:isTest = $true
		$Global:OFS = "`r`n"
	}
	
	
	$exitToolStripMenuItem_Click={
		#TODO: Place custom script here
		$formAPS.Close()
	}
	
	$aboutToolStripMenuItem_Click={
		#TODO: Place custom script here
		[System.Windows.Forms.MessageBox]::Show("APS v1.0","APS Application");
	}
	
	
	
	#region Control Helper Functions
	function Update-ListViewColumnSort
	{
	<#
		.SYNOPSIS
			Sort the ListView's item using the specified column.
		
		.DESCRIPTION
			Sort the ListView's item using the specified column.
			This function uses Add-Type to define a class that sort the items.
			The ListView's Tag property is used to keep track of the sorting.
		
		.PARAMETER ListView
			The ListView control to sort.
		
		.PARAMETER ColumnIndex
			The index of the column to use for sorting.
		
		.PARAMETER SortOrder
			The direction to sort the items. If not specified or set to None, it will toggle.
		
		.EXAMPLE
			Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListView]
			$ListView,
			[Parameter(Mandatory = $true)]
			[int]
			$ColumnIndex,
			[System.Windows.Forms.SortOrder]
			$SortOrder = 'None'
		)
		
		if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
		{
			return;
		}
		
		#region Define ListViewItemComparer
		try
		{
			[ListViewItemComparer] | Out-Null
		}
		catch
		{
			Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
		}
		#endregion
		
		if ($ListView.Tag -is [ListViewItemComparer])
		{
			#Toggle the Sort Order
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
				{
					$ListView.Tag.sortOrder = 'Descending'
				}
				else
				{
					$ListView.Tag.sortOrder = 'Ascending'
				}
			}
			else
			{
				$ListView.Tag.sortOrder = $SortOrder
			}
			
			$ListView.Tag.column = $ColumnIndex
			$ListView.Sort() #Sort the items
		}
		else
		{
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
			}
			
			#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
			$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
			$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
		}
	}
	
	
	function Add-ListViewItem
	{
	<#
		.SYNOPSIS
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.DESCRIPTION
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.PARAMETER ListView
			The ListView control to add the items to.
	
		.PARAMETER Items
			The object or objects you wish to load into the ListView's Items collection.
			
		.PARAMETER  ImageIndex
			The index of a predefined image in the ListView's ImageList.
		
		.PARAMETER  SubItems
			List of strings to add as Subitems.
		
		.PARAMETER Group
			The group to place the item(s) in.
		
		.PARAMETER Clear
			This switch clears the ListView's Items before adding the new item(s).
		
		.EXAMPLE
			Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
	#>
		
		Param( 
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.ListView]$ListView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Items,
		[int]$ImageIndex = -1,
		[string[]]$SubItems,
		$Group,
		[switch]$Clear)
		
		if($Clear)
		{
			$ListView.Items.Clear();
	    }
	    
	    $lvGroup = $null
	    if ($Group -is [System.Windows.Forms.ListViewGroup])
	    {
	        $lvGroup = $Group
	    }
	    elseif ($Group -is [string])
	    {
	        #$lvGroup = $ListView.Group[$Group] # Case sensitive
	        foreach ($groupItem in $ListView.Groups)
	        {
	            if ($groupItem.Name -eq $Group)
	            {
	                $lvGroup = $groupItem
	                break
	            }
	        }
	        
	        if ($null -eq $lvGroup)
	        {
	            $lvGroup = $ListView.Groups.Add($Group, $Group)
	        }
	    }
	    
		if($Items -is [Array])
		{
			$ListView.BeginUpdate()
			foreach ($item in $Items)
			{		
				$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
				#Store the object in the Tag
				$listitem.Tag = $item
				
				if($null -ne $SubItems)
				{
					$listitem.SubItems.AddRange($SubItems)
				}
				
				if($null -ne $lvGroup)
				{
					$listitem.Group = $lvGroup
				}
			}
			$ListView.EndUpdate()
		}
		else
		{
			#Add a new item to the ListView
			$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $Items
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
	}
	
	
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
			
		.PARAMETER ValueMember
			Indicates the property to use for the value of the control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]
			$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[Parameter(Mandatory = $false)]
			[string]$ValueMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
		$ComboBox.ValueMember = $ValueMember
	}
	#endregion
	
	$buttonCreate_Click={
		#TODO: Place custom script here
		#initials parameters
		try
		{
			$Global:OFS = "`r`n"
			$textboxCreateLog.Clear();
			$errorprovider1.Clear();
			$Type = $comboboxCreateType.SelectedItem;
			$ADlogin = $textboxCreateLogin.Text;
			$filename = $textboxCreateFileName.Text;
			
			if ($textboxConfrimPassword.Text -ne $textboxCreatePassword.Text)
			{
				[System.Windows.Forms.MessageBox]::Show('Passwords does not  match', 'Information', 'OK', 'Error')
				return
			}
			$textboxCreateLog.Text += "*LOG*---------Password OK" +$OFS
			$ChildNameFolderChar = -join (1 .. 24 | % { [char[]]'ABCDEFGHIJKLMNOPQRSTUWXYZ1234567890abcdfeghijklmnopqrstuvwxyz' | Get-Random })
			[string]$ChildNameFolder = $ChildNameFolderChar.ToString()
			$CFLDR = -join (1 .. 24 | % { [char[]]'ABCDEFGHIJKLMNOPQRSTUWXYZ1234567890abcdfeghijklmnopqrstuvwxyz' | Get-Random })
			mkdir "$PathToFile\$CFLDR\root"
			$textbox1.Text += "*LOG*---------Creted new Folder  OK $PathToFile\$CFLDR " + $OFS
			Compress-APK -InputPath "$PathToFile\$CFLDR" -filename $filename -textboxCreateLog $textboxCreateLog
			$global:Error.Clear();
			$textboxCreateLog.Text += "*LOG*---------Compressed OK" + $OFS
			$File = New-Object -TypeName psobject
			$AESKey = New-AESKey -IsTest $true
			$textboxCreateLog.Text += "*LOG*---------AES Key generated OK" + $OFS
			$MainPassword = Convert-ToSequrePas -InputPass $textboxCreatePassword.Text -IsTest $IsTest -AESKey $AESKey
			$textboxCreateLog.Text += "*LOG*---------Security password OK" + $OFS
			$File | Add-Member -MemberType NoteProperty -Name "Security credentials" -Value $AESKey, $MainPassword
			$Date = Get-Date
			$File | Add-Member -MemberType NoteProperty -Name "Date created" -Value $Date
			$File | Add-Member -MemberType NoteProperty -Name "Personal info" -Value $ADlogin, $filename
			$File | Add-Member -MemberType NoteProperty -Name "Type" -Value $Type
			$File | Add-Member -MemberType NoteProperty -Name "ChildNameFolder" -Value $ChildNameFolder
			if (!(Test-Path $PathToFile))
			{
				mkdir $PathToFile
				$textboxCreateLog.Text += "*LOG*---------Create Folder  OK" + $OFS
			}
			else
			{
				$textboxCreateLog.Text += "*LOG*---------Folder  OK" + $OFS
			}
			$File | Export-Clixml -Path "$PathToFile\$filename.aps"
			$textboxCreateLog.Text += "*LOG*---------File Genereted  OK" + $OFS
			
			
		}
		catch
		{
			
			$textboxCreateLog.Text+= "Error $_ when trying create new APS key"
		}
		
	}
	
	$textboxPasstoKey_TextChanged={
		#TODO: Place custom script here
		
	}
	
	$loadAPSToolStripMenuItem_Click={
		#TODO: Place custom script here
		$textboxPasstoKey.Clear()
		$openfiledialog1.ShowDialog()
		$Global:PathToAPS = $openfiledialog1.FileName.ToString()
		$textboxChosenFile.Text = $Global:PathToAPS
		try
		{
			$Global:APS = Import-Clixml -Path $global:PathToAPS
			$textboxRunLog.Text +="*LOG*---------APS  loaded" +  $OFS
		}
		catch
		{
			$textboxRunLog.Text += "*LOG*---------Error $_ when trying import APS key" + $OFS
		}
	}
	
	$buttonRun_Click={
		#TODO: Place custom script here
		$listview1.Items.Clear();
		$SeqPass = $global:APS.'Security credentials'[1]
		$AESKey = $global:APS.'Security credentials'[0]
		$InputPaswword=$textboxPasstoKey.Text
		$APSUnSeqPass= Convert-FromSequrePas -InputPass $SeqPass -IsTest $true -AESKey $AESKey
		if (!($APSUnSeqPass -eq $InputPaswword))
		{
			[System.Windows.Forms.MessageBox]::Show('Passwords does not  match', 'Access denied', 'OK', 'Error')
			return
		}
		
		$global:APK = 
		$global:ASK = Get-ChildItem -Path "$PathToChildFolder\$($global:APS.ChildNameFolder)" | select *
		
		if ($global:ASK -ne $null)
		{
			$parent = $global:ASK | where { $_.Attributes -eq 'Directory' } | select Name
			if ($parent.Count -gt 1)
			{
				$comboboxParent.DataSource = $parent.Name + "none"
				$comboboxParent.SelectedItem = "none"
				$textboxRunLog.Text += "*LOG*---------Add $($parent.Name)  to parent item" + $OFS
			}
			else
			{
				$tmpArray = @("$($parent.Name)", "none")
				$comboboxParent.DataSource = $tmpArray
				$comboboxParent.SelectedItem = "none"
				$textboxRunLog.Text += "*LOG*---------Add one $($parent.Name)  to parent item" + $OFS
			}
			
			#adding to table information
			Add-ToListASK -ASK $global:ASK -IsTest $isTest -listview $listview1 -textboxRunLog $textboxRunLog
		}
		else
		{
			#we need create to the aps path  and document where will be save passwords and logins
			[System.Windows.Forms.MessageBox]::Show('ASK does not have any password', 'Information', 'OK', 'Information')
		}
		
		
	}
	$buttonAddPassword_Click={
		#TODO: Place custom script here
		try
		{
			$FileName = -join (1 .. 24 | % { [char[]]'ABCDEFGHIJKLMNOPQRSTUWXYZ1234567890abcdfeghijklmnopqrstuvwxyz' | Get-Random })
			$AESKey = $global:APS.'Security credentials'[0]
			$Password = Convert-ToSequrePas -InputPass $textboxAddPassword.Text -IsTest $IsTest -AESKey $AESKey
			$textboxRunLog.Text += "*LOG*---------Password Add OK" + $OFS
			$File = New-Object -TypeName psobject
			
			$File | Add-Member -MemberType NoteProperty -Name "PWD" -Value $Password
			$Date = Get-Date
			$File | Add-Member -MemberType NoteProperty -Name "Date created" -Value $Date
			$File | Add-Member -MemberType NoteProperty -Name "Personal info" -Value $textboxAddLogin.Text, $filename
			$File | Add-Member -MemberType NoteProperty -Name "RootFolder" -Value $($global:APS.ChildNameFolder)
			$File | Add-Member -MemberType NoteProperty -Name "ParentObject" -Value $comboboxParent.SelectedItem
			$File | Add-Member -MemberType NoteProperty -Name "Host" -Value $textboxHost.Text
			$textboxRunLog.Text += "*LOG*---------File Add OK" + $OFS
			if ($File.ParentObject -eq "none")
			{
				$File | Export-Clixml -Path "$PathToChildFolder\$($global:APS.ChildNameFolder)\$FileName.ask"
			}
			else
			{
				$File | Export-Clixml -Path "$PathToChildFolder\$($global:APS.ChildNameFolder)\$($comboboxParent.SelectedItem)\$FileName.ask"
			}
			
		}
		catch
		{
			$textboxRunLog.Text += "*LOG*---------Error $_ when trying import APS key" + $OFS
		}
		#$comboboxParent.SelectedItem = "none"
	}
	
	$btnAdd_New_Parent_Click={
		#TODO: Place custom script here
		mkdir "$PathToChildFolder\$($global:APS.ChildNameFolder)\$($textboxNewParent.Text)"
		$global:ASK = Get-ChildItem -Path "$PathToChildFolder\$($global:APS.ChildNameFolder)"
		$parent = $global:ASK | where { $_.Attributes -eq 'Directory' } | select Name
		if ($parent.Count -gt 1)
		{
			$comboboxParent.DataSource = $parent.Name + "none"
			$comboboxParent.SelectedItem = "none"
			$textboxRunLog.Text += "*LOG*---------Add $($parent.Name)  to parent item" + $OFS
		}
		else
		{
			$tmpArray = @("$($parent.Name)", "none")
			$comboboxParent.DataSource = $tmpArray
			$comboboxParent.SelectedItem = "none"
			$textboxRunLog.Text += "*LOG*---------Add one $($parent.Name)  to parent item" + $OFS
		}
	}
	
	$listview1_DoubleClick={
		#TODO: Place custom script here
		$SelectItemLogin = $listview1.SelectedItems[0].SubItems[2].Text
		if ($SelectItemLogin -ne "-")
		{
			$SelectItemPas = $listview1.SelectedItems[0].SubItems[3].Text
			$AESKey = $global:APS.'Security credentials'[0]
			$UnSeqPass = Convert-FromSequrePas -InputPass $SelectItemPas -IsTest $true -AESKey $AESKey
			$UnSeqPass | clip
			[System.Windows.Forms.MessageBox]::Show("$SelectItemLogin password copy in your clipboard", 'Information', 'OK', 'Information')
		}
		else
		{
			[System.Windows.Forms.MessageBox]::Show("The parent has not any password", 'Information', 'OK', 'Error')
		}
		
	}
	
	$button1_Click={
		#TODO: Place custom script here
		$CFLDR = -join (1 .. 24 | % { [char[]]'ABCDEFGHIJKLMNOPQRSTUWXYZ1234567890abcdfeghijklmnopqrstuvwxyz' | Get-Random })
		mkdir "$PathToFile\$CFLDR"
		$textbox1.Text += "*LOG*---------Creted new Folder  OK $PathToFile\$CFLDR " + $OFS
		#Compress-APK -InputPath "$PathToFile\$ChildNameFolder" -filename $filename -textboxCreateLog $textboxCreateLog
		$global:Error.Clear();
		$DeletingPath = "$($PathToFile)\$($CFLDR)"
		Wait-Event -Timeout 1
		try
		{
			Write-Host "Deleting folders $($PathToFile)\$($CFLDR)" -ForegroundColor Green
			Remove-Item -LiteralPath $DeletingPath -Recurse -Force -Confirm:$false
		}
		catch
		{
			$textbox1.Text += "*LOG*---------Error $_ $PathToFile\$CFLDR " + $OFS
		}
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formAPS.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$btnAdd_New_Parent.remove_Click($btnAdd_New_Parent_Click)
			$listview1.remove_DoubleClick($listview1_DoubleClick)
			$buttonAddPassword.remove_Click($buttonAddPassword_Click)
			$textboxPasstoKey.remove_TextChanged($textboxPasstoKey_TextChanged)
			$buttonRun.remove_Click($buttonRun_Click)
			$buttonCreate.remove_Click($buttonCreate_Click)
			$button1.remove_Click($button1_Click)
			$formAPS.remove_Load($formAPS_Load)
			$exitToolStripMenuItem.remove_Click($exitToolStripMenuItem_Click)
			$aboutToolStripMenuItem.remove_Click($aboutToolStripMenuItem_Click)
			$loadAPSToolStripMenuItem.remove_Click($loadAPSToolStripMenuItem_Click)
			$formAPS.remove_Load($Form_StateCorrection_Load)
			$formAPS.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formAPS.SuspendLayout()
	$tabcontrol1.SuspendLayout()
	$tabpage1.SuspendLayout()
	$tabpage2.SuspendLayout()
	$tabpage3.SuspendLayout()
	$menustrip1.SuspendLayout()
	#
	# formAPS
	#
	$formAPS.Controls.Add($tabcontrol1)
	$formAPS.Controls.Add($menustrip1)
	$formAPS.AutoScaleDimensions = '6, 13'
	$formAPS.AutoScaleMode = 'Font'
	$formAPS.ClientSize = '608, 509'
	$formAPS.MainMenuStrip = $menustrip1
	$formAPS.Name = 'formAPS'
	$formAPS.StartPosition = 'CenterScreen'
	$formAPS.Text = 'APS'
	$formAPS.add_Load($formAPS_Load)
	#
	# tabcontrol1
	#
	$tabcontrol1.Controls.Add($tabpage1)
	$tabcontrol1.Controls.Add($tabpage2)
	$tabcontrol1.Controls.Add($tabpage3)
	$tabcontrol1.Location = '0, 27'
	$tabcontrol1.Name = 'tabcontrol1'
	$tabcontrol1.SelectedIndex = 0
	$tabcontrol1.Size = '596, 478'
	$tabcontrol1.TabIndex = 3
	#
	# tabpage1
	#
	$tabpage1.Controls.Add($labelHostOrDescription)
	$tabpage1.Controls.Add($textboxHost)
	$tabpage1.Controls.Add($NewParentName)
	$tabpage1.Controls.Add($textboxNewParent)
	$tabpage1.Controls.Add($btnAdd_New_Parent)
	$tabpage1.Controls.Add($listview1)
	$tabpage1.Controls.Add($labelParent)
	$tabpage1.Controls.Add($comboboxParent)
	$tabpage1.Controls.Add($textboxAddLogin)
	$tabpage1.Controls.Add($labelAddLogin)
	$tabpage1.Controls.Add($labelAddPassword)
	$tabpage1.Controls.Add($textboxAddPassword)
	$tabpage1.Controls.Add($buttonAddPassword)
	$tabpage1.Controls.Add($textboxRunLog)
	$tabpage1.Controls.Add($textboxChosenFile)
	$tabpage1.Controls.Add($labelChosenFile)
	$tabpage1.Controls.Add($labelPasswordToKey)
	$tabpage1.Controls.Add($textboxPasstoKey)
	$tabpage1.Controls.Add($buttonRun)
	$tabpage1.Location = '4, 22'
	$tabpage1.Name = 'tabpage1'
	$tabpage1.Padding = '3, 3, 3, 3'
	$tabpage1.Size = '588, 452'
	$tabpage1.TabIndex = 0
	$tabpage1.Text = 'View'
	$tabpage1.UseVisualStyleBackColor = $True
	#
	# labelHostOrDescription
	#
	$labelHostOrDescription.AutoSize = $True
	$labelHostOrDescription.Location = '9, 351'
	$labelHostOrDescription.Name = 'labelHostOrDescription'
	$labelHostOrDescription.Size = '98, 17'
	$labelHostOrDescription.TabIndex = 22
	$labelHostOrDescription.Text = 'Host or description'
	$labelHostOrDescription.UseCompatibleTextRendering = $True
	#
	# textboxHost
	#
	$textboxHost.Location = '9, 371'
	$textboxHost.Name = 'textboxHost'
	$textboxHost.Size = '118, 20'
	$textboxHost.TabIndex = 21
	#
	# NewParentName
	#
	$NewParentName.AutoSize = $True
	$NewParentName.Location = '381, 310'
	$NewParentName.Name = 'NewParentName'
	$NewParentName.Size = '96, 17'
	$NewParentName.TabIndex = 20
	$NewParentName.Text = 'New Parent Name'
	$NewParentName.UseCompatibleTextRendering = $True
	#
	# textboxNewParent
	#
	$textboxNewParent.Location = '381, 330'
	$textboxNewParent.Name = 'textboxNewParent'
	$textboxNewParent.Size = '190, 20'
	$textboxNewParent.TabIndex = 19
	#
	# btnAdd_New_Parent
	#
	$btnAdd_New_Parent.Location = '475, 353'
	$btnAdd_New_Parent.Name = 'btnAdd_New_Parent'
	$btnAdd_New_Parent.Size = '96, 35'
	$btnAdd_New_Parent.TabIndex = 18
	$btnAdd_New_Parent.Text = 'Add New Parent'
	$btnAdd_New_Parent.UseCompatibleTextRendering = $True
	$btnAdd_New_Parent.UseVisualStyleBackColor = $True
	$btnAdd_New_Parent.add_Click($btnAdd_New_Parent_Click)
	#
	# listview1
	#
	[void]$listview1.Columns.Add($columnheader1)
	[void]$listview1.Columns.Add($columnheader6)
	[void]$listview1.Columns.Add($columnheader2)
	[void]$listview1.Columns.Add($columnheader3)
	[void]$listview1.Columns.Add($columnheader4)
	[void]$listview1.Columns.Add($columnheader5)
	[void]$listview1.Columns.Add($columnheader7)
	$listview1.FullRowSelect = $True
	$listview1.Location = '8, 49'
	$listview1.Name = 'listview1'
	$listview1.Size = '563, 258'
	$listview1.TabIndex = 17
	$listview1.UseCompatibleStateImageBehavior = $False
	$listview1.View = 'Details'
	$listview1.add_DoubleClick($listview1_DoubleClick)
	#
	# labelParent
	#
	$labelParent.AutoSize = $True
	$labelParent.Location = '8, 310'
	$labelParent.Name = 'labelParent'
	$labelParent.Size = '38, 17'
	$labelParent.TabIndex = 16
	$labelParent.Text = 'Parent'
	$labelParent.UseCompatibleTextRendering = $True
	#
	# comboboxParent
	#
	$comboboxParent.FormattingEnabled = $True
	[void]$comboboxParent.Items.Add('none')
	$comboboxParent.Location = '8, 330'
	$comboboxParent.Name = 'comboboxParent'
	$comboboxParent.Size = '121, 21'
	$comboboxParent.TabIndex = 14
	#
	# textboxAddLogin
	#
	$textboxAddLogin.Location = '131, 330'
	$textboxAddLogin.Name = 'textboxAddLogin'
	$textboxAddLogin.Size = '136, 20'
	$textboxAddLogin.TabIndex = 13
	#
	# labelAddLogin
	#
	$labelAddLogin.AutoSize = $True
	$labelAddLogin.Location = '131, 310'
	$labelAddLogin.Name = 'labelAddLogin'
	$labelAddLogin.Size = '55, 17'
	$labelAddLogin.TabIndex = 12
	$labelAddLogin.Text = 'Add Login'
	$labelAddLogin.UseCompatibleTextRendering = $True
	#
	# labelAddPassword
	#
	$labelAddPassword.AutoSize = $True
	$labelAddPassword.Location = '147, 351'
	$labelAddPassword.Name = 'labelAddPassword'
	$labelAddPassword.Size = '77, 17'
	$labelAddPassword.TabIndex = 11
	$labelAddPassword.Text = 'Add Password'
	$labelAddPassword.UseCompatibleTextRendering = $True
	#
	# textboxAddPassword
	#
	$textboxAddPassword.Location = '133, 371'
	$textboxAddPassword.Name = 'textboxAddPassword'
	$textboxAddPassword.Size = '134, 20'
	$textboxAddPassword.TabIndex = 10
	#
	# buttonAddPassword
	#
	$buttonAddPassword.Location = '285, 350'
	$buttonAddPassword.Name = 'buttonAddPassword'
	$buttonAddPassword.Size = '81, 41'
	$buttonAddPassword.TabIndex = 9
	$buttonAddPassword.Text = 'Add Password'
	$buttonAddPassword.UseCompatibleTextRendering = $True
	$buttonAddPassword.UseVisualStyleBackColor = $True
	$buttonAddPassword.add_Click($buttonAddPassword_Click)
	#
	# textboxRunLog
	#
	$textboxRunLog.Location = '8, 397'
	$textboxRunLog.Multiline = $True
	$textboxRunLog.Name = 'textboxRunLog'
	$textboxRunLog.ScrollBars = 'Vertical'
	$textboxRunLog.Size = '563, 47'
	$textboxRunLog.TabIndex = 8
	#
	# textboxChosenFile
	#
	$textboxChosenFile.Location = '3, 23'
	$textboxChosenFile.Name = 'textboxChosenFile'
	$textboxChosenFile.ReadOnly = $True
	$textboxChosenFile.Size = '322, 20'
	$textboxChosenFile.TabIndex = 6
	#
	# labelChosenFile
	#
	$labelChosenFile.AutoSize = $True
	$labelChosenFile.Location = '6, 3'
	$labelChosenFile.Name = 'labelChosenFile'
	$labelChosenFile.Size = '61, 17'
	$labelChosenFile.TabIndex = 5
	$labelChosenFile.Text = 'Chosen file'
	$labelChosenFile.UseCompatibleTextRendering = $True
	#
	# labelPasswordToKey
	#
	$labelPasswordToKey.AutoSize = $True
	$labelPasswordToKey.Location = '341, 0'
	$labelPasswordToKey.Name = 'labelPasswordToKey'
	$labelPasswordToKey.Size = '87, 17'
	$labelPasswordToKey.TabIndex = 4
	$labelPasswordToKey.Text = 'Password to key'
	$labelPasswordToKey.UseCompatibleTextRendering = $True
	#
	# textboxPasstoKey
	#
	$textboxPasstoKey.Location = '341, 23'
	$textboxPasstoKey.Name = 'textboxPasstoKey'
	$textboxPasstoKey.Size = '87, 20'
	$textboxPasstoKey.TabIndex = 3
	$textboxPasstoKey.UseSystemPasswordChar = $True
	$textboxPasstoKey.add_TextChanged($textboxPasstoKey_TextChanged)
	#
	# buttonRun
	#
	$buttonRun.Location = '470, 12'
	$buttonRun.Name = 'buttonRun'
	$buttonRun.Size = '101, 31'
	$buttonRun.TabIndex = 1
	$buttonRun.Text = 'Run'
	$buttonRun.UseCompatibleTextRendering = $True
	$buttonRun.UseVisualStyleBackColor = $True
	$buttonRun.add_Click($buttonRun_Click)
	#
	# tabpage2
	#
	$tabpage2.Controls.Add($textboxConfrimPassword)
	$tabpage2.Controls.Add($labelConfrimPassword)
	$tabpage2.Controls.Add($textboxCreatePassword)
	$tabpage2.Controls.Add($Password)
	$tabpage2.Controls.Add($textboxCreateLog)
	$tabpage2.Controls.Add($textboxCreateFileName)
	$tabpage2.Controls.Add($textboxCreateLogin)
	$tabpage2.Controls.Add($comboboxCreateType)
	$tabpage2.Controls.Add($labelFilename)
	$tabpage2.Controls.Add($labelYouLogin)
	$tabpage2.Controls.Add($Type)
	$tabpage2.Controls.Add($buttonCreate)
	$tabpage2.Location = '4, 22'
	$tabpage2.Name = 'tabpage2'
	$tabpage2.Padding = '3, 3, 3, 3'
	$tabpage2.Size = '588, 452'
	$tabpage2.TabIndex = 1
	$tabpage2.Text = 'Creating'
	$tabpage2.UseVisualStyleBackColor = $True
	#
	# textboxConfrimPassword
	#
	$textboxConfrimPassword.Location = '127, 161'
	$textboxConfrimPassword.Name = 'textboxConfrimPassword'
	$textboxConfrimPassword.Size = '121, 20'
	$textboxConfrimPassword.TabIndex = 11
	$textboxConfrimPassword.UseSystemPasswordChar = $True
	#
	# labelConfrimPassword
	#
	$labelConfrimPassword.AutoSize = $True
	$labelConfrimPassword.Location = '19, 164'
	$labelConfrimPassword.Name = 'labelConfrimPassword'
	$labelConfrimPassword.Size = '95, 17'
	$labelConfrimPassword.TabIndex = 10
	$labelConfrimPassword.Text = 'Confrim password'
	$labelConfrimPassword.UseCompatibleTextRendering = $True
	#
	# textboxCreatePassword
	#
	$textboxCreatePassword.Location = '127, 135'
	$textboxCreatePassword.Name = 'textboxCreatePassword'
	$textboxCreatePassword.Size = '121, 20'
	$textboxCreatePassword.TabIndex = 9
	$textboxCreatePassword.UseSystemPasswordChar = $True
	#
	# Password
	#
	$Password.AutoSize = $True
	$Password.Location = '19, 138'
	$Password.Name = 'Password'
	$Password.Size = '54, 17'
	$Password.TabIndex = 8
	$Password.Text = 'Password'
	$Password.UseCompatibleTextRendering = $True
	#
	# textboxCreateLog
	#
	$textboxCreateLog.Location = '19, 195'
	$textboxCreateLog.Multiline = $True
	$textboxCreateLog.Name = 'textboxCreateLog'
	$textboxCreateLog.Size = '420, 171'
	$textboxCreateLog.TabIndex = 7
	#
	# textboxCreateFileName
	#
	$textboxCreateFileName.Location = '127, 101'
	$textboxCreateFileName.Name = 'textboxCreateFileName'
	$textboxCreateFileName.Size = '121, 20'
	$textboxCreateFileName.TabIndex = 6
	#
	# textboxCreateLogin
	#
	$textboxCreateLogin.Location = '127, 60'
	$textboxCreateLogin.Name = 'textboxCreateLogin'
	$textboxCreateLogin.Size = '121, 20'
	$textboxCreateLogin.TabIndex = 5
	#
	# comboboxCreateType
	#
	$comboboxCreateType.FormattingEnabled = $True
	[void]$comboboxCreateType.Items.Add('On group')
	[void]$comboboxCreateType.Items.Add('Just for you')
	$comboboxCreateType.Location = '127, 27'
	$comboboxCreateType.Name = 'comboboxCreateType'
	$comboboxCreateType.Size = '121, 21'
	$comboboxCreateType.TabIndex = 4
	#
	# labelFilename
	#
	$labelFilename.AutoSize = $True
	$labelFilename.Location = '19, 104'
	$labelFilename.Name = 'labelFilename'
	$labelFilename.Size = '51, 17'
	$labelFilename.TabIndex = 3
	$labelFilename.Text = 'Filename'
	$labelFilename.UseCompatibleTextRendering = $True
	#
	# labelYouLogin
	#
	$labelYouLogin.AutoSize = $True
	$labelYouLogin.Location = '19, 60'
	$labelYouLogin.Name = 'labelYouLogin'
	$labelYouLogin.Size = '51, 17'
	$labelYouLogin.TabIndex = 2
	$labelYouLogin.Text = 'You login'
	$labelYouLogin.UseCompatibleTextRendering = $True
	#
	# Type
	#
	$Type.AutoSize = $True
	$Type.Location = '19, 27'
	$Type.Name = 'Type'
	$Type.Size = '29, 17'
	$Type.TabIndex = 1
	$Type.Text = 'Type'
	$Type.UseCompatibleTextRendering = $True
	#
	# buttonCreate
	#
	$buttonCreate.Location = '365, 372'
	$buttonCreate.Name = 'buttonCreate'
	$buttonCreate.Size = '75, 37'
	$buttonCreate.TabIndex = 0
	$buttonCreate.Text = 'Create'
	$buttonCreate.UseCompatibleTextRendering = $True
	$buttonCreate.UseVisualStyleBackColor = $True
	$buttonCreate.add_Click($buttonCreate_Click)
	#
	# tabpage3
	#
	$tabpage3.Controls.Add($textbox1)
	$tabpage3.Controls.Add($button1)
	$tabpage3.Location = '4, 22'
	$tabpage3.Name = 'tabpage3'
	$tabpage3.Padding = '3, 3, 3, 3'
	$tabpage3.Size = '588, 452'
	$tabpage3.TabIndex = 2
	$tabpage3.Text = 'Testing'
	$tabpage3.UseVisualStyleBackColor = $True
	#
	# textbox1
	#
	$textbox1.Location = '157, 181'
	$textbox1.Multiline = $True
	$textbox1.Name = 'textbox1'
	$textbox1.Size = '370, 171'
	$textbox1.TabIndex = 1
	#
	# button1
	#
	$button1.Location = '325, 76'
	$button1.Name = 'button1'
	$button1.Size = '75, 23'
	$button1.TabIndex = 0
	$button1.Text = 'button1'
	$button1.UseCompatibleTextRendering = $True
	$button1.UseVisualStyleBackColor = $True
	$button1.add_Click($button1_Click)
	#
	# menustrip1
	#
	[void]$menustrip1.Items.Add($fileToolStripMenuItem)
	[void]$menustrip1.Items.Add($editToolStripMenuItem)
	[void]$menustrip1.Items.Add($helpToolStripMenuItem)
	$menustrip1.Location = '0, 0'
	$menustrip1.Name = 'menustrip1'
	$menustrip1.Size = '608, 24'
	$menustrip1.TabIndex = 0
	$menustrip1.Text = 'menustrip1'
	#
	# fileToolStripMenuItem
	#
	[void]$fileToolStripMenuItem.DropDownItems.Add($loadAPSToolStripMenuItem)
	[void]$fileToolStripMenuItem.DropDownItems.Add($exitToolStripMenuItem)
	[void]$fileToolStripMenuItem.DropDownItems.Add($versionToolStripMenuItem)
	$fileToolStripMenuItem.Name = 'fileToolStripMenuItem'
	$fileToolStripMenuItem.Size = '37, 20'
	$fileToolStripMenuItem.Text = 'File'
	#
	# exitToolStripMenuItem
	#
	$exitToolStripMenuItem.Name = 'exitToolStripMenuItem'
	$exitToolStripMenuItem.Size = '145, 22'
	$exitToolStripMenuItem.Text = 'Exit'
	$exitToolStripMenuItem.add_Click($exitToolStripMenuItem_Click)
	#
	# editToolStripMenuItem
	#
	[void]$editToolStripMenuItem.DropDownItems.Add($copyToolStripMenuItem)
	[void]$editToolStripMenuItem.DropDownItems.Add($pasteToolStripMenuItem)
	$editToolStripMenuItem.Name = 'editToolStripMenuItem'
	$editToolStripMenuItem.Size = '39, 20'
	$editToolStripMenuItem.Text = 'Edit'
	#
	# copyToolStripMenuItem
	#
	$copyToolStripMenuItem.Name = 'copyToolStripMenuItem'
	$copyToolStripMenuItem.ShortcutKeys = [System.Windows.Forms.Keys]::C -bor [System.Windows.Forms.Keys]::Control 
	$copyToolStripMenuItem.Size = '144, 22'
	$copyToolStripMenuItem.Text = 'Copy'
	#
	# pasteToolStripMenuItem
	#
	$pasteToolStripMenuItem.Name = 'pasteToolStripMenuItem'
	$pasteToolStripMenuItem.ShortcutKeys = [System.Windows.Forms.Keys]::V -bor [System.Windows.Forms.Keys]::Control 
	$pasteToolStripMenuItem.Size = '144, 22'
	$pasteToolStripMenuItem.Text = 'Paste'
	#
	# helpToolStripMenuItem
	#
	[void]$helpToolStripMenuItem.DropDownItems.Add($aboutToolStripMenuItem)
	$helpToolStripMenuItem.Name = 'helpToolStripMenuItem'
	$helpToolStripMenuItem.Size = '44, 20'
	$helpToolStripMenuItem.Text = 'Help'
	#
	# aboutToolStripMenuItem
	#
	$aboutToolStripMenuItem.Name = 'aboutToolStripMenuItem'
	$aboutToolStripMenuItem.Size = '107, 22'
	$aboutToolStripMenuItem.Text = 'About'
	$aboutToolStripMenuItem.add_Click($aboutToolStripMenuItem_Click)
	#
	# openfiledialog1
	#
	#
	# loadAPSToolStripMenuItem
	#
	$loadAPSToolStripMenuItem.Name = 'loadAPSToolStripMenuItem'
	$loadAPSToolStripMenuItem.Size = '145, 22'
	$loadAPSToolStripMenuItem.Text = 'Load APS key'
	$loadAPSToolStripMenuItem.add_Click($loadAPSToolStripMenuItem_Click)
	#
	# versionToolStripMenuItem
	#
	$versionToolStripMenuItem.Name = 'versionToolStripMenuItem'
	$versionToolStripMenuItem.Size = '145, 22'
	$versionToolStripMenuItem.Text = 'Version'
	#
	# errorprovider1
	#
	$errorprovider1.ContainerControl = $formAPS
	#
	# columnheader1
	#
	$columnheader1.Text = 'ID'
	$columnheader1.Width = 27
	#
	# columnheader2
	#
	$columnheader2.Text = 'Login'
	$columnheader2.Width = 83
	#
	# columnheader3
	#
	$columnheader3.Text = 'Password'
	$columnheader3.Width = 62
	#
	# columnheader4
	#
	$columnheader4.Text = 'File'
	$columnheader4.Width = 46
	#
	# columnheader5
	#
	$columnheader5.Text = 'Date'
	$columnheader5.Width = 116
	#
	# columnheader6
	#
	$columnheader6.Text = 'Parent'
	#
	# columnheader7
	#
	$columnheader7.Text = 'Description'
	$columnheader7.Width = 94
	$menustrip1.ResumeLayout()
	$tabpage3.ResumeLayout()
	$tabpage2.ResumeLayout()
	$tabpage1.ResumeLayout()
	$tabcontrol1.ResumeLayout()
	$formAPS.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formAPS.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formAPS.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formAPS.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $formAPS.ShowDialog()

} #End Function

#Call the form
Show-MainForm_psf | Out-Null
