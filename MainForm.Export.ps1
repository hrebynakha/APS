#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 2b855348-feeb-402b-ba34-805d19f52a6d
# Source File: MainForm.psf
#------------------------------------------------------------------------
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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
dcPXDQAA#>
#endregion

<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2020 v5.7.172
     Generated on:       11/26/2020 2:28 PM
     Generated by:       hrbnkh
    --------------------------------------------------------------------------------
    .DESCRIPTION
        GUI script generated by PowerShell Studio 2020
#>


#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Show-MainForm_psf {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formAPS = New-Object 'System.Windows.Forms.Form'
	$tabcontrol1 = New-Object 'System.Windows.Forms.TabControl'
	$tabpage1 = New-Object 'System.Windows.Forms.TabPage'
	$labelHostOrDescription = New-Object 'System.Windows.Forms.Label'
	$textboxHost = New-Object 'System.Windows.Forms.TextBox'
	$NewParentName = New-Object 'System.Windows.Forms.Label'
	$textboxNewParent = New-Object 'System.Windows.Forms.TextBox'
	$btnAdd_New_Parent = New-Object 'System.Windows.Forms.Button'
	$listview1 = New-Object 'System.Windows.Forms.ListView'
	$labelParent = New-Object 'System.Windows.Forms.Label'
	$comboboxParent = New-Object 'System.Windows.Forms.ComboBox'
	$textboxAddLogin = New-Object 'System.Windows.Forms.TextBox'
	$labelAddLogin = New-Object 'System.Windows.Forms.Label'
	$labelAddPassword = New-Object 'System.Windows.Forms.Label'
	$textboxAddPassword = New-Object 'System.Windows.Forms.TextBox'
	$buttonAddPassword = New-Object 'System.Windows.Forms.Button'
	$textboxRunLog = New-Object 'System.Windows.Forms.TextBox'
	$textboxChosenFile = New-Object 'System.Windows.Forms.TextBox'
	$labelChosenFile = New-Object 'System.Windows.Forms.Label'
	$labelPasswordToKey = New-Object 'System.Windows.Forms.Label'
	$textboxPasstoKey = New-Object 'System.Windows.Forms.TextBox'
	$buttonRun = New-Object 'System.Windows.Forms.Button'
	$tabpage2 = New-Object 'System.Windows.Forms.TabPage'
	$textboxConfrimPassword = New-Object 'System.Windows.Forms.TextBox'
	$labelConfrimPassword = New-Object 'System.Windows.Forms.Label'
	$textboxCreatePassword = New-Object 'System.Windows.Forms.TextBox'
	$Password = New-Object 'System.Windows.Forms.Label'
	$textboxCreateLog = New-Object 'System.Windows.Forms.TextBox'
	$textboxCreateFileName = New-Object 'System.Windows.Forms.TextBox'
	$textboxCreateLogin = New-Object 'System.Windows.Forms.TextBox'
	$comboboxCreateType = New-Object 'System.Windows.Forms.ComboBox'
	$labelFilename = New-Object 'System.Windows.Forms.Label'
	$labelYouLogin = New-Object 'System.Windows.Forms.Label'
	$Type = New-Object 'System.Windows.Forms.Label'
	$buttonCreate = New-Object 'System.Windows.Forms.Button'
	$tabpage3 = New-Object 'System.Windows.Forms.TabPage'
	$menustrip1 = New-Object 'System.Windows.Forms.MenuStrip'
	$fileToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$exitToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$editToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$copyToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$pasteToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$helpToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$aboutToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$openfiledialog1 = New-Object 'System.Windows.Forms.OpenFileDialog'
	$loadAPSToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$versionToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$errorprovider1 = New-Object 'System.Windows.Forms.ErrorProvider'
	$columnheader1 = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheader2 = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheader3 = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheader4 = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheader5 = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheader6 = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheader7 = New-Object 'System.Windows.Forms.ColumnHeader'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$MainConfig = Get-Content .\config\main.config
	Write-Host "Load config"
	foreach ($line in $MainConfig)
	{
		Switch ($line)
		{
			{ ($line -like "#*") -or ($line -like $null) -or ($line -like "{*") } { }
			default {
				$Name = [regex]::split($line, '==')[0].Replace(" ", "")
				$Value = [regex]::split($line, '==')[1]
				try
				{
					Get-Variable -Name $Name -ErrorAction SilentlyContinue
				}
				catch
				{
					New-Variable -Name $Name -Value $Value
				}
				finally
				{
					Set-Variable -Name $Name -Value $Value
				}
			}
		}
	}
	
	$formAPS_Load={
		#TODO: Initialize Form Controls here
		Write-Host "Load module"
		Import-Module -PassThru "$PathToModule$ModuleName" #-Force -ErrorAction Ignore -WarningAction Ignore
		$test = "tesgkdfdagv"
		$Global:isTest = $true
		$Global:OFS = "`r`n"
	}
	
	
	$exitToolStripMenuItem_Click={
		#TODO: Place custom script here
		$formAPS.Close()
	}
	
	$aboutToolStripMenuItem_Click={
		#TODO: Place custom script here
		[System.Windows.Forms.MessageBox]::Show("APS v1.0","APS Application");
	}
	
	
	
	#region Control Helper Functions
	function Update-ListViewColumnSort
	{
	<#
		.SYNOPSIS
			Sort the ListView's item using the specified column.
		
		.DESCRIPTION
			Sort the ListView's item using the specified column.
			This function uses Add-Type to define a class that sort the items.
			The ListView's Tag property is used to keep track of the sorting.
		
		.PARAMETER ListView
			The ListView control to sort.
		
		.PARAMETER ColumnIndex
			The index of the column to use for sorting.
		
		.PARAMETER SortOrder
			The direction to sort the items. If not specified or set to None, it will toggle.
		
		.EXAMPLE
			Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListView]
			$ListView,
			[Parameter(Mandatory = $true)]
			[int]
			$ColumnIndex,
			[System.Windows.Forms.SortOrder]
			$SortOrder = 'None'
		)
		
		if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
		{
			return;
		}
		
		#region Define ListViewItemComparer
		try
		{
			[ListViewItemComparer] | Out-Null
		}
		catch
		{
			Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
		}
		#endregion
		
		if ($ListView.Tag -is [ListViewItemComparer])
		{
			#Toggle the Sort Order
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
				{
					$ListView.Tag.sortOrder = 'Descending'
				}
				else
				{
					$ListView.Tag.sortOrder = 'Ascending'
				}
			}
			else
			{
				$ListView.Tag.sortOrder = $SortOrder
			}
			
			$ListView.Tag.column = $ColumnIndex
			$ListView.Sort() #Sort the items
		}
		else
		{
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
			}
			
			#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
			$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
			$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
		}
	}
	
	
	function Add-ListViewItem
	{
	<#
		.SYNOPSIS
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.DESCRIPTION
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.PARAMETER ListView
			The ListView control to add the items to.
	
		.PARAMETER Items
			The object or objects you wish to load into the ListView's Items collection.
			
		.PARAMETER  ImageIndex
			The index of a predefined image in the ListView's ImageList.
		
		.PARAMETER  SubItems
			List of strings to add as Subitems.
		
		.PARAMETER Group
			The group to place the item(s) in.
		
		.PARAMETER Clear
			This switch clears the ListView's Items before adding the new item(s).
		
		.EXAMPLE
			Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
	#>
		
		Param( 
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.ListView]$ListView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Items,
		[int]$ImageIndex = -1,
		[string[]]$SubItems,
		$Group,
		[switch]$Clear)
		
		if($Clear)
		{
			$ListView.Items.Clear();
	    }
	    
	    $lvGroup = $null
	    if ($Group -is [System.Windows.Forms.ListViewGroup])
	    {
	        $lvGroup = $Group
	    }
	    elseif ($Group -is [string])
	    {
	        #$lvGroup = $ListView.Group[$Group] # Case sensitive
	        foreach ($groupItem in $ListView.Groups)
	        {
	            if ($groupItem.Name -eq $Group)
	            {
	                $lvGroup = $groupItem
	                break
	            }
	        }
	        
	        if ($null -eq $lvGroup)
	        {
	            $lvGroup = $ListView.Groups.Add($Group, $Group)
	        }
	    }
	    
		if($Items -is [Array])
		{
			$ListView.BeginUpdate()
			foreach ($item in $Items)
			{		
				$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
				#Store the object in the Tag
				$listitem.Tag = $item
				
				if($null -ne $SubItems)
				{
					$listitem.SubItems.AddRange($SubItems)
				}
				
				if($null -ne $lvGroup)
				{
					$listitem.Group = $lvGroup
				}
			}
			$ListView.EndUpdate()
		}
		else
		{
			#Add a new item to the ListView
			$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $Items
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
	}
	
	
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
			
		.PARAMETER ValueMember
			Indicates the property to use for the value of the control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]
			$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[Parameter(Mandatory = $false)]
			[string]$ValueMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
		$ComboBox.ValueMember = $ValueMember
	}
	#endregion
	
	$buttonCreate_Click={
		#TODO: Place custom script here
		#initials parameters
		try
		{
			$Global:OFS = "`r`n"
			$textboxCreateLog.Clear();
			$errorprovider1.Clear();
			$Type = $comboboxCreateType.SelectedItem;
			$ADlogin = $textboxCreateLogin.Text;
			$filename = $textboxCreateFileName.Text;
			
			if ($textboxConfrimPassword.Text -ne $textboxCreatePassword.Text)
			{
				[System.Windows.Forms.MessageBox]::Show('Passwords does not  match', 'Information', 'OK', 'Error')
				return
			}
			$textboxCreateLog.Text += "*LOG*---------Password OK" +$OFS
			$ChildNameFolderChar = -join (1 .. 24 | % { [char[]]'ABCDEFGHIJKLMNOPQRSTUWXYZ1234567890abcdfeghijklmnopqrstuvwxyz' | Get-Random })
			[string]$ChildNameFolder = $ChildNameFolderChar.ToString()
			mkdir "$PathToFile$ChildNameFolder"
			$textboxCreateLog.Text += "*LOG*---------Creted new Folder  OK $PathToFile$ChildNameFolder" + $OFS
			Compress-APK -InputPath "$PathToFile$ChildNameFolder" -RootFolder $ChildNameFolder -IsTest -$IsTest -filename $filename -textboxCreateLog $textboxCreateLog
			try
			{
				Remove-Item "$($PathToFile)$($ChildNameFolder)" -Recurse -Force -Confirm:$false
				Remove-Item "$($PathToFile)tes" -Recurse -Force -Confirm:$false
				$textboxCreateLog.Text += "*LOG*---------Folder deleted OK" + $OFS
			}
			catch
			{
				$textboxCreateLog.Text += "*LOG*---------Error $_ path $PathToFile$ChildNameFolder " + $OFS
			}
			
				
		
			$textboxCreateLog.Text += "*LOG*---------Compressed OK" + $OFS
			$File = New-Object -TypeName psobject
			$AESKey = New-AESKey -IsTest $true
			$textboxCreateLog.Text += "*LOG*---------AES Key generated OK" + $OFS
			$MainPassword = Convert-ToSequrePas -InputPass $textboxCreatePassword.Text -IsTest $IsTest -AESKey $AESKey
			$textboxCreateLog.Text += "*LOG*---------Security password OK" + $OFS
			$File | Add-Member -MemberType NoteProperty -Name "Security credentials" -Value $AESKey, $MainPassword
			$Date = Get-Date
			$File | Add-Member -MemberType NoteProperty -Name "Date created" -Value $Date
			$File | Add-Member -MemberType NoteProperty -Name "Personal info" -Value $ADlogin, $filename
			$File | Add-Member -MemberType NoteProperty -Name "Type" -Value $Type
			$File | Add-Member -MemberType NoteProperty -Name "ChildNameFolder" -Value $ChildNameFolder
			if (!(Test-Path $PathToFile))
			{
				mkdir $PathToFile
				$textboxCreateLog.Text += "*LOG*---------Create Folder  OK" + $OFS
			}
			else
			{
				$textboxCreateLog.Text += "*LOG*---------Folder  OK" + $OFS
			}
			
			if (!(Test-Path $PathToFile\$ChildNameFolder))
			{
				mkdir $PathToFile\$ChildNameFolder
				$textboxCreateLog.Text += "*LOG*---------Create Folder  OK" + $OFS
			}
			else
			{
				$textboxCreateLog.Text += "*LOG*---------Folder  OK" + $OFS
			}
			$File | Export-Clixml -Path "$PathToFile\$filename.aps"
			$textboxCreateLog.Text += "*LOG*---------File Genereted  OK" + $OFS
			
			
		}
		catch
		{
			
			$textboxCreateLog.Text+= "Error $_ when trying create new APS key"
		}
		
	}
	
	$textboxPasstoKey_TextChanged={
		#TODO: Place custom script here
		
	}
	
	$loadAPSToolStripMenuItem_Click={
		#TODO: Place custom script here
		$textboxPasstoKey.Clear()
		$openfiledialog1.ShowDialog()
		$Global:PathToAPS = $openfiledialog1.FileName.ToString()
		$textboxChosenFile.Text = $Global:PathToAPS
		try
		{
			$Global:APS = Import-Clixml -Path $global:PathToAPS
			$textboxRunLog.Text +="*LOG*---------APS  loaded" +  $OFS
		}
		catch
		{
			$textboxRunLog.Text += "*LOG*---------Error $_ when trying import APS key" + $OFS
		}
	}
	
	$buttonRun_Click={
		#TODO: Place custom script here
		$listview1.Items.Clear();
		$SeqPass = $global:APS.'Security credentials'[1]
		$AESKey = $global:APS.'Security credentials'[0]
		$InputPaswword=$textboxPasstoKey.Text
		$APSUnSeqPass= Convert-FromSequrePas -InputPass $SeqPass -IsTest $true -AESKey $AESKey
		if (!($APSUnSeqPass -eq $InputPaswword))
		{
			[System.Windows.Forms.MessageBox]::Show('Passwords does not  match', 'Access denied', 'OK', 'Error')
			return
		}
		
		$global:APK = 
		$global:ASK = Get-ChildItem -Path "$PathToChildFolder\$($global:APS.ChildNameFolder)" | select *
		
		if ($global:ASK -ne $null)
		{
			$parent = $global:ASK | where { $_.Attributes -eq 'Directory' } | select Name
			if ($parent.Count -gt 1)
			{
				$comboboxParent.DataSource = $parent.Name + "none"
				$comboboxParent.SelectedItem = "none"
				$textboxRunLog.Text += "*LOG*---------Add $($parent.Name)  to parent item" + $OFS
			}
			else
			{
				$tmpArray = @("$($parent.Name)", "none")
				$comboboxParent.DataSource = $tmpArray
				$comboboxParent.SelectedItem = "none"
				$textboxRunLog.Text += "*LOG*---------Add one $($parent.Name)  to parent item" + $OFS
			}
			
			#adding to table information
			Add-ToListASK -ASK $global:ASK -IsTest $isTest -listview $listview1 -textboxRunLog $textboxRunLog
		}
		else
		{
			#we need create to the aps path  and document where will be save passwords and logins
			[System.Windows.Forms.MessageBox]::Show('ASK does not have any password', 'Information', 'OK', 'Information')
		}
		
		
	}
	$buttonAddPassword_Click={
		#TODO: Place custom script here
		try
		{
			$FileName = -join (1 .. 24 | % { [char[]]'ABCDEFGHIJKLMNOPQRSTUWXYZ1234567890abcdfeghijklmnopqrstuvwxyz' | Get-Random })
			$AESKey = $global:APS.'Security credentials'[0]
			$Password = Convert-ToSequrePas -InputPass $textboxAddPassword.Text -IsTest $IsTest -AESKey $AESKey
			$textboxRunLog.Text += "*LOG*---------Password Add OK" + $OFS
			$File = New-Object -TypeName psobject
			
			$File | Add-Member -MemberType NoteProperty -Name "PWD" -Value $Password
			$Date = Get-Date
			$File | Add-Member -MemberType NoteProperty -Name "Date created" -Value $Date
			$File | Add-Member -MemberType NoteProperty -Name "Personal info" -Value $textboxAddLogin.Text, $filename
			$File | Add-Member -MemberType NoteProperty -Name "RootFolder" -Value $($global:APS.ChildNameFolder)
			$File | Add-Member -MemberType NoteProperty -Name "ParentObject" -Value $comboboxParent.SelectedItem
			$File | Add-Member -MemberType NoteProperty -Name "Host" -Value $textboxHost.Text
			$textboxRunLog.Text += "*LOG*---------File Add OK" + $OFS
			if ($File.ParentObject -eq "none")
			{
				$File | Export-Clixml -Path "$PathToChildFolder\$($global:APS.ChildNameFolder)\$FileName.ask"
			}
			else
			{
				$File | Export-Clixml -Path "$PathToChildFolder\$($global:APS.ChildNameFolder)\$($comboboxParent.SelectedItem)\$FileName.ask"
			}
			
		}
		catch
		{
			$textboxRunLog.Text += "*LOG*---------Error $_ when trying import APS key" + $OFS
		}
		#$comboboxParent.SelectedItem = "none"
	}
	
	$btnAdd_New_Parent_Click={
		#TODO: Place custom script here
		mkdir "$PathToChildFolder\$($global:APS.ChildNameFolder)\$($textboxNewParent.Text)"
		$global:ASK = Get-ChildItem -Path "$PathToChildFolder\$($global:APS.ChildNameFolder)"
		$parent = $global:ASK | where { $_.Attributes -eq 'Directory' } | select Name
		if ($parent.Count -gt 1)
		{
			$comboboxParent.DataSource = $parent.Name + "none"
			$comboboxParent.SelectedItem = "none"
			$textboxRunLog.Text += "*LOG*---------Add $($parent.Name)  to parent item" + $OFS
		}
		else
		{
			$tmpArray = @("$($parent.Name)", "none")
			$comboboxParent.DataSource = $tmpArray
			$comboboxParent.SelectedItem = "none"
			$textboxRunLog.Text += "*LOG*---------Add one $($parent.Name)  to parent item" + $OFS
		}
	}
	
	$listview1_DoubleClick={
		#TODO: Place custom script here
		$SelectItemLogin = $listview1.SelectedItems[0].SubItems[2].Text
		if ($SelectItemLogin -ne "-")
		{
			$SelectItemPas = $listview1.SelectedItems[0].SubItems[3].Text
			$AESKey = $global:APS.'Security credentials'[0]
			$UnSeqPass = Convert-FromSequrePas -InputPass $SelectItemPas -IsTest $true -AESKey $AESKey
			$UnSeqPass | clip
			[System.Windows.Forms.MessageBox]::Show("$SelectItemLogin password copy in your clipboard", 'Information', 'OK', 'Information')
		}
		else
		{
			[System.Windows.Forms.MessageBox]::Show("The parent has not any password", 'Information', 'OK', 'Error')
		}
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formAPS.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$btnAdd_New_Parent.remove_Click($btnAdd_New_Parent_Click)
			$listview1.remove_DoubleClick($listview1_DoubleClick)
			$buttonAddPassword.remove_Click($buttonAddPassword_Click)
			$textboxPasstoKey.remove_TextChanged($textboxPasstoKey_TextChanged)
			$buttonRun.remove_Click($buttonRun_Click)
			$buttonCreate.remove_Click($buttonCreate_Click)
			$formAPS.remove_Load($formAPS_Load)
			$exitToolStripMenuItem.remove_Click($exitToolStripMenuItem_Click)
			$aboutToolStripMenuItem.remove_Click($aboutToolStripMenuItem_Click)
			$loadAPSToolStripMenuItem.remove_Click($loadAPSToolStripMenuItem_Click)
			$formAPS.remove_Load($Form_StateCorrection_Load)
			$formAPS.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formAPS.SuspendLayout()
	$tabcontrol1.SuspendLayout()
	$tabpage1.SuspendLayout()
	$tabpage2.SuspendLayout()
	$menustrip1.SuspendLayout()
	#
	# formAPS
	#
	$formAPS.Controls.Add($tabcontrol1)
	$formAPS.Controls.Add($menustrip1)
	$formAPS.AutoScaleDimensions = '6, 13'
	$formAPS.AutoScaleMode = 'Font'
	$formAPS.ClientSize = '608, 509'
	$formAPS.MainMenuStrip = $menustrip1
	$formAPS.Name = 'formAPS'
	$formAPS.StartPosition = 'CenterScreen'
	$formAPS.Text = 'APS'
	$formAPS.add_Load($formAPS_Load)
	#
	# tabcontrol1
	#
	$tabcontrol1.Controls.Add($tabpage1)
	$tabcontrol1.Controls.Add($tabpage2)
	$tabcontrol1.Controls.Add($tabpage3)
	$tabcontrol1.Location = '0, 27'
	$tabcontrol1.Name = 'tabcontrol1'
	$tabcontrol1.SelectedIndex = 0
	$tabcontrol1.Size = '596, 478'
	$tabcontrol1.TabIndex = 3
	#
	# tabpage1
	#
	$tabpage1.Controls.Add($labelHostOrDescription)
	$tabpage1.Controls.Add($textboxHost)
	$tabpage1.Controls.Add($NewParentName)
	$tabpage1.Controls.Add($textboxNewParent)
	$tabpage1.Controls.Add($btnAdd_New_Parent)
	$tabpage1.Controls.Add($listview1)
	$tabpage1.Controls.Add($labelParent)
	$tabpage1.Controls.Add($comboboxParent)
	$tabpage1.Controls.Add($textboxAddLogin)
	$tabpage1.Controls.Add($labelAddLogin)
	$tabpage1.Controls.Add($labelAddPassword)
	$tabpage1.Controls.Add($textboxAddPassword)
	$tabpage1.Controls.Add($buttonAddPassword)
	$tabpage1.Controls.Add($textboxRunLog)
	$tabpage1.Controls.Add($textboxChosenFile)
	$tabpage1.Controls.Add($labelChosenFile)
	$tabpage1.Controls.Add($labelPasswordToKey)
	$tabpage1.Controls.Add($textboxPasstoKey)
	$tabpage1.Controls.Add($buttonRun)
	$tabpage1.Location = '4, 22'
	$tabpage1.Name = 'tabpage1'
	$tabpage1.Padding = '3, 3, 3, 3'
	$tabpage1.Size = '588, 452'
	$tabpage1.TabIndex = 0
	$tabpage1.Text = 'View'
	$tabpage1.UseVisualStyleBackColor = $True
	#
	# labelHostOrDescription
	#
	$labelHostOrDescription.AutoSize = $True
	$labelHostOrDescription.Location = '9, 351'
	$labelHostOrDescription.Name = 'labelHostOrDescription'
	$labelHostOrDescription.Size = '98, 17'
	$labelHostOrDescription.TabIndex = 22
	$labelHostOrDescription.Text = 'Host or description'
	$labelHostOrDescription.UseCompatibleTextRendering = $True
	#
	# textboxHost
	#
	$textboxHost.Location = '9, 371'
	$textboxHost.Name = 'textboxHost'
	$textboxHost.Size = '118, 20'
	$textboxHost.TabIndex = 21
	#
	# NewParentName
	#
	$NewParentName.AutoSize = $True
	$NewParentName.Location = '381, 310'
	$NewParentName.Name = 'NewParentName'
	$NewParentName.Size = '96, 17'
	$NewParentName.TabIndex = 20
	$NewParentName.Text = 'New Parent Name'
	$NewParentName.UseCompatibleTextRendering = $True
	#
	# textboxNewParent
	#
	$textboxNewParent.Location = '381, 330'
	$textboxNewParent.Name = 'textboxNewParent'
	$textboxNewParent.Size = '190, 20'
	$textboxNewParent.TabIndex = 19
	#
	# btnAdd_New_Parent
	#
	$btnAdd_New_Parent.Location = '475, 353'
	$btnAdd_New_Parent.Name = 'btnAdd_New_Parent'
	$btnAdd_New_Parent.Size = '96, 35'
	$btnAdd_New_Parent.TabIndex = 18
	$btnAdd_New_Parent.Text = 'Add New Parent'
	$btnAdd_New_Parent.UseCompatibleTextRendering = $True
	$btnAdd_New_Parent.UseVisualStyleBackColor = $True
	$btnAdd_New_Parent.add_Click($btnAdd_New_Parent_Click)
	#
	# listview1
	#
	[void]$listview1.Columns.Add($columnheader1)
	[void]$listview1.Columns.Add($columnheader6)
	[void]$listview1.Columns.Add($columnheader2)
	[void]$listview1.Columns.Add($columnheader3)
	[void]$listview1.Columns.Add($columnheader4)
	[void]$listview1.Columns.Add($columnheader5)
	[void]$listview1.Columns.Add($columnheader7)
	$listview1.FullRowSelect = $True
	$listview1.Location = '8, 49'
	$listview1.Name = 'listview1'
	$listview1.Size = '563, 258'
	$listview1.TabIndex = 17
	$listview1.UseCompatibleStateImageBehavior = $False
	$listview1.View = 'Details'
	$listview1.add_DoubleClick($listview1_DoubleClick)
	#
	# labelParent
	#
	$labelParent.AutoSize = $True
	$labelParent.Location = '8, 310'
	$labelParent.Name = 'labelParent'
	$labelParent.Size = '38, 17'
	$labelParent.TabIndex = 16
	$labelParent.Text = 'Parent'
	$labelParent.UseCompatibleTextRendering = $True
	#
	# comboboxParent
	#
	$comboboxParent.FormattingEnabled = $True
	[void]$comboboxParent.Items.Add('none')
	$comboboxParent.Location = '8, 330'
	$comboboxParent.Name = 'comboboxParent'
	$comboboxParent.Size = '121, 21'
	$comboboxParent.TabIndex = 14
	#
	# textboxAddLogin
	#
	$textboxAddLogin.Location = '131, 330'
	$textboxAddLogin.Name = 'textboxAddLogin'
	$textboxAddLogin.Size = '136, 20'
	$textboxAddLogin.TabIndex = 13
	#
	# labelAddLogin
	#
	$labelAddLogin.AutoSize = $True
	$labelAddLogin.Location = '131, 310'
	$labelAddLogin.Name = 'labelAddLogin'
	$labelAddLogin.Size = '55, 17'
	$labelAddLogin.TabIndex = 12
	$labelAddLogin.Text = 'Add Login'
	$labelAddLogin.UseCompatibleTextRendering = $True
	#
	# labelAddPassword
	#
	$labelAddPassword.AutoSize = $True
	$labelAddPassword.Location = '147, 351'
	$labelAddPassword.Name = 'labelAddPassword'
	$labelAddPassword.Size = '77, 17'
	$labelAddPassword.TabIndex = 11
	$labelAddPassword.Text = 'Add Password'
	$labelAddPassword.UseCompatibleTextRendering = $True
	#
	# textboxAddPassword
	#
	$textboxAddPassword.Location = '133, 371'
	$textboxAddPassword.Name = 'textboxAddPassword'
	$textboxAddPassword.Size = '134, 20'
	$textboxAddPassword.TabIndex = 10
	#
	# buttonAddPassword
	#
	$buttonAddPassword.Location = '285, 350'
	$buttonAddPassword.Name = 'buttonAddPassword'
	$buttonAddPassword.Size = '81, 41'
	$buttonAddPassword.TabIndex = 9
	$buttonAddPassword.Text = 'Add Password'
	$buttonAddPassword.UseCompatibleTextRendering = $True
	$buttonAddPassword.UseVisualStyleBackColor = $True
	$buttonAddPassword.add_Click($buttonAddPassword_Click)
	#
	# textboxRunLog
	#
	$textboxRunLog.Location = '8, 397'
	$textboxRunLog.Multiline = $True
	$textboxRunLog.Name = 'textboxRunLog'
	$textboxRunLog.ScrollBars = 'Vertical'
	$textboxRunLog.Size = '563, 47'
	$textboxRunLog.TabIndex = 8
	#
	# textboxChosenFile
	#
	$textboxChosenFile.Location = '3, 23'
	$textboxChosenFile.Name = 'textboxChosenFile'
	$textboxChosenFile.ReadOnly = $True
	$textboxChosenFile.Size = '322, 20'
	$textboxChosenFile.TabIndex = 6
	#
	# labelChosenFile
	#
	$labelChosenFile.AutoSize = $True
	$labelChosenFile.Location = '6, 3'
	$labelChosenFile.Name = 'labelChosenFile'
	$labelChosenFile.Size = '61, 17'
	$labelChosenFile.TabIndex = 5
	$labelChosenFile.Text = 'Chosen file'
	$labelChosenFile.UseCompatibleTextRendering = $True
	#
	# labelPasswordToKey
	#
	$labelPasswordToKey.AutoSize = $True
	$labelPasswordToKey.Location = '341, 0'
	$labelPasswordToKey.Name = 'labelPasswordToKey'
	$labelPasswordToKey.Size = '87, 17'
	$labelPasswordToKey.TabIndex = 4
	$labelPasswordToKey.Text = 'Password to key'
	$labelPasswordToKey.UseCompatibleTextRendering = $True
	#
	# textboxPasstoKey
	#
	$textboxPasstoKey.Location = '341, 23'
	$textboxPasstoKey.Name = 'textboxPasstoKey'
	$textboxPasstoKey.Size = '87, 20'
	$textboxPasstoKey.TabIndex = 3
	$textboxPasstoKey.UseSystemPasswordChar = $True
	$textboxPasstoKey.add_TextChanged($textboxPasstoKey_TextChanged)
	#
	# buttonRun
	#
	$buttonRun.Location = '470, 12'
	$buttonRun.Name = 'buttonRun'
	$buttonRun.Size = '101, 31'
	$buttonRun.TabIndex = 1
	$buttonRun.Text = 'Run'
	$buttonRun.UseCompatibleTextRendering = $True
	$buttonRun.UseVisualStyleBackColor = $True
	$buttonRun.add_Click($buttonRun_Click)
	#
	# tabpage2
	#
	$tabpage2.Controls.Add($textboxConfrimPassword)
	$tabpage2.Controls.Add($labelConfrimPassword)
	$tabpage2.Controls.Add($textboxCreatePassword)
	$tabpage2.Controls.Add($Password)
	$tabpage2.Controls.Add($textboxCreateLog)
	$tabpage2.Controls.Add($textboxCreateFileName)
	$tabpage2.Controls.Add($textboxCreateLogin)
	$tabpage2.Controls.Add($comboboxCreateType)
	$tabpage2.Controls.Add($labelFilename)
	$tabpage2.Controls.Add($labelYouLogin)
	$tabpage2.Controls.Add($Type)
	$tabpage2.Controls.Add($buttonCreate)
	$tabpage2.Location = '4, 22'
	$tabpage2.Name = 'tabpage2'
	$tabpage2.Padding = '3, 3, 3, 3'
	$tabpage2.Size = '588, 452'
	$tabpage2.TabIndex = 1
	$tabpage2.Text = 'Creating'
	$tabpage2.UseVisualStyleBackColor = $True
	#
	# textboxConfrimPassword
	#
	$textboxConfrimPassword.Location = '127, 161'
	$textboxConfrimPassword.Name = 'textboxConfrimPassword'
	$textboxConfrimPassword.Size = '121, 20'
	$textboxConfrimPassword.TabIndex = 11
	$textboxConfrimPassword.UseSystemPasswordChar = $True
	#
	# labelConfrimPassword
	#
	$labelConfrimPassword.AutoSize = $True
	$labelConfrimPassword.Location = '19, 164'
	$labelConfrimPassword.Name = 'labelConfrimPassword'
	$labelConfrimPassword.Size = '95, 17'
	$labelConfrimPassword.TabIndex = 10
	$labelConfrimPassword.Text = 'Confrim password'
	$labelConfrimPassword.UseCompatibleTextRendering = $True
	#
	# textboxCreatePassword
	#
	$textboxCreatePassword.Location = '127, 135'
	$textboxCreatePassword.Name = 'textboxCreatePassword'
	$textboxCreatePassword.Size = '121, 20'
	$textboxCreatePassword.TabIndex = 9
	$textboxCreatePassword.UseSystemPasswordChar = $True
	#
	# Password
	#
	$Password.AutoSize = $True
	$Password.Location = '19, 138'
	$Password.Name = 'Password'
	$Password.Size = '54, 17'
	$Password.TabIndex = 8
	$Password.Text = 'Password'
	$Password.UseCompatibleTextRendering = $True
	#
	# textboxCreateLog
	#
	$textboxCreateLog.Location = '19, 195'
	$textboxCreateLog.Multiline = $True
	$textboxCreateLog.Name = 'textboxCreateLog'
	$textboxCreateLog.Size = '420, 171'
	$textboxCreateLog.TabIndex = 7
	#
	# textboxCreateFileName
	#
	$textboxCreateFileName.Location = '127, 101'
	$textboxCreateFileName.Name = 'textboxCreateFileName'
	$textboxCreateFileName.Size = '121, 20'
	$textboxCreateFileName.TabIndex = 6
	#
	# textboxCreateLogin
	#
	$textboxCreateLogin.Location = '127, 60'
	$textboxCreateLogin.Name = 'textboxCreateLogin'
	$textboxCreateLogin.Size = '121, 20'
	$textboxCreateLogin.TabIndex = 5
	#
	# comboboxCreateType
	#
	$comboboxCreateType.FormattingEnabled = $True
	[void]$comboboxCreateType.Items.Add('On group')
	[void]$comboboxCreateType.Items.Add('Just for you')
	$comboboxCreateType.Location = '127, 27'
	$comboboxCreateType.Name = 'comboboxCreateType'
	$comboboxCreateType.Size = '121, 21'
	$comboboxCreateType.TabIndex = 4
	#
	# labelFilename
	#
	$labelFilename.AutoSize = $True
	$labelFilename.Location = '19, 104'
	$labelFilename.Name = 'labelFilename'
	$labelFilename.Size = '51, 17'
	$labelFilename.TabIndex = 3
	$labelFilename.Text = 'Filename'
	$labelFilename.UseCompatibleTextRendering = $True
	#
	# labelYouLogin
	#
	$labelYouLogin.AutoSize = $True
	$labelYouLogin.Location = '19, 60'
	$labelYouLogin.Name = 'labelYouLogin'
	$labelYouLogin.Size = '51, 17'
	$labelYouLogin.TabIndex = 2
	$labelYouLogin.Text = 'You login'
	$labelYouLogin.UseCompatibleTextRendering = $True
	#
	# Type
	#
	$Type.AutoSize = $True
	$Type.Location = '19, 27'
	$Type.Name = 'Type'
	$Type.Size = '29, 17'
	$Type.TabIndex = 1
	$Type.Text = 'Type'
	$Type.UseCompatibleTextRendering = $True
	#
	# buttonCreate
	#
	$buttonCreate.Location = '365, 372'
	$buttonCreate.Name = 'buttonCreate'
	$buttonCreate.Size = '75, 37'
	$buttonCreate.TabIndex = 0
	$buttonCreate.Text = 'Create'
	$buttonCreate.UseCompatibleTextRendering = $True
	$buttonCreate.UseVisualStyleBackColor = $True
	$buttonCreate.add_Click($buttonCreate_Click)
	#
	# tabpage3
	#
	$tabpage3.Location = '4, 22'
	$tabpage3.Name = 'tabpage3'
	$tabpage3.Padding = '3, 3, 3, 3'
	$tabpage3.Size = '588, 452'
	$tabpage3.TabIndex = 2
	$tabpage3.Text = 'Testing'
	$tabpage3.UseVisualStyleBackColor = $True
	#
	# menustrip1
	#
	[void]$menustrip1.Items.Add($fileToolStripMenuItem)
	[void]$menustrip1.Items.Add($editToolStripMenuItem)
	[void]$menustrip1.Items.Add($helpToolStripMenuItem)
	$menustrip1.Location = '0, 0'
	$menustrip1.Name = 'menustrip1'
	$menustrip1.Size = '608, 24'
	$menustrip1.TabIndex = 0
	$menustrip1.Text = 'menustrip1'
	#
	# fileToolStripMenuItem
	#
	[void]$fileToolStripMenuItem.DropDownItems.Add($loadAPSToolStripMenuItem)
	[void]$fileToolStripMenuItem.DropDownItems.Add($exitToolStripMenuItem)
	[void]$fileToolStripMenuItem.DropDownItems.Add($versionToolStripMenuItem)
	$fileToolStripMenuItem.Name = 'fileToolStripMenuItem'
	$fileToolStripMenuItem.Size = '37, 20'
	$fileToolStripMenuItem.Text = 'File'
	#
	# exitToolStripMenuItem
	#
	$exitToolStripMenuItem.Name = 'exitToolStripMenuItem'
	$exitToolStripMenuItem.Size = '145, 22'
	$exitToolStripMenuItem.Text = 'Exit'
	$exitToolStripMenuItem.add_Click($exitToolStripMenuItem_Click)
	#
	# editToolStripMenuItem
	#
	[void]$editToolStripMenuItem.DropDownItems.Add($copyToolStripMenuItem)
	[void]$editToolStripMenuItem.DropDownItems.Add($pasteToolStripMenuItem)
	$editToolStripMenuItem.Name = 'editToolStripMenuItem'
	$editToolStripMenuItem.Size = '39, 20'
	$editToolStripMenuItem.Text = 'Edit'
	#
	# copyToolStripMenuItem
	#
	$copyToolStripMenuItem.Name = 'copyToolStripMenuItem'
	$copyToolStripMenuItem.ShortcutKeys = [System.Windows.Forms.Keys]::C -bor [System.Windows.Forms.Keys]::Control 
	$copyToolStripMenuItem.Size = '144, 22'
	$copyToolStripMenuItem.Text = 'Copy'
	#
	# pasteToolStripMenuItem
	#
	$pasteToolStripMenuItem.Name = 'pasteToolStripMenuItem'
	$pasteToolStripMenuItem.ShortcutKeys = [System.Windows.Forms.Keys]::V -bor [System.Windows.Forms.Keys]::Control 
	$pasteToolStripMenuItem.Size = '144, 22'
	$pasteToolStripMenuItem.Text = 'Paste'
	#
	# helpToolStripMenuItem
	#
	[void]$helpToolStripMenuItem.DropDownItems.Add($aboutToolStripMenuItem)
	$helpToolStripMenuItem.Name = 'helpToolStripMenuItem'
	$helpToolStripMenuItem.Size = '44, 20'
	$helpToolStripMenuItem.Text = 'Help'
	#
	# aboutToolStripMenuItem
	#
	$aboutToolStripMenuItem.Name = 'aboutToolStripMenuItem'
	$aboutToolStripMenuItem.Size = '107, 22'
	$aboutToolStripMenuItem.Text = 'About'
	$aboutToolStripMenuItem.add_Click($aboutToolStripMenuItem_Click)
	#
	# openfiledialog1
	#
	#
	# loadAPSToolStripMenuItem
	#
	$loadAPSToolStripMenuItem.Name = 'loadAPSToolStripMenuItem'
	$loadAPSToolStripMenuItem.Size = '145, 22'
	$loadAPSToolStripMenuItem.Text = 'Load APS key'
	$loadAPSToolStripMenuItem.add_Click($loadAPSToolStripMenuItem_Click)
	#
	# versionToolStripMenuItem
	#
	$versionToolStripMenuItem.Name = 'versionToolStripMenuItem'
	$versionToolStripMenuItem.Size = '145, 22'
	$versionToolStripMenuItem.Text = 'Version'
	#
	# errorprovider1
	#
	$errorprovider1.ContainerControl = $formAPS
	#
	# columnheader1
	#
	$columnheader1.Text = 'ID'
	$columnheader1.Width = 27
	#
	# columnheader2
	#
	$columnheader2.Text = 'Login'
	$columnheader2.Width = 83
	#
	# columnheader3
	#
	$columnheader3.Text = 'Password'
	$columnheader3.Width = 62
	#
	# columnheader4
	#
	$columnheader4.Text = 'File'
	$columnheader4.Width = 46
	#
	# columnheader5
	#
	$columnheader5.Text = 'Date'
	$columnheader5.Width = 116
	#
	# columnheader6
	#
	$columnheader6.Text = 'Parent'
	#
	# columnheader7
	#
	$columnheader7.Text = 'Description'
	$columnheader7.Width = 94
	$menustrip1.ResumeLayout()
	$tabpage2.ResumeLayout()
	$tabpage1.ResumeLayout()
	$tabcontrol1.ResumeLayout()
	$formAPS.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formAPS.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formAPS.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formAPS.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $formAPS.ShowDialog()

} #End Function

#Call the form
Show-MainForm_psf | Out-Null
