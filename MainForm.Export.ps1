#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 2b855348-feeb-402b-ba34-805d19f52a6d
# Source File: MainForm.psf
#------------------------------------------------------------------------
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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#>
#endregion

<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2020 v5.7.172
     Generated on:       11/19/2020 5:20 PM
     Generated by:       hrbnkh
    --------------------------------------------------------------------------------
    .DESCRIPTION
        GUI script generated by PowerShell Studio 2020
#>


#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Show-MainForm_psf {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formAPS = New-Object 'System.Windows.Forms.Form'
	$tabcontrol1 = New-Object 'System.Windows.Forms.TabControl'
	$tabpage1 = New-Object 'System.Windows.Forms.TabPage'
	$textboxAddLogin = New-Object 'System.Windows.Forms.TextBox'
	$labelAddLogin = New-Object 'System.Windows.Forms.Label'
	$labelAddPassword = New-Object 'System.Windows.Forms.Label'
	$textboxAddPassword = New-Object 'System.Windows.Forms.TextBox'
	$buttonAdd = New-Object 'System.Windows.Forms.Button'
	$textboxRunLog = New-Object 'System.Windows.Forms.TextBox'
	$listview1 = New-Object 'System.Windows.Forms.ListView'
	$textboxChosenFile = New-Object 'System.Windows.Forms.TextBox'
	$labelChosenFile = New-Object 'System.Windows.Forms.Label'
	$labelPasswordToKey = New-Object 'System.Windows.Forms.Label'
	$textboxPasstoKey = New-Object 'System.Windows.Forms.TextBox'
	$buttonRun = New-Object 'System.Windows.Forms.Button'
	$tabpage2 = New-Object 'System.Windows.Forms.TabPage'
	$numericupdownPrmB = New-Object 'System.Windows.Forms.NumericUpDown'
	$numericupdownPrmA = New-Object 'System.Windows.Forms.NumericUpDown'
	$labelParametrB = New-Object 'System.Windows.Forms.Label'
	$labelParametrA = New-Object 'System.Windows.Forms.Label'
	$textboxConfrimPassword = New-Object 'System.Windows.Forms.TextBox'
	$labelConfrimPassword = New-Object 'System.Windows.Forms.Label'
	$textboxCreatePassword = New-Object 'System.Windows.Forms.TextBox'
	$Password = New-Object 'System.Windows.Forms.Label'
	$textboxCreateLog = New-Object 'System.Windows.Forms.TextBox'
	$textboxCreateFileName = New-Object 'System.Windows.Forms.TextBox'
	$textboxCreateLogin = New-Object 'System.Windows.Forms.TextBox'
	$comboboxCreateType = New-Object 'System.Windows.Forms.ComboBox'
	$labelFilename = New-Object 'System.Windows.Forms.Label'
	$labelYouLogin = New-Object 'System.Windows.Forms.Label'
	$Type = New-Object 'System.Windows.Forms.Label'
	$buttonCreate = New-Object 'System.Windows.Forms.Button'
	$tabpage3 = New-Object 'System.Windows.Forms.TabPage'
	$menustrip1 = New-Object 'System.Windows.Forms.MenuStrip'
	$fileToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$exitToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$editToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$copyToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$pasteToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$helpToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$aboutToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$openfiledialog1 = New-Object 'System.Windows.Forms.OpenFileDialog'
	$loadAPSToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$versionToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$columnheaderID = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheaderLogin = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheaderPublicPassword = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheaderSystemID = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheaderDate = New-Object 'System.Windows.Forms.ColumnHeader'
	$errorprovider1 = New-Object 'System.Windows.Forms.ErrorProvider'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$MainConfig = Get-Content .\config\main.config
	Write-Host "Load config"
	foreach ($line in $MainConfig)
	{
		Switch ($line)
		{
			{ ($line -like "#*") -or ($line -like $null) -or ($line -like "{*") } { }
			default {
				$Name = [regex]::split($line, '==')[0].Replace(" ", "")
				$Value = [regex]::split($line, '==')[1]
				try
				{
					Get-Variable -Name $Name -ErrorAction SilentlyContinue
				}
				catch
				{
					New-Variable -Name $Name -Value $Value
				}
				finally
				{
					Set-Variable -Name $Name -Value $Value
				}
			}
		}
	}
	
	$formAPS_Load={
		#TODO: Initialize Form Controls here
		Write-Host "Load module"
		Import-Module -PassThru "$PathToModule$ModuleName" #-Force -ErrorAction Ignore -WarningAction Ignore
		$test = "tesgkdfdagv"
		$Global:isTest = $true
	}
	
	
	$exitToolStripMenuItem_Click={
		#TODO: Place custom script here
		$formAPS.Close()
	}
	
	$aboutToolStripMenuItem_Click={
		#TODO: Place custom script here
		[System.Windows.Forms.MessageBox]::Show("APS v1.0","APS Application");
	}
	
	
	
	#region Control Helper Functions
	function Update-ListViewColumnSort
	{
	<#
		.SYNOPSIS
			Sort the ListView's item using the specified column.
		
		.DESCRIPTION
			Sort the ListView's item using the specified column.
			This function uses Add-Type to define a class that sort the items.
			The ListView's Tag property is used to keep track of the sorting.
		
		.PARAMETER ListView
			The ListView control to sort.
		
		.PARAMETER ColumnIndex
			The index of the column to use for sorting.
		
		.PARAMETER SortOrder
			The direction to sort the items. If not specified or set to None, it will toggle.
		
		.EXAMPLE
			Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListView]
			$ListView,
			[Parameter(Mandatory = $true)]
			[int]
			$ColumnIndex,
			[System.Windows.Forms.SortOrder]
			$SortOrder = 'None'
		)
		
		if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
		{
			return;
		}
		
		#region Define ListViewItemComparer
		try
		{
			[ListViewItemComparer] | Out-Null
		}
		catch
		{
			Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
		}
		#endregion
		
		if ($ListView.Tag -is [ListViewItemComparer])
		{
			#Toggle the Sort Order
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
				{
					$ListView.Tag.sortOrder = 'Descending'
				}
				else
				{
					$ListView.Tag.sortOrder = 'Ascending'
				}
			}
			else
			{
				$ListView.Tag.sortOrder = $SortOrder
			}
			
			$ListView.Tag.column = $ColumnIndex
			$ListView.Sort() #Sort the items
		}
		else
		{
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
			}
			
			#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
			$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
			$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
		}
	}
	
	
	function Add-ListViewItem
	{
	<#
		.SYNOPSIS
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.DESCRIPTION
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.PARAMETER ListView
			The ListView control to add the items to.
	
		.PARAMETER Items
			The object or objects you wish to load into the ListView's Items collection.
			
		.PARAMETER  ImageIndex
			The index of a predefined image in the ListView's ImageList.
		
		.PARAMETER  SubItems
			List of strings to add as Subitems.
		
		.PARAMETER Group
			The group to place the item(s) in.
		
		.PARAMETER Clear
			This switch clears the ListView's Items before adding the new item(s).
		
		.EXAMPLE
			Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
	#>
		
		Param( 
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.ListView]$ListView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Items,
		[int]$ImageIndex = -1,
		[string[]]$SubItems,
		$Group,
		[switch]$Clear)
		
		if($Clear)
		{
			$ListView.Items.Clear();
	    }
	    
	    $lvGroup = $null
	    if ($Group -is [System.Windows.Forms.ListViewGroup])
	    {
	        $lvGroup = $Group
	    }
	    elseif ($Group -is [string])
	    {
	        #$lvGroup = $ListView.Group[$Group] # Case sensitive
	        foreach ($groupItem in $ListView.Groups)
	        {
	            if ($groupItem.Name -eq $Group)
	            {
	                $lvGroup = $groupItem
	                break
	            }
	        }
	        
	        if ($null -eq $lvGroup)
	        {
	            $lvGroup = $ListView.Groups.Add($Group, $Group)
	        }
	    }
	    
		if($Items -is [Array])
		{
			$ListView.BeginUpdate()
			foreach ($item in $Items)
			{		
				$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
				#Store the object in the Tag
				$listitem.Tag = $item
				
				if($null -ne $SubItems)
				{
					$listitem.SubItems.AddRange($SubItems)
				}
				
				if($null -ne $lvGroup)
				{
					$listitem.Group = $lvGroup
				}
			}
			$ListView.EndUpdate()
		}
		else
		{
			#Add a new item to the ListView
			$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $Items
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
	}
	
	
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
			
		.PARAMETER ValueMember
			Indicates the property to use for the value of the control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]
			$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[Parameter(Mandatory = $false)]
			[string]$ValueMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
		$ComboBox.ValueMember = $ValueMember
	}
	#endregion
	
	$buttonCreate_Click={
		#TODO: Place custom script here
		#initials parameters
		$errorprovider1.Clear()
		$Type = $comboboxCreateType.SelectedItem;
		$ADlogin = $textboxCreateLogin.Text;
		$filename = $textboxCreateFileName.Text;
		if ($numericupdownPrmA.Value -gt 25)
		{
			$errorprovider1.SetError($numericupdownPrmA,"Input value mast be less then 25")
		}
		else
		{
			$PrmA = $numericupdownPrmA.Value
		}
		if ($numericupdownPrmB.Value -gt 25)
		{
			$errorprovider1.SetError($numericupdownPrmB, "Input value mast be less then 25")
		}
		else
		{
			$PrmB = $numericupdownPrmB.Text
		}
		if ($PrmA -eq $PrmB)
		{
			[System.Windows.Forms.MessageBox]::Show('The parametr A and B must be different', 'Information', 'OK', 'Error')
			return
		}
		
		if ($textboxConfrimPassword.Text -ne $textboxCreatePassword.Text)
		{
			[System.Windows.Forms.MessageBox]::Show('Passwords does not  match', 'Information', 'OK', 'Error')
			return
		}
		$sequrePassword = Convert-ToSequrePas -InputPass $textboxConfrimPassword.Text -PrmA $PrmA -PrmB $PrmB -IsTest $isTest
		$textboxCreateLog.Text += $sequrePassword
		
	}
	
	$textboxPasstoKey_TextChanged={
		#TODO: Place custom script here
		
	}
	
	$loadAPSToolStripMenuItem_Click={
		#TODO: Place custom script here
		$openfiledialog1.ShowDialog()
		$PathToFile = $openfiledialog1.FileName.ToString()
		$textboxChosenFile.Text = $PathToFile
		<#
		[string]$nameFile = Get-ChildItem $PathToFile | select Name
		$nameFile = $nameFile.Replace("}", "")
		$nameFile = $nameFile.Substring(7)
		$textFile.Text = $nameFile
		#>
	}
	
	$buttonRun_Click={
		#TODO: Place custom script here
		#unscript *)%(E)(
		$global:ASK = Import-Clixml -Path $textboxChosenFile.Text
		$SecurePassword = $global:ASK.Password;
		#$textboxRunLog.Text += "SC**" + $SecurePassword;
		$UnSecPassword = $null;
		$listview1.Items.Clear();
		$i = 0;
		while ($i -ne $SecurePassword.Length)
		{
			if (($SecurePassword[$i] -eq "*") -and ($SecurePassword[$i + 1] -eq ")") -and ($SecurePassword[$i + 2] -eq "%") -and ($SecurePassword[$i + 3] -eq "("))
			{
				$UnSecPassword += $SecurePassword[$i-1]
			}
			$i++
		}
		#$textboxRunLog.Text += "UNSC**" + $UnSecPassword;
		if ($UnSecPassword -ne $textboxPasstoKey.Text)
		{
			[System.Windows.Forms.MessageBox]::Show('Passwords does not  match', 'Access denied', 'OK', 'Error')
			return
		}
		if ($global:ASK.FilePath -ne $null)
		{
			#adding to table information
			$items = Get-ChildItem -Path "C:\NP\APS\$($global:ASK.Folder)\$($global:ASK.FilePath)"
			$i = 0;
			foreach ($item in $items) {
				
				$global:APS = Import-Clixml -Path $item.FullName
				$listv = $listview1.Items.Add($i);
				$listv.SubItems.Add($global:APS.Login);
				$listv.SubItems.Add($global:APS.Password);
				$listv.SubItems.Add($global:APS.ID);
				$listv.SubItems.Add($global:APS.Date.ToString());
				$i++
			}
		}
		else
		{
			#we need create to the aps path  and document where will be save passwords and logins
			[System.Windows.Forms.MessageBox]::Show('ASK does not have any password', 'Information', 'OK', 'Error')
		}
		
		
	}
	
	$buttonAdd_Click={
		#TODO: Place custom script here
		$global:ASK = Import-Clixml -Path $textboxChosenFile.Text
		$SecurePassword = $global:ASK.Password;
		$UnSecPassword = $null;
		$i = 0;
		[string]$AddFileName = -join (1 .. 24 | % { [char[]]'ABCDEFGHIJKLMNOPQRSTUWXYZ1234567890abcdfeghijklmnopqrstuvwxyz' | Get-Random })
		[string]$BefFileName = -join (1 .. 24 | % { [char[]]'ABCDEFGHIJKLMNOPQRSTUWXYZ1234567890abcdfeghijklmnopqrstuvwxyz' | Get-Random })
		while ($i -ne $SecurePassword.Length)
		{
			if (($SecurePassword[$i] -eq "*") -and ($SecurePassword[$i + 1] -eq ")") -and ($SecurePassword[$i + 2] -eq "%") -and ($SecurePassword[$i + 3] -eq "("))
			{
				$UnSecPassword += $SecurePassword[$i - 1]
			}
			$i++
		}
		if ($UnSecPassword -ne $textboxPasstoKey.Text)
		{
			[System.Windows.Forms.MessageBox]::Show('Passwords does not  match', 'Access denied', 'OK', 'Error')
			return
		}
		if ($global:ASK.FilePath -ne $null)
		{
			#adding new login and path into $global:ASK.FilePath
			$ID = (Get-ChildItem -Path "C:\NP\APS\$($global:ASK.Folder)\$($global:ASK.FilePath)").Count
			#creting secure password 
			$NewPassword = $null;
			$AddPassword = $textboxAddPassword.Text;
			$i = 0;
			while ($i -ne $AddPassword.Length)
			{
				$NewPassword += $AddPassword[$i] + "%&(=?";
				$i++	
			}
			#creating new file with passwords keys .aps
			$LoginPass = New-Object -TypeName System.Management.Automation.PSObject
			$LoginPass | Add-Member -MemberType NoteProperty -Name "Login" -Value $textboxAddLogin.Text
			$LoginPass | Add-Member -MemberType NoteProperty -Name "Password" -Value $NewPassword
			$LoginPass | Add-Member -MemberType NoteProperty -Name "Date" -Value $(Get-Date)
			$LoginPass | Add-Member -MemberType NoteProperty -Name "Folder" -Value $FolderName
			$LoginPass | Add-Member -MemberType NoteProperty -Name "Filename" -Value $global:ASK.Filename
			$LoginPass | Add-Member -MemberType NoteProperty -Name "ID" -Value ($ID + 1);
			$LoginPass | Export-Clixml -Path "C:\NP\APS\$($global:ASK.Folder)\$($global:ASK.FilePath)\$BefFileName$($ID + 1)$(Get-Date -Format "ss")$AddFileName.aps"
			$textboxRunLog.Text += "********Adding new file C:\NP\APS\$($global:ASK.Folder)\$($FolderName)\$BefFileName$($ID + 1)$(Get-Date -Format "ss")$AddFileName.aps"
		}
		else
		{
			#this is first time adding loging and password
			#creating and updating file .ask
			[string]$FolderName = -join (1 .. 24 | % { [char[]]'ABCDEFGHIJKLMNOPQRSTUWXYZ1234567890abcdfeghijklmnopqrstuvwxyz' | Get-Random })
			$global:ASK.FilePath = $FolderName;
			if (!(Test-Path "C:\NP\APS\$($global:ASK.Folder)"))
			{
				mkdir "C:\NP\APS\$($global:ASK.Folder)"
			}
			$global:ASK | Export-Clixml -Path ("C:\NP\APS\$($global:ASK.Folder)\$($global:ASK.Filename).ask")
			
			mkdir "C:\NP\APS\$($global:ASK.Folder)\$($FolderName)"
			$ID = (Get-ChildItem -Path "C:\NP\APS\$($global:ASK.Folder)\$($FolderName)").Count
			#creting secure password
			$NewPassword = $null;
			$AddPassword = $textboxAddPassword.Text;
			$i = 0;
			while ($i -ne $AddPassword.Length)
			{
				$NewPassword += $AddPassword[$i] + "%&(=?";
				$i++
			}
			#creating new file with passwords keys .aps
			$LoginPass = New-Object -TypeName System.Management.Automation.PSObject
			$LoginPass | Add-Member -MemberType NoteProperty -Name "Login" -Value $textboxAddLogin.Text
			$LoginPass | Add-Member -MemberType NoteProperty -Name "Password" -Value $NewPassword
			$LoginPass | Add-Member -MemberType NoteProperty -Name "Date" -Value $(Get-Date)
			$LoginPass | Add-Member -MemberType NoteProperty -Name "Folder" -Value $FolderName
			$LoginPass | Add-Member -MemberType NoteProperty -Name "Filen" -Value $global:ASK.Filename
			$LoginPass | Add-Member -MemberType NoteProperty -Name "ID" -Value ($ID + 1);
			$LoginPass | Export-Clixml -Path "C:\NP\APS\$($global:ASK.Folder)\$($FolderName)\$BefFileName$($ID + 1)$(Get-Date -Format "ss")$AddFileName.aps"
			
			$textboxRunLog.Text += "********Adding new file C:\NP\APS\$($global:ASK.Folder)\$($FolderName)\$BefFileName$($ID + 1)$(Get-Date -Format "ss")$AddFileName.aps"
		}
	}
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formAPS.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonAdd.remove_Click($buttonAdd_Click)
			$textboxPasstoKey.remove_TextChanged($textboxPasstoKey_TextChanged)
			$buttonRun.remove_Click($buttonRun_Click)
			$buttonCreate.remove_Click($buttonCreate_Click)
			$formAPS.remove_Load($formAPS_Load)
			$exitToolStripMenuItem.remove_Click($exitToolStripMenuItem_Click)
			$aboutToolStripMenuItem.remove_Click($aboutToolStripMenuItem_Click)
			$loadAPSToolStripMenuItem.remove_Click($loadAPSToolStripMenuItem_Click)
			$formAPS.remove_Load($Form_StateCorrection_Load)
			$formAPS.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formAPS.SuspendLayout()
	$tabcontrol1.SuspendLayout()
	$tabpage1.SuspendLayout()
	$tabpage2.SuspendLayout()
	$menustrip1.SuspendLayout()
	$numericupdownPrmA.BeginInit()
	$numericupdownPrmB.BeginInit()
	#
	# formAPS
	#
	$formAPS.Controls.Add($tabcontrol1)
	$formAPS.Controls.Add($menustrip1)
	$formAPS.AutoScaleDimensions = '6, 13'
	$formAPS.AutoScaleMode = 'Font'
	$formAPS.ClientSize = '493, 467'
	$formAPS.MainMenuStrip = $menustrip1
	$formAPS.Name = 'formAPS'
	$formAPS.StartPosition = 'CenterScreen'
	$formAPS.Text = 'APS'
	$formAPS.add_Load($formAPS_Load)
	#
	# tabcontrol1
	#
	$tabcontrol1.Controls.Add($tabpage1)
	$tabcontrol1.Controls.Add($tabpage2)
	$tabcontrol1.Controls.Add($tabpage3)
	$tabcontrol1.Location = '0, 27'
	$tabcontrol1.Name = 'tabcontrol1'
	$tabcontrol1.SelectedIndex = 0
	$tabcontrol1.Size = '493, 440'
	$tabcontrol1.TabIndex = 3
	#
	# tabpage1
	#
	$tabpage1.Controls.Add($textboxAddLogin)
	$tabpage1.Controls.Add($labelAddLogin)
	$tabpage1.Controls.Add($labelAddPassword)
	$tabpage1.Controls.Add($textboxAddPassword)
	$tabpage1.Controls.Add($buttonAdd)
	$tabpage1.Controls.Add($textboxRunLog)
	$tabpage1.Controls.Add($listview1)
	$tabpage1.Controls.Add($textboxChosenFile)
	$tabpage1.Controls.Add($labelChosenFile)
	$tabpage1.Controls.Add($labelPasswordToKey)
	$tabpage1.Controls.Add($textboxPasstoKey)
	$tabpage1.Controls.Add($buttonRun)
	$tabpage1.Location = '4, 22'
	$tabpage1.Name = 'tabpage1'
	$tabpage1.Padding = '3, 3, 3, 3'
	$tabpage1.Size = '485, 414'
	$tabpage1.TabIndex = 0
	$tabpage1.Text = 'View'
	$tabpage1.UseVisualStyleBackColor = $True
	#
	# textboxAddLogin
	#
	$textboxAddLogin.Location = '23, 326'
	$textboxAddLogin.Name = 'textboxAddLogin'
	$textboxAddLogin.Size = '150, 20'
	$textboxAddLogin.TabIndex = 13
	#
	# labelAddLogin
	#
	$labelAddLogin.AutoSize = $True
	$labelAddLogin.Location = '23, 307'
	$labelAddLogin.Name = 'labelAddLogin'
	$labelAddLogin.Size = '55, 17'
	$labelAddLogin.TabIndex = 12
	$labelAddLogin.Text = 'Add Login'
	$labelAddLogin.UseCompatibleTextRendering = $True
	#
	# labelAddPassword
	#
	$labelAddPassword.AutoSize = $True
	$labelAddPassword.Location = '202, 307'
	$labelAddPassword.Name = 'labelAddPassword'
	$labelAddPassword.Size = '77, 17'
	$labelAddPassword.TabIndex = 11
	$labelAddPassword.Text = 'Add Password'
	$labelAddPassword.UseCompatibleTextRendering = $True
	#
	# textboxAddPassword
	#
	$textboxAddPassword.Location = '202, 327'
	$textboxAddPassword.Name = 'textboxAddPassword'
	$textboxAddPassword.Size = '100, 20'
	$textboxAddPassword.TabIndex = 10
	#
	# buttonAdd
	#
	$buttonAdd.Location = '386, 313'
	$buttonAdd.Name = 'buttonAdd'
	$buttonAdd.Size = '96, 34'
	$buttonAdd.TabIndex = 9
	$buttonAdd.Text = 'Add'
	$buttonAdd.UseCompatibleTextRendering = $True
	$buttonAdd.UseVisualStyleBackColor = $True
	$buttonAdd.add_Click($buttonAdd_Click)
	#
	# textboxRunLog
	#
	$textboxRunLog.Location = '23, 366'
	$textboxRunLog.Multiline = $True
	$textboxRunLog.Name = 'textboxRunLog'
	$textboxRunLog.Size = '424, 40'
	$textboxRunLog.TabIndex = 8
	#
	# listview1
	#
	[void]$listview1.Columns.Add($columnheaderID)
	[void]$listview1.Columns.Add($columnheaderLogin)
	[void]$listview1.Columns.Add($columnheaderPublicPassword)
	[void]$listview1.Columns.Add($columnheaderSystemID)
	[void]$listview1.Columns.Add($columnheaderDate)
	$listview1.FullRowSelect = $True
	$listview1.Location = '0, 49'
	$listview1.Name = 'listview1'
	$listview1.Size = '485, 251'
	$listview1.TabIndex = 7
	$listview1.UseCompatibleStateImageBehavior = $False
	$listview1.View = 'Details'
	#
	# textboxChosenFile
	#
	$textboxChosenFile.Location = '3, 23'
	$textboxChosenFile.Name = 'textboxChosenFile'
	$textboxChosenFile.ReadOnly = $True
	$textboxChosenFile.Size = '243, 20'
	$textboxChosenFile.TabIndex = 6
	#
	# labelChosenFile
	#
	$labelChosenFile.AutoSize = $True
	$labelChosenFile.Location = '6, 3'
	$labelChosenFile.Name = 'labelChosenFile'
	$labelChosenFile.Size = '61, 17'
	$labelChosenFile.TabIndex = 5
	$labelChosenFile.Text = 'Chosen file'
	$labelChosenFile.UseCompatibleTextRendering = $True
	#
	# labelPasswordToKey
	#
	$labelPasswordToKey.AutoSize = $True
	$labelPasswordToKey.Location = '252, 3'
	$labelPasswordToKey.Name = 'labelPasswordToKey'
	$labelPasswordToKey.Size = '87, 17'
	$labelPasswordToKey.TabIndex = 4
	$labelPasswordToKey.Text = 'Password to key'
	$labelPasswordToKey.UseCompatibleTextRendering = $True
	#
	# textboxPasstoKey
	#
	$textboxPasstoKey.Location = '252, 23'
	$textboxPasstoKey.Name = 'textboxPasstoKey'
	$textboxPasstoKey.Size = '87, 20'
	$textboxPasstoKey.TabIndex = 3
	$textboxPasstoKey.UseSystemPasswordChar = $True
	$textboxPasstoKey.add_TextChanged($textboxPasstoKey_TextChanged)
	#
	# buttonRun
	#
	$buttonRun.Location = '381, 12'
	$buttonRun.Name = 'buttonRun'
	$buttonRun.Size = '101, 31'
	$buttonRun.TabIndex = 1
	$buttonRun.Text = 'Run'
	$buttonRun.UseCompatibleTextRendering = $True
	$buttonRun.UseVisualStyleBackColor = $True
	$buttonRun.add_Click($buttonRun_Click)
	#
	# tabpage2
	#
	$tabpage2.Controls.Add($numericupdownPrmB)
	$tabpage2.Controls.Add($numericupdownPrmA)
	$tabpage2.Controls.Add($labelParametrB)
	$tabpage2.Controls.Add($labelParametrA)
	$tabpage2.Controls.Add($textboxConfrimPassword)
	$tabpage2.Controls.Add($labelConfrimPassword)
	$tabpage2.Controls.Add($textboxCreatePassword)
	$tabpage2.Controls.Add($Password)
	$tabpage2.Controls.Add($textboxCreateLog)
	$tabpage2.Controls.Add($textboxCreateFileName)
	$tabpage2.Controls.Add($textboxCreateLogin)
	$tabpage2.Controls.Add($comboboxCreateType)
	$tabpage2.Controls.Add($labelFilename)
	$tabpage2.Controls.Add($labelYouLogin)
	$tabpage2.Controls.Add($Type)
	$tabpage2.Controls.Add($buttonCreate)
	$tabpage2.Location = '4, 22'
	$tabpage2.Name = 'tabpage2'
	$tabpage2.Padding = '3, 3, 3, 3'
	$tabpage2.Size = '485, 414'
	$tabpage2.TabIndex = 1
	$tabpage2.Text = 'Creating'
	$tabpage2.UseVisualStyleBackColor = $True
	#
	# numericupdownPrmB
	#
	$numericupdownPrmB.Location = '340, 53'
	$numericupdownPrmB.Name = 'numericupdownPrmB'
	$numericupdownPrmB.Size = '44, 20'
	$numericupdownPrmB.TabIndex = 17
	#
	# numericupdownPrmA
	#
	$numericupdownPrmA.Location = '340, 21'
	$numericupdownPrmA.Name = 'numericupdownPrmA'
	$numericupdownPrmA.Size = '44, 20'
	$numericupdownPrmA.TabIndex = 16
	#
	# labelParametrB
	#
	$labelParametrB.AutoSize = $True
	$labelParametrB.Location = '268, 56'
	$labelParametrB.Name = 'labelParametrB'
	$labelParametrB.Size = '61, 17'
	$labelParametrB.TabIndex = 15
	$labelParametrB.Text = 'Parametr B'
	$labelParametrB.UseCompatibleTextRendering = $True
	#
	# labelParametrA
	#
	$labelParametrA.AutoSize = $True
	$labelParametrA.Location = '268, 24'
	$labelParametrA.Name = 'labelParametrA'
	$labelParametrA.Size = '61, 17'
	$labelParametrA.TabIndex = 14
	$labelParametrA.Text = 'Parametr A'
	$labelParametrA.UseCompatibleTextRendering = $True
	#
	# textboxConfrimPassword
	#
	$textboxConfrimPassword.Location = '127, 161'
	$textboxConfrimPassword.Name = 'textboxConfrimPassword'
	$textboxConfrimPassword.Size = '121, 20'
	$textboxConfrimPassword.TabIndex = 11
	$textboxConfrimPassword.UseSystemPasswordChar = $True
	#
	# labelConfrimPassword
	#
	$labelConfrimPassword.AutoSize = $True
	$labelConfrimPassword.Location = '19, 164'
	$labelConfrimPassword.Name = 'labelConfrimPassword'
	$labelConfrimPassword.Size = '95, 17'
	$labelConfrimPassword.TabIndex = 10
	$labelConfrimPassword.Text = 'Confrim password'
	$labelConfrimPassword.UseCompatibleTextRendering = $True
	#
	# textboxCreatePassword
	#
	$textboxCreatePassword.Location = '127, 135'
	$textboxCreatePassword.Name = 'textboxCreatePassword'
	$textboxCreatePassword.Size = '121, 20'
	$textboxCreatePassword.TabIndex = 9
	$textboxCreatePassword.UseSystemPasswordChar = $True
	#
	# Password
	#
	$Password.AutoSize = $True
	$Password.Location = '19, 138'
	$Password.Name = 'Password'
	$Password.Size = '54, 17'
	$Password.TabIndex = 8
	$Password.Text = 'Password'
	$Password.UseCompatibleTextRendering = $True
	#
	# textboxCreateLog
	#
	$textboxCreateLog.Location = '19, 195'
	$textboxCreateLog.Multiline = $True
	$textboxCreateLog.Name = 'textboxCreateLog'
	$textboxCreateLog.Size = '420, 171'
	$textboxCreateLog.TabIndex = 7
	#
	# textboxCreateFileName
	#
	$textboxCreateFileName.Location = '127, 101'
	$textboxCreateFileName.Name = 'textboxCreateFileName'
	$textboxCreateFileName.Size = '121, 20'
	$textboxCreateFileName.TabIndex = 6
	#
	# textboxCreateLogin
	#
	$textboxCreateLogin.Location = '127, 60'
	$textboxCreateLogin.Name = 'textboxCreateLogin'
	$textboxCreateLogin.Size = '121, 20'
	$textboxCreateLogin.TabIndex = 5
	#
	# comboboxCreateType
	#
	$comboboxCreateType.FormattingEnabled = $True
	[void]$comboboxCreateType.Items.Add('On group')
	[void]$comboboxCreateType.Items.Add('Just for you')
	$comboboxCreateType.Location = '127, 27'
	$comboboxCreateType.Name = 'comboboxCreateType'
	$comboboxCreateType.Size = '121, 21'
	$comboboxCreateType.TabIndex = 4
	#
	# labelFilename
	#
	$labelFilename.AutoSize = $True
	$labelFilename.Location = '19, 104'
	$labelFilename.Name = 'labelFilename'
	$labelFilename.Size = '51, 17'
	$labelFilename.TabIndex = 3
	$labelFilename.Text = 'Filename'
	$labelFilename.UseCompatibleTextRendering = $True
	#
	# labelYouLogin
	#
	$labelYouLogin.AutoSize = $True
	$labelYouLogin.Location = '19, 60'
	$labelYouLogin.Name = 'labelYouLogin'
	$labelYouLogin.Size = '51, 17'
	$labelYouLogin.TabIndex = 2
	$labelYouLogin.Text = 'You login'
	$labelYouLogin.UseCompatibleTextRendering = $True
	#
	# Type
	#
	$Type.AutoSize = $True
	$Type.Location = '19, 27'
	$Type.Name = 'Type'
	$Type.Size = '29, 17'
	$Type.TabIndex = 1
	$Type.Text = 'Type'
	$Type.UseCompatibleTextRendering = $True
	#
	# buttonCreate
	#
	$buttonCreate.Location = '365, 372'
	$buttonCreate.Name = 'buttonCreate'
	$buttonCreate.Size = '75, 23'
	$buttonCreate.TabIndex = 0
	$buttonCreate.Text = 'Create'
	$buttonCreate.UseCompatibleTextRendering = $True
	$buttonCreate.UseVisualStyleBackColor = $True
	$buttonCreate.add_Click($buttonCreate_Click)
	#
	# tabpage3
	#
	$tabpage3.Location = '4, 22'
	$tabpage3.Name = 'tabpage3'
	$tabpage3.Padding = '3, 3, 3, 3'
	$tabpage3.Size = '485, 414'
	$tabpage3.TabIndex = 2
	$tabpage3.Text = 'tabpage3'
	$tabpage3.UseVisualStyleBackColor = $True
	#
	# menustrip1
	#
	[void]$menustrip1.Items.Add($fileToolStripMenuItem)
	[void]$menustrip1.Items.Add($editToolStripMenuItem)
	[void]$menustrip1.Items.Add($helpToolStripMenuItem)
	$menustrip1.Location = '0, 0'
	$menustrip1.Name = 'menustrip1'
	$menustrip1.Size = '493, 24'
	$menustrip1.TabIndex = 0
	$menustrip1.Text = 'menustrip1'
	#
	# fileToolStripMenuItem
	#
	[void]$fileToolStripMenuItem.DropDownItems.Add($loadAPSToolStripMenuItem)
	[void]$fileToolStripMenuItem.DropDownItems.Add($exitToolStripMenuItem)
	[void]$fileToolStripMenuItem.DropDownItems.Add($versionToolStripMenuItem)
	$fileToolStripMenuItem.Name = 'fileToolStripMenuItem'
	$fileToolStripMenuItem.Size = '37, 20'
	$fileToolStripMenuItem.Text = 'File'
	#
	# exitToolStripMenuItem
	#
	$exitToolStripMenuItem.Name = 'exitToolStripMenuItem'
	$exitToolStripMenuItem.Size = '145, 22'
	$exitToolStripMenuItem.Text = 'Exit'
	$exitToolStripMenuItem.add_Click($exitToolStripMenuItem_Click)
	#
	# editToolStripMenuItem
	#
	[void]$editToolStripMenuItem.DropDownItems.Add($copyToolStripMenuItem)
	[void]$editToolStripMenuItem.DropDownItems.Add($pasteToolStripMenuItem)
	$editToolStripMenuItem.Name = 'editToolStripMenuItem'
	$editToolStripMenuItem.Size = '39, 20'
	$editToolStripMenuItem.Text = 'Edit'
	#
	# copyToolStripMenuItem
	#
	$copyToolStripMenuItem.Name = 'copyToolStripMenuItem'
	$copyToolStripMenuItem.ShortcutKeys = [System.Windows.Forms.Keys]::C -bor [System.Windows.Forms.Keys]::Control 
	$copyToolStripMenuItem.Size = '144, 22'
	$copyToolStripMenuItem.Text = 'Copy'
	#
	# pasteToolStripMenuItem
	#
	$pasteToolStripMenuItem.Name = 'pasteToolStripMenuItem'
	$pasteToolStripMenuItem.ShortcutKeys = [System.Windows.Forms.Keys]::V -bor [System.Windows.Forms.Keys]::Control 
	$pasteToolStripMenuItem.Size = '144, 22'
	$pasteToolStripMenuItem.Text = 'Paste'
	#
	# helpToolStripMenuItem
	#
	[void]$helpToolStripMenuItem.DropDownItems.Add($aboutToolStripMenuItem)
	$helpToolStripMenuItem.Name = 'helpToolStripMenuItem'
	$helpToolStripMenuItem.Size = '44, 20'
	$helpToolStripMenuItem.Text = 'Help'
	#
	# aboutToolStripMenuItem
	#
	$aboutToolStripMenuItem.Name = 'aboutToolStripMenuItem'
	$aboutToolStripMenuItem.Size = '107, 22'
	$aboutToolStripMenuItem.Text = 'About'
	$aboutToolStripMenuItem.add_Click($aboutToolStripMenuItem_Click)
	#
	# openfiledialog1
	#
	#
	# loadAPSToolStripMenuItem
	#
	$loadAPSToolStripMenuItem.Name = 'loadAPSToolStripMenuItem'
	$loadAPSToolStripMenuItem.Size = '145, 22'
	$loadAPSToolStripMenuItem.Text = 'Load APS key'
	$loadAPSToolStripMenuItem.add_Click($loadAPSToolStripMenuItem_Click)
	#
	# versionToolStripMenuItem
	#
	$versionToolStripMenuItem.Name = 'versionToolStripMenuItem'
	$versionToolStripMenuItem.Size = '145, 22'
	$versionToolStripMenuItem.Text = 'Version'
	#
	# columnheaderID
	#
	$columnheaderID.Text = 'ID'
	$columnheaderID.Width = 40
	#
	# columnheaderLogin
	#
	$columnheaderLogin.Text = 'Login'
	$columnheaderLogin.Width = 76
	#
	# columnheaderPublicPassword
	#
	$columnheaderPublicPassword.Text = 'PublicPassword'
	$columnheaderPublicPassword.Width = 203
	#
	# columnheaderSystemID
	#
	$columnheaderSystemID.Text = 'SystemID'
	#
	# columnheaderDate
	#
	$columnheaderDate.Text = 'Date'
	$columnheaderDate.Width = 98
	#
	# errorprovider1
	#
	$errorprovider1.ContainerControl = $formAPS
	$numericupdownPrmB.EndInit()
	$numericupdownPrmA.EndInit()
	$menustrip1.ResumeLayout()
	$tabpage2.ResumeLayout()
	$tabpage1.ResumeLayout()
	$tabcontrol1.ResumeLayout()
	$formAPS.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formAPS.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formAPS.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formAPS.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $formAPS.ShowDialog()

} #End Function

#Call the form
Show-MainForm_psf | Out-Null
