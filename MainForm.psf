<File version="3.1">
  <FileID>2b855348-feeb-402b-ba34-805d19f52a6d</FileID>
  <LastExport>132502728556214255</LastExport>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAFHPSURBVHhe7d1ndFRnni76nnDOfJi1zoez7rrn
wz1pzsycmenumQ4z3Q7d7baNCQZsjMGYaJMNmBxERiInISEBImeERBRBKKKcc845VylLVaUsPfd9
twqjwtu2EKIKaT+/Xs9CtatqV+1SW/9n70o/IyIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiInouRKTo
P//n/1T09lu/L1qyZEnR0qXfMAzDMAwzQrJs2bKiyZMnFv2nv/7ror/8y78sEnM9X5nwP+av/uqv
qv/u7/4O8+bOw8nT5xGTkov8sjrkldYyDMMwDPPGpw45RdV45BOAb1d8i1/+4hf4m7/5G5jH/A/7
i7/4y6K5c+fiSUAYEvJqEJpSjJDkIoZhGIZhRlBic6oRl5qDDRs24m//9m97zGP+h/3+978rcnY9
jYR8nVhBIUIZhmEYhhlxCU4qEDvyOnj7h2D82LE/XQAWL15SFJOci/C0UoSlFDEMwzAMM0ITlFSI
oqpm7HbY/dMF4JtvlhWV1jQjLK0EYanFDMMwDMOM0AQnF6G8rg329g6DKQDfFJVUNSJcFIBwcWWG
YRiGed2JkBFz53Xnu9tTOW+48/y2rHt7AyNfC1CqN2LXLvvBF4DIjDJEppcyDMMwzGtPlJg5EeLf
8FQxyOQwG86IdcoBKW/ju9vMKDUPzRcu+6oxr+/ZNn23bWlW3LYBCRPnl9WasGvncBWAjPLBJ51F
gmEYhvnhyOEVGJuDK3dC4HbVF6ev+Q1r3K764eyNADwKTukflGJg3vWL7z/vhcu+auRtyW1wfxCB
kMQCRGeVwz8qG5duBynnqV3nVSLXef5mILxD01Qf25cuAKXVTYjKLFceKLVEJuchIin7eVIKRROp
+S4RIpHpOkSKG45KKxbX+eF1MQzDMNpOTFYFzns8hXdQEmLSxcxILRrWRIs5FJ6Yi7PX/REshvKj
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
ekBJ8FHMmTJB3OZsbHHcj4whfJgcC4DtsQAQ0XAZvQXgTdAaj4XL1mFfyBCOt7+BWABsjwWAiIYL
C8Dr1FWP6NhEpOtG7gcHDcQCYHssAEQ0XFgAaNBkAahvaDCfIluIjuF3ARDR8GABoEGT3waYkZmN
6ho9Y5Po4B8YwgJARMOCBYAGraSkXNkDjYtPZmyQ2PgkJCSloqNjBH8UNRG9MVgAiIiINIgFgIiI
SINYAIiIiDSIBYCIiEiDWACIiIg0iAWAiIhIg1gAiIiINIgFgIiISINYAIiIiDSIBYCIiEiDRl0B
MJna0NjYJNLMMAzDDCHNzS3o7u4x/1Wl0WpUFYC+vj4EBUcgNDwGUTEJDMMwzBDi7ROI4pJy819W
Gq1GVQHo7e1FWHgsunvYXImIhiorOw+5eYXmUzRajboCEB4Ri45OflsaEdFQZWblIi+/yHyKRisW
ACIissACoA0sAEREZIEFQBtYAIiIyAILgDawABARkQUWAG1gASAiIgssANrAAkBERBZYALSBBYCI
iCywAGgDCwAREVlgAdAGFgAiIrLAAqANLABERGSBBUAbWACIiMgCC4A2sAAQEZEFFgBtYAEgIiIL
LADawAJAREQWWAC0gQWAiIgssABoAwsAERFZYAHQBhYAIiKywAKgDSwARERkgQVAG1gAiIjIAguA
NrAAEBGRBRYAbWABICIiCywA2sACQEREFlgAtIEFgIiILLAAaAMLABERWWAB0AYWACIissACoA0s
AEREZIEFQBtYAIiIyAILgDawABARkQUWAG1gASAiIgssANrAAkBERBZYALSBBYCIiCywAGgDCwAR
EVlgAdAGFgAiIrLAAqANLABERGSBBUAbWACIiMgCC4A2sAAQEZEFFgBtYAEgIiILLADawAJAREQW
WAC0gQWAiIgssABoAwsAERFZYAHQBhYAIiKywAKgDSwARERkgQVAG1gAiIjIAguANrAAEBGRBRYA
bWABICIiCywA2sACQEREFlgAtIEFgIiILLAAaAMLABERWWAB0AYWACIissACoA0sAEREZIEFQBtY
AIiIyAILgDawABARkQUWAG1gASAiIgssANrAAkBERBZYALSBBYCIiCywAGgDCwAREVlgAdAGFgAi
IrLAAqANLABERGSBBUAbWACIiMgCC4A2sAAQEZEFFgBtYAEgIiILLADawAJAREQWWAC0gQWAiIgs
sABoAwsAERFZYAHQBhYAIiKywAKgDSwARERkgQVAG1gAiIjIAguANrAAEBGRBRYAbWABICIiCywA
2sACQEREFlgAtIEFgIiILLAAaAMLABERWWAB0AYWACIissACoA0sAEREZIEFQBtYAIiIyAILgDaw
ABARkQUWAG1gASAiIgssANrAAkBERBZYALSBBYCIiCywAGgDCwAREVlgAdAGFgAiIrLAAqANLABE
RGSBBUAbWACIiMgCC4A2sAAQEZEFFgBtYAEgIiILLADawAJAREQWWAC0gQWAiIgssABoAwsAERFZ
YAHQBhYAIiKywAKgDSwARERkgQVAG1gAiIjIAguANrAAEBGRBRYAbWABICIiCywA2sACQEREFlgA
tIEFgIiILLAAaAMLABERWWAB0AYWACIissACoA0sAEREZIEFQBtYAIiIyAILgDawABARkQUWAG1g
ASAiIgssANrAAkBERBZYALSBBYCIiCywAGgDCwAREVlgAdAGFgAiIrLAAqANLABERGSBBUAbWACI
iMgCC4A2sAAQEZEFFgBtYAEgIiILLADawAJAREQWWAC0gQWAiIgssABoAwsAERFZYAHQBhYAIiKy
wAKgDSwARERkgQVAG1gAiIjIAguANrAAEBGRBRYAbWABICIiCywA2sACQEREFlgAtIEFgIiILLAA
aAMLABERWWAB0AYWACIissACoA0sAEREZIEFQBtYAIiIyAILgDawABARkQUWAG1gASAiIgssANrA
AkBERBZYALSBBYCIiCywAGgDCwAREVlgAdAGFgAiIrLAAqANLABERGSBBUAbWACIiMgCC4A2sAAQ
EZEFFgBtGJUFoKu727yEiIheVlZ2HguABoy6AhAcEomm5ha0tbUzDMMwQ0hSchpy8wrNf1lptBpV
BUCKiU1ESGgUwiNjGYZhmCEk4Gkoqqt15r+qNFqNugLwTF8fwzAMM5SQNozaAkBEREQ/jAWAiIhI
g1gAiIiINIgFgIiISINYAIiIBskrsxVbH+mwyad21MbOtxZbH+uQXNVu3moarVgAiIgGabZHFX62
IBU/W5M5erNaZGEqzsXzb/JoxwJARDRIC+/W4GfrM+GTVIKEnFJEZY6upOeXwfVpEX62IhNXk5rN
W02jFQsAEdEgLZAFYEMmcopK0awrg75qaGlsbEZ3uxE9Iu1NetRVlape7qdTjlrV5UNLR3057sYW
42fLWQC0gAWAiGiQnhWAlLxS1FSWoazsZVMOXW094u/uxrJFi7Bo4SIcuOKDwupGVFeUqlz+h1Mq
1lVZXQNdTSXKStUv87Jp0pXjZhQLgFawABARDdKrFoBqfQMS7uzClIXTsGPvMRx3PYqty6fhyI1A
FFU1oE6vEwO9GhXlZaiorIZer4deV4NKcbq8oqr/tLJMh9rqQgQ/8MDpa+GorK95fnl9DaoqylVv
/6fCAqAtLABERIP0SgWgQoe6wmBsWvYtDt6JR0tbG4zGFpRlRCE+KQ15BdmIjQlDUEgscsuqUZkd
Bz8/X/iHxKOgtBIlOYnitJ+yLDAmG9WVmbi4aymmLzqJ1Opa6AqS8VSc5/c0SvxNrUB11cuXABYA
bWEBICIapFcpABW6RpQGOuPTtTvxMKkS9TUVyqH7iuo6tOhK8ODkKvyfn/8Bn644gIC4RJx12oAv
Zs7F9BmL4fooEnHebpg6dQZmzpqDCbOW4KrfXdhP+wX+/ldzcPVpDK5fsMeML+bgy6lzseuaL/Ir
a1BVrn5ffigsANrCAkBENEivVgCaUOzriOl2u/AouQp11aIAiOXlFdVoqM7HTYfleHv+JVT1tCH6
zFz8f+9OwZqNW7Hyi3fwT185ICa3AhHXN2P9xs2Y+9H/xsbzt3H74klscwxFlo8d/vEPE7BkzRas
nzcGP5/6De4kVKJBV/m9+/FjYQHQFhYAIqJBepUCUF5VC336HXy1xA6Xn+aiqbleeS6/qrIStWXZ
cD+2Dh9uvwWdoRn3dvw7/jR1AfYfOorDR4/huKcf7lyyx7RVK+Di4orV0/8N2y7egseZ49juFIng
C5/iw0mfY9cBRxw5ehRHrjxEcl4Zqitf7mkAFgBtYQEgIhqkV3sRYDl0eh18XZZi0prNeBAQhZi4
MFzZvwRu1+/g/OENeHfddVS1NiDVYxfGT9mOB2kFSPY+h3XOp+FoPw9fHXyEoqJMnF7xH9jsdgMe
boewaOVFxDw5himfrMOVyCxkP72OtcdOwielBHrzUYbBhgVAW1gAiIgG6dUKgEhFtbheIW47zsRH
73+IMWM+xBL7U0gvKIP/jWNY7vIE5XV66MtL4OW0Eu99+CE++GQZzoakoyD5PjaK0x9++AHe++Mf
cOhBLJL9zmL2e9Nw7E48Qjx3Y6xY54dj5+Lg3SiU6frfTaB6P34gLADawgJARDRIr1wARMorKlFd
XYOa6mrxb38qKspRWVUNXbX5Pf3lFaiuMV9G/FtdWYGKyirUyJ/FMp2+9rtlOjHoKysqUCWW19T0
X76mqhLlKrf9U2EB0BYWACKiQRqOAqCkvBzl3+XZ8oE/Pzvdn2fLnl9HZOCyFy4/lOEvwwKgLSwA
RESD9KwA5BeXwlhbjoaa0ZWexgp4xbEAaAULABHRID37MqCrEcXwTiyBV/zoSkBKKXZ7F/LLgDSC
BYCIaJDmeMqvA05TBuTPVmSMznwrtm1RGs7z64BHPRYAIqJBCis2wS2iAadimkZ15Dbm1XWat5pG
KxYAIiIiDWIBICIi0iAWACIiIg1iASAiItIgFgAiIiINYgEgIiLSIBYAIiIiDWIBICIi0iAWACIi
Ig1iASAiItIgFgAiIiINYgEgIiLSIBYAIiIiDWIBICIi0iAWACIiIg1iASAiItIgFgAiIiINYgEg
IiLSIBYAIiIiDWIBICIi0iAWACIiIg1iASAiItIgFgAiIiINYgEgIiLSIBYAIiIiDWIBICIi0iAW
ACIiIg1iASAiItIgFgAiIiINYgEgIiLSIBYAIiIiDWIBICIi0iAWACIiIg1iASAiItIgFgAiIiIN
YgEgIiLSIBYAIiIiDWIBICIi0iAWACIiIg1iASAiItIgFgAiIiINYgEgIiLSIBYAIiIiDWIBICIi
0iAWACIiIg1iASAiItKgN6YAyJUTERGRddTX178ZBaBWr4PJZGIYhmEYxgqRw9+mBSC70oDCijqU
l5WirKyMYRiGYRgrpLS0VHkaoKWlRXXoD8xrKQByZRW1rTAaWpU7wTAMwzDM64/c85f/qg38F/Pa
CkC5XtwRsXK1G2UYhmEYxrZ5fUcARAEwtvbfAMMwDMMwb1bkjNY1DPdrAMTKimtaoBPNQrYLhmEY
hmHerMgZXSZ21uXMHrYC8GwlslUwDMMwDPNmZuDwfza7X7kAMAzDMAwzssICwDAMwzAazJAKQI4o
APKKDMMwDMOMzGSJDLoALF26tLS1Dag3QbkSwzAMwzAjM7UiXQB27nKAecz/sGnTpufv3Gnfs2PH
rh7ZGBiGYRiGGbnZtWt3z6zZszvNY56IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi07mc/+/8BwZUn
HFkKtAoAAAAASUVORK5CYII=</Preview>
  <Form>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</Form>
  <Code><![CDATA[$MainConfig = Get-Content .\config\main.config
Write-Host "Load config"
foreach ($line in $MainConfig)
{
	Switch ($line)
	{
		{ ($line -like "#*") -or ($line -like $null) -or ($line -like "{*") } { }
		default {
			$Name = [regex]::split($line, '==')[0].Replace(" ", "")
			$Value = [regex]::split($line, '==')[1]
			try
			{
				Get-Variable -Name $Name -ErrorAction SilentlyContinue
			}
			catch
			{
				New-Variable -Name $Name -Value $Value
			}
			finally
			{
				Set-Variable -Name $Name -Value $Value
			}
		}
	}
}

$formAPS_Load={
	#TODO: Initialize Form Controls here
	Write-Host "Load module"
	Import-Module -PassThru "$PathToModule$ModuleName" #-Force -ErrorAction Ignore -WarningAction Ignore
	$test = "tesgkdfdagv"
	$Global:isTest = $true
	$Global:OFS = "`r`n"
}


$exitToolStripMenuItem_Click={
	#TODO: Place custom script here
	$formAPS.Close()
}

$aboutToolStripMenuItem_Click={
	#TODO: Place custom script here
	[System.Windows.Forms.MessageBox]::Show("APS v1.0","APS Application");
}



#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}


function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}


function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
	$ComboBox.ValueMember = $ValueMember
}
#endregion

$buttonCreate_Click={
	#TODO: Place custom script here
	#initials parameters
	try
	{
		$Global:OFS = "`r`n"
		$textboxCreateLog.Clear();
		$errorprovider1.Clear();
		$Type = $comboboxCreateType.SelectedItem;
		$ADlogin = $textboxCreateLogin.Text;
		$filename = $textboxCreateFileName.Text;
		
		if ($textboxConfrimPassword.Text -ne $textboxCreatePassword.Text)
		{
			[System.Windows.Forms.MessageBox]::Show('Passwords does not  match', 'Information', 'OK', 'Error')
			return
		}
		$textboxCreateLog.Text += "*LOG*---------Password OK" +$OFS
		$ChildNameFolder = -join (1 .. 24 | % { [char[]]'ABCDEFGHIJKLMNOPQRSTUWXYZ1234567890abcdfeghijklmnopqrstuvwxyz' | Get-Random })
		mkdir "$PathToFile$ChildNameFolder"
		Compress-APK -InputPath "$PathToFile$ChildNameFolder" -RootFolder $ChildNameFolder -IsTest -$IsTest -filename $filename -textboxCreateLog $textboxCreateLog
		if (Test-Path "$PathToFile$ChildNameFolder")
		{
			
			Remove-Item "$PathToFile$ChildNameFolder"
			$textboxCreateLog.Text += "*LOG*---------Folder deleted OK" + $OFS
		}
		else
		{
			$textboxCreateLog.Text += "*LOG*---------path $PathToFile$ChildNameFolder not exist" + $OFS
		}
		
		$textboxCreateLog.Text += "*LOG*---------Compressed OK" + $OFS
		$File = New-Object -TypeName psobject
		$AESKey = New-AESKey -IsTest $true
		$textboxCreateLog.Text += "*LOG*---------AES Key generated OK" + $OFS
		$MainPassword = Convert-ToSequrePas -InputPass $textboxCreatePassword.Text -IsTest $IsTest -AESKey $AESKey
		$textboxCreateLog.Text += "*LOG*---------Security password OK" + $OFS
		$File | Add-Member -MemberType NoteProperty -Name "Security credentials" -Value $AESKey, $MainPassword
		$Date = Get-Date
		$File | Add-Member -MemberType NoteProperty -Name "Date created" -Value $Date
		$File | Add-Member -MemberType NoteProperty -Name "Personal info" -Value $ADlogin, $filename
		$File | Add-Member -MemberType NoteProperty -Name "Type" -Value $Type
		$File | Add-Member -MemberType NoteProperty -Name "ChildNameFolder" -Value $ChildNameFolder
		if (!(Test-Path $PathToFile))
		{
			mkdir $PathToFile
			$textboxCreateLog.Text += "*LOG*---------Create Folder  OK" + $OFS
		}
		else
		{
			$textboxCreateLog.Text += "*LOG*---------Folder  OK" + $OFS
		}
		
		if (!(Test-Path $PathToFile\$ChildNameFolder))
		{
			mkdir $PathToFile\$ChildNameFolder
			$textboxCreateLog.Text += "*LOG*---------Create Folder  OK" + $OFS
		}
		else
		{
			$textboxCreateLog.Text += "*LOG*---------Folder  OK" + $OFS
		}
		$File | Export-Clixml -Path "$PathToFile\$filename.aps"
		$textboxCreateLog.Text += "*LOG*---------File Genereted  OK" + $OFS
		
		
	}
	catch
	{
		
		$textboxCreateLog.Text+= "Error $_ when trying create new APS key"
	}
	
}

$textboxPasstoKey_TextChanged={
	#TODO: Place custom script here
	
}

$loadAPSToolStripMenuItem_Click={
	#TODO: Place custom script here
	$textboxPasstoKey.Clear()
	$openfiledialog1.ShowDialog()
	$Global:PathToAPS = $openfiledialog1.FileName.ToString()
	$textboxChosenFile.Text = $Global:PathToAPS
	try
	{
		$Global:APS = Import-Clixml -Path $global:PathToAPS
		$textboxRunLog.Text +="*LOG*---------APS  loaded" +  $OFS
	}
	catch
	{
		$textboxRunLog.Text += "*LOG*---------Error $_ when trying import APS key" + $OFS
	}
}

$buttonRun_Click={
	#TODO: Place custom script here
	$listview1.Items.Clear();
	$SeqPass = $global:APS.'Security credentials'[1]
	$AESKey = $global:APS.'Security credentials'[0]
	$InputPaswword=$textboxPasstoKey.Text
	$APSUnSeqPass= Convert-FromSequrePas -InputPass $SeqPass -IsTest $true -AESKey $AESKey
	if (!($APSUnSeqPass -eq $InputPaswword))
	{
		[System.Windows.Forms.MessageBox]::Show('Passwords does not  match', 'Access denied', 'OK', 'Error')
		return
	}
	
	$global:APK = 
	$global:ASK = Get-ChildItem -Path "$PathToChildFolder\$($global:APS.ChildNameFolder)" | select *
	
	if ($global:ASK -ne $null)
	{
		$parent = $global:ASK | where { $_.Attributes -eq 'Directory' } | select Name
		if ($parent.Count -gt 1)
		{
			$comboboxParent.DataSource = $parent.Name + "none"
			$comboboxParent.SelectedItem = "none"
			$textboxRunLog.Text += "*LOG*---------Add $($parent.Name)  to parent item" + $OFS
		}
		else
		{
			$tmpArray = @("$($parent.Name)", "none")
			$comboboxParent.DataSource = $tmpArray
			$comboboxParent.SelectedItem = "none"
			$textboxRunLog.Text += "*LOG*---------Add one $($parent.Name)  to parent item" + $OFS
		}
		
		#adding to table information
		Add-ToListASK -ASK $global:ASK -IsTest $isTest -listview $listview1 -textboxRunLog $textboxRunLog
	}
	else
	{
		#we need create to the aps path  and document where will be save passwords and logins
		[System.Windows.Forms.MessageBox]::Show('ASK does not have any password', 'Information', 'OK', 'Information')
	}
	
	
}
$buttonAddPassword_Click={
	#TODO: Place custom script here
	try
	{
		$FileName = -join (1 .. 24 | % { [char[]]'ABCDEFGHIJKLMNOPQRSTUWXYZ1234567890abcdfeghijklmnopqrstuvwxyz' | Get-Random })
		$AESKey = $global:APS.'Security credentials'[0]
		$Password = Convert-ToSequrePas -InputPass $textboxAddPassword.Text -IsTest $IsTest -AESKey $AESKey
		$textboxRunLog.Text += "*LOG*---------Password Add OK" + $OFS
		$File = New-Object -TypeName psobject
		
		$File | Add-Member -MemberType NoteProperty -Name "PWD" -Value $Password
		$Date = Get-Date
		$File | Add-Member -MemberType NoteProperty -Name "Date created" -Value $Date
		$File | Add-Member -MemberType NoteProperty -Name "Personal info" -Value $textboxAddLogin.Text, $filename
		$File | Add-Member -MemberType NoteProperty -Name "RootFolder" -Value $($global:APS.ChildNameFolder)
		$File | Add-Member -MemberType NoteProperty -Name "ParentObject" -Value $comboboxParent.SelectedItem
		$File | Add-Member -MemberType NoteProperty -Name "Host" -Value $textboxHost.Text
		$textboxRunLog.Text += "*LOG*---------File Add OK" + $OFS
		if ($File.ParentObject -eq "none")
		{
			$File | Export-Clixml -Path "$PathToChildFolder\$($global:APS.ChildNameFolder)\$FileName.ask"
		}
		else
		{
			$File | Export-Clixml -Path "$PathToChildFolder\$($global:APS.ChildNameFolder)\$($comboboxParent.SelectedItem)\$FileName.ask"
		}
		
	}
	catch
	{
		$textboxRunLog.Text += "*LOG*---------Error $_ when trying import APS key" + $OFS
	}
	#$comboboxParent.SelectedItem = "none"
}

$btnAdd_New_Parent_Click={
	#TODO: Place custom script here
	mkdir "$PathToChildFolder\$($global:APS.ChildNameFolder)\$($textboxNewParent.Text)"
	$global:ASK = Get-ChildItem -Path "$PathToChildFolder\$($global:APS.ChildNameFolder)"
	$parent = $global:ASK | where { $_.Attributes -eq 'Directory' } | select Name
	if ($parent.Count -gt 1)
	{
		$comboboxParent.DataSource = $parent.Name + "none"
		$comboboxParent.SelectedItem = "none"
		$textboxRunLog.Text += "*LOG*---------Add $($parent.Name)  to parent item" + $OFS
	}
	else
	{
		$tmpArray = @("$($parent.Name)", "none")
		$comboboxParent.DataSource = $tmpArray
		$comboboxParent.SelectedItem = "none"
		$textboxRunLog.Text += "*LOG*---------Add one $($parent.Name)  to parent item" + $OFS
	}
}

$listview1_DoubleClick={
	#TODO: Place custom script here
	$SelectItemLogin = $listview1.SelectedItems[0].SubItems[2].Text
	if ($SelectItemLogin -ne "-")
	{
		$SelectItemPas = $listview1.SelectedItems[0].SubItems[3].Text
		$AESKey = $global:APS.'Security credentials'[0]
		$UnSeqPass = Convert-FromSequrePas -InputPass $SelectItemPas -IsTest $true -AESKey $AESKey
		$UnSeqPass | clip
		[System.Windows.Forms.MessageBox]::Show("$SelectItemLogin password copy in your clipboard", 'Information', 'OK', 'Information')
	}
	else
	{
		[System.Windows.Forms.MessageBox]::Show("The parent has not any password", 'Information', 'OK', 'Error')
	}
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>