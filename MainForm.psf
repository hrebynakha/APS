<File version="3.2">
  <FileID>2b855348-feeb-402b-ba34-805d19f52a6d</FileID>
  <LastExport>132573471371976411</LastExport>
  <Preview>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
RK5CYII=</Preview>
  <Form>+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
BG9hmogAAA==</Form>
  <Code><![CDATA[$MainConfig = Get-Content .\config\main.config
Write-Host "Load config"
foreach ($line in $MainConfig)
{
	Switch ($line)
	{
		{ ($line -like "#*") -or ($line -like $null) -or ($line -like "{*") } { }
		default {
			$Name = [regex]::split($line, '==')[0].Replace(" ", "")
			$Value = [regex]::split($line, '==')[1]
			try
			{
				Get-Variable -Name $Name -ErrorAction SilentlyContinue
			}
			catch
			{
				New-Variable -Name $Name -Value $Value
			}
			finally
			{
				Set-Variable -Name $Name -Value $Value
			}
		}
	}
}

$formAPS_Load={
	#TODO: Initialize Form Controls here
	Write-Host "Load module"
	Import-Module -PassThru "$PathToModule$ModuleName" #-Force -ErrorAction Ignore -WarningAction Ignore
	$test = "tesgkdfdagv"
	$Global:isTest = $true
	$Global:OFS = "`r`n"
}


$exitToolStripMenuItem_Click={
	#TODO: Place custom script here
	$formAPS.Close()
}

$aboutToolStripMenuItem_Click={
	#TODO: Place custom script here
	[System.Windows.Forms.MessageBox]::Show("APS v1.0","APS Application");
}



#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}


function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}


function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
	$ComboBox.ValueMember = $ValueMember
}
#endregion

$buttonCreate_Click={
	#TODO: Place custom script here
	#initials parameters
	try
	{
		$Global:OFS = "`r`n"
		$textboxCreateLog.Clear();
		$errorprovider1.Clear();
		$Type = $comboboxCreateType.SelectedItem;
		$ADlogin = $textboxCreateLogin.Text;
		$filename = $textboxCreateFileName.Text;
		
		if ($textboxConfrimPassword.Text -ne $textboxCreatePassword.Text)
		{
			[System.Windows.Forms.MessageBox]::Show('Passwords does not  match', 'Information', 'OK', 'Error')
			return
		}
		$textboxCreateLog.Text += "*LOG*---------Password OK" +$OFS
		$global:Error.Clear();
		
		
		$File = New-Object -TypeName psobject
		$AESKey = New-AESKey -IsTest $true
		$textboxCreateLog.Text += "*LOG*---------AES Key generated OK" + $OFS
		$MainPassword = Convert-ToSequrePas -InputPass $textboxCreatePassword.Text -IsTest $IsTest -AESKey $AESKey
		$textboxCreateLog.Text += "*LOG*---------Security password OK" + $OFS
		$CFLDR = -join (1 .. 24 | % { [char[]]'ABCDEFGHIJKLMNOPQRSTUWXYZ1234567890abcdfeghijklmnopqrstuvwxyz' | Get-Random })
		
		
		if (!(Test-Path $PathToFile))
		{
			mkdir $PathToFile
			$textboxCreateLog.Text += "*LOG*---------Create $PathToFile Folder  OK" + $OFS
		}
		else
		{
			$textboxCreateLog.Text += "*LOG*---------Folder $PathToFile  OK" + $OFS
		}
		if (!(Test-Path $PathToArchive))
		{
			mkdir $PathToArchive
			$textboxCreateLog.Text += "*LOG*---------Create $PathToArchive Folder  OK" + $OFS
		}
		else
		{
			$textboxCreateLog.Text += "*LOG*---------Folder $PathToArchive  OK" + $OFS
		}
		
		#generate new null archive
		mkdir "$PathToArchive\$CFLDR\root"
		$textboxCreateLog.Text += "*LOG*---------Creted Root Folder  OK $PathToArchive\$CFLDR " + $OFS
		Compress-APK -InputPath "$PathToArchive\$CFLDR" -filename $filename -textboxCreateLog $textboxCreateLog -RootFolder $CFLDR -PathToArchive $PathToArchive
		$textboxCreateLog.Text += "*LOG*---------Compressed OK" + $OFS
		
		#adding information to aps
		$File | Add-Member -MemberType NoteProperty -Name "Security credentials" -Value $AESKey, $MainPassword
		$Date = Get-Date
		$File | Add-Member -MemberType NoteProperty -Name "Date created" -Value $Date
		$File | Add-Member -MemberType NoteProperty -Name "Personal info" -Value $ADlogin, $filename
		$File | Add-Member -MemberType NoteProperty -Name "Type" -Value $Type
		$File | Add-Member -MemberType NoteProperty -Name "RootFolder" -Value $CFLDR
		$File | Add-Member -MemberType NoteProperty -Name "Archive" -Value "$filename.apk"
		
		
		#out aps key
		$File | Export-Clixml -Path "$PathToFile\$filename.aps"
		$textboxCreateLog.Text += "*LOG*---------File Genereted  OK" + $OFS
		
		
	}
	catch
	{
		
		$textboxCreateLog.Text+= "Error $_ when trying create new APS key"
	}
	
}

$textboxPasstoKey_TextChanged={
	#TODO: Place custom script here
	
}

$loadAPSToolStripMenuItem_Click={
	#TODO: Place custom script here
	$textboxPasstoKey.Clear()
	$openfiledialog1.ShowDialog()
	$Global:PathToAPS = $openfiledialog1.FileName.ToString()
	$textboxChosenFile.Text = $Global:PathToAPS
	try
	{
		$Global:APS = Import-Clixml -Path $global:PathToAPS
		$textboxRunLog.Text +="*LOG*---------APS  loaded" +  $OFS
	}
	catch
	{
		$textboxRunLog.Text += "*LOG*---------Error $_ when trying import APS key" + $OFS
	}
}

$buttonRun_Click={
	#TODO: Place custom script here
	$listview1.Items.Clear();
	$global:listviewArray = New-Object -TypeName psobject
	$SeqPass = $global:APS.'Security credentials'[1]
	$AESKey = $global:APS.'Security credentials'[0]
	$InputPaswword=$textboxPasstoKey.Text
	$APSUnSeqPass= Convert-FromSequrePas -InputPass $SeqPass -IsTest $true -AESKey $AESKey
	if (!($APSUnSeqPass -eq $InputPaswword))
	{
		[System.Windows.Forms.MessageBox]::Show('Passwords does not  match', 'Access denied', 'OK', 'Error')
		return
	}
	
	Expand-APK -filename $global:APS.'Personal info'[1] -RootFolder $global:APS.RootFolder  -PathToArchive  $PathToArchive
	
	$global:ASK = Get-ChildItem -Path "$PathToArchive\TEMP-{$($global:APS.RootFolder)}\$($global:APS.RootFolder)\root" | select *
	
	if ($global:ASK -ne $null)
	{
		$parent = $global:ASK | where { $_.Attributes -eq 'Directory' } | select Name
		if ($parent.Count -gt 1)
		{
			$comboboxParent.DataSource = $parent.Name + "none"
			$comboboxParent.SelectedItem = "none"
			$textboxRunLog.Text += "*LOG*---------Add $($parent.Name)  to parent item" + $OFS
		}
		else
		{
			$tmpArray = @("$($parent.Name)", "none")
			$comboboxParent.DataSource = $tmpArray
			$comboboxParent.SelectedItem = "none"
			$textboxRunLog.Text += "*LOG*---------Add one $($parent.Name)  to parent item" + $OFS
		}
		
		#adding to table information
		Add-ToListASK -ASK $global:ASK -IsTest $isTest -listview $listview1 -textboxRunLog $textboxRunLog -listviewArray $Global:listviewArray
	}
	else
	{
		#we need create to the aps path  and document where will be save passwords and logins
		[System.Windows.Forms.MessageBox]::Show('ASK does not have any password', 'Information', 'OK', 'Information')
	}
	
	Compress-APK -InputPath "$PathToArchive\TEMP-{$($global:APS.RootFolder)}\$($global:APS.RootFolder)" -filename $global:APS.'Personal info'[1] -textboxCreateLog $textboxRunLog -RootFolder $($global:APS.RootFolder) -PathToArchive $PathToArchive
	
}
$buttonAddPassword_Click={
	#TODO: Place custom script here
	try
	{
		$FileName = -join (1 .. 24 | % { [char[]]'ABCDEFGHIJKLMNOPQRSTUWXYZ1234567890abcdfeghijklmnopqrstuvwxyz' | Get-Random })
		$AESKey = $global:APS.'Security credentials'[0]
		$Password = Convert-ToSequrePas -InputPass $textboxAddPassword.Text -IsTest $IsTest -AESKey $AESKey
		$textboxRunLog.Text += "*LOG*---------Password Add OK" + $OFS
		
		$File = New-Object -TypeName psobject
		
		$File | Add-Member -MemberType NoteProperty -Name "PWD" -Value $Password
		$Date = Get-Date
		$File | Add-Member -MemberType NoteProperty -Name "Date created" -Value $Date
		$File | Add-Member -MemberType NoteProperty -Name "Personal info" -Value $textboxAddLogin.Text, $filename
		$File | Add-Member -MemberType NoteProperty -Name "RootFolder" -Value $($global:APS.RootFolder)
		$File | Add-Member -MemberType NoteProperty -Name "ParentObject" -Value $comboboxParent.SelectedItem
		$File | Add-Member -MemberType NoteProperty -Name "Host" -Value $textboxHost.Text
		$textboxRunLog.Text += "*LOG*---------File Add OK" + $OFS
		
		Expand-APK -filename $global:APS.'Personal info'[1] -RootFolder $global:APS.RootFolder -PathToArchive $PathToArchive
		$textboxRunLog.Text += "*LOG*---------Expand APK OK" + $OFS
		if ($File.ParentObject -eq "none")
		{
			$File | Export-Clixml -Path "$PathToArchive\TEMP-{$($global:APS.RootFolder)}\$($global:APS.RootFolder)\root\$FileName.ask"
		}
		else
		{
			$File | Export-Clixml -Path "$PathToArchive\TEMP-{$($global:APS.RootFolder)}\$($global:APS.RootFolder)\root\$($comboboxParent.SelectedItem)\$FileName.ask"
		}
		
		
		Compress-APK -InputPath "$PathToArchive\TEMP-{$($global:APS.RootFolder)}\$($global:APS.RootFolder)" -filename $global:APS.'Personal info'[1] -textboxCreateLog $textboxRunLog -RootFolder $($global:APS.RootFolder) -PathToArchive $PathToArchive
		$textboxRunLog.Text += "*LOG*---------Compress APK OK" + $OFS
	}
	catch
	{
		$textboxRunLog.Text += "*LOG*---------Error $_ when trying import APS key" + $OFS
	}
}

$btnAdd_New_Parent_Click={
	#TODO: Place custom script here
	Expand-APK -filename $global:APS.'Personal info'[1] -RootFolder $global:APS.RootFolder -PathToArchive $PathToArchive
	mkdir "$PathToArchive\TEMP-{$($global:APS.RootFolder)}\$($global:APS.RootFolder)\root\$($textboxNewParent.Text)"
	$global:ASK = Get-ChildItem -Path "$PathToArchive\TEMP-{$($global:APS.RootFolder)}\$($global:APS.RootFolder)\root\"
	$parent = $global:ASK | where { $_.Attributes -eq 'Directory' } | select Name
	if ($parent.Count -gt 1)
	{
		$comboboxParent.DataSource = $parent.Name + "none"
		$comboboxParent.SelectedItem = "none"
		$textboxRunLog.Text += "*LOG*---------Add $($parent.Name)  to parent item" + $OFS
	}
	else
	{
		$tmpArray = @("$($parent.Name)", "none")
		$comboboxParent.DataSource = $tmpArray
		$comboboxParent.SelectedItem = "none"
		$textboxRunLog.Text += "*LOG*---------Add one $($parent.Name)  to parent item" + $OFS
	}
	Compress-APK -InputPath "$PathToArchive\TEMP-{$($global:APS.RootFolder)}\$($global:APS.RootFolder)" -filename $global:APS.'Personal info'[1] -textboxCreateLog $textboxRunLog -RootFolder $($global:APS.RootFolder) -PathToArchive $PathToArchive
	
}

$listview1_DoubleClick={
	#TODO: Place custom script here
	$SelectItemLogin = $listview1.SelectedItems[0].SubItems[2].Text
	if ($SelectItemLogin -ne "parent")
	{
		$SelectItemPas = $listview1.SelectedItems[0].SubItems[3].Text
		$AESKey = $global:APS.'Security credentials'[0]
		$UnSeqPass = Convert-FromSequrePas -InputPass $SelectItemPas -IsTest $true -AESKey $AESKey
		$UnSeqPass | clip
		[System.Windows.Forms.MessageBox]::Show("$SelectItemLogin password copy in your clipboard", 'Information', 'OK', 'Information')
	}
	else
	{
		[System.Windows.Forms.MessageBox]::Show("The parent has not any password", 'Information', 'OK', 'Error')
	}
	
}

$button1_Click={
	#TODO: Place custom script here
	$CFLDR = -join (1 .. 24 | % { [char[]]'ABCDEFGHIJKLMNOPQRSTUWXYZ1234567890abcdfeghijklmnopqrstuvwxyz' | Get-Random })
	mkdir "$PathToFile\$CFLDR"
	$textbox1.Text += "*LOG*---------Creted new Folder  OK $PathToFile\$CFLDR " + $OFS
	#Compress-APK -InputPath "$PathToFile\$ChildNameFolder" -filename $filename -textboxCreateLog $textboxCreateLog
	$global:Error.Clear();
	$DeletingPath = "$($PathToFile)\$($CFLDR)"
	Wait-Event -Timeout 1
	try
	{
		Write-Host "Deleting folders $($PathToFile)\$($CFLDR)" -ForegroundColor Green
		Remove-Item -LiteralPath $DeletingPath -Recurse -Force -Confirm:$false
	}
	catch
	{
		$textbox1.Text += "*LOG*---------Error $_ $PathToFile\$CFLDR " + $OFS
	}
}

$Search_Click={
	#TODO: Place custom script here
	$InputSearch = $textboxSearch.Text
	foreach ($login in $listview1.Items)
	{
		
		if ($login -like "$InputSearch*")
		{
			[System.Windows.Forms.MessageBox]::Show("found $login", 'Information', 'OK', 'Error')
		}
	}
	
}

$versionToolStripMenuItem_Click={
	#TODO: Place custom script here
	[System.Windows.Forms.MessageBox]::Show("Version app APS : 1.0", 'Information', 'OK','Info')
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>