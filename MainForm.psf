<File version="3.1">
  <FileID>2b855348-feeb-402b-ba34-805d19f52a6d</FileID>
  <LastExport>132509412717165346</LastExport>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAIe2SURBVHhe7f13WFTpwi36fjucs//Y97l/3Hvu
Ofecffc++8tpfWGl7tXdq7PadpvbnDDnBAZUQEFUVEAERAQBEQyAICA555xzzqHIOcdx37dARbvs
VltLsMbPZzxSadasNN8xZ82q+gsiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiKiZ6JFKv/X//V/qfzT
xx9V7tq1q3L37j0MwzAMw8yR7N27t3Lx4h8q/5f//J8r/+N//I+VYlwvU47wP+c//af/pPjLv/xL
bN60GTY3HZCcXYKy2jaU1rQyDMMwDDPr04biSgX8gsJwYP8B/Oaf/xn/5b/8F0wP8y/3H/7Df6zc
tGkTAsNikV7ahJjsKkRnVTIMwzAMM4eSUqxAak4xjh07jv/6X//r+PQw/3IfffTHymvWN5Fe1iwm
UIEYhmEYhmHmXKIyy8WKfDMCQqPx3fz5v1wAdu7cVZmcVYK43BrEZlcyDMMwDDNHE5lZgcrGbpwz
OvfLBWDPnr2VNU3diM2tRmxOFcMwDMMwczRRWZWoaxuEoaHRqxSAPZXVjZ2IEwUgTlyYYRiGYd51
4mXEuPOu8/T6VJz2tvPsutR7fTMj9wWoaenH2bOGr14AEvJrkZBXwzAMwzDvPIlizIkX/8fliIFM
DmZvM2KacoCU1/H0OvNrpgfNF877azM9vSe36elty1XjbZuRWHF6besAzp55WwUgv+7Vk8ciwTAM
w7w8cvAKTynGHc9o2LoE46ZryFuNrUsI7O+FwS8qe2qgFAOmV0ja1GkvnPfXRl6XvA33feMRnVGO
pMI6hCYW4fbDSOVpqi7zayKn6fAgHAExuSrv29cuADWKLiQW1CnvKFVJyCpFfGbRs2RXiCbS9DTx
Igl5zUgQV5yYWyUu8/JpMQzDMJqd5MJ6OLhFICAyE8l5YszIqXyrSRLjUFxGCezvhiJKDMp+0bm4
7R6JpJwKcZrqy7xaKn56nJhesri+hwGJcPWJR2pJI27dD0dwXI7y+J+c/1dG3raY1GLYTd+2ZFE4
Zt63cof+OlEAzrxOAUgqbECSKAHPRTxI8spi4xIQl5IhkimSg7gofyQ/PoZE74NIeHQIMQ8PIdrj
IGICHZCQLWZQ1bReGnEdyrzq8QzDMMxcTkpRg1gTDxWDdClisiqVA9nbTGR6GTJKGpRryhFpZfAO
z8R9nziki+PkaS+ePzqzQrkFW45diWLcURW56f3Fy8lEiiTl1yA4JgdOD6ORVqoQa+qhYrCuUH60
XtVl5Fq6nGZSQYPyeuV9IN8yUB4nxl25JT06c/r8M/8XiUwvR3pRPezvhSpvm7wvZ9638rJyJ8DX
KgDJRY3KVvZcxIRlu4lLSkdysQLJJU1IKu5AQqgdah7/M7pzddGZsR/taTtR/PAfEXxHSzSQZtXT
EnesnNGpv+WMTh2XLG6I8rinp73wtzJ1LxxmGIZh5mpSixuVm+jjMssQk1MlBjb5Gfa3FzkoywLg
5BapHDB9IrLx4HHCVAFQDqbPzhsjBuOwlGJctb2PEwbmOGV47bnonrGA/vnrcA+IVw7cMy8rIz92
lyTWvINjc+HsGYP0sibYidsm19blwC4HclkwZOQALr9s765PFM5csMFxPTNcunYHoUmFcHwQDN2z
Fjh59iqsbj1EmFjLj8msFPMrLivnWfwvIw/LAiC3MsjbJu/Lmfet3AJf/8oFYLcoAE3dym8QkgP0
c5ETzqtCXHIGkivbkVLVjuSKHsQE2aIuYjnQFwu03AVaLVEb+i287LchpbBZzNDz00otEaUgMweP
fAMQklYtHoQmpJbVIzouBm73PHDPzQsPHoUhPLdRtKdGJCYnwt3TC3fve8M3Og+JpeL8M6bHMAzD
zN2klSiUA1iCWEOWa6zKneXeYmLFIJtVplBu9peDpm9UDtxEAcgUg7McgOVA/iRyhfWOVwQuXrJG
Xm4hiovLUFZagVIR+X9BQTECA8OgZ2ytPO/My8rIAiFvU0hcnphOLDLKm2Evbpvc/C/nQ5aAmCz5
/9Th+Nxa6BqYITg4QlxXKW7au+Kw7iWcPmuOvLxCZGfnQ+/MZbgFJDzdOjAz0aIUZBQ3iMIQobxt
8r6ced/KLQj17UOvXgBqRQFIk4OyGPCfi5ywuKK48HDEOtog3PYaIu8+QISvDUr9vgDqLmG8aCdQ
uAjFbv877ttsR1pRixjEZ05LIQb8OkTFRcL1jjseRWYgsbgNWZV1CA8NhLt3HGJyKxEU4AO3oCyk
5OfByzMYQWllSMzOQ3hyAeLzm8U0ZswXwzAMM2cjv3b+1v0IZQGQa8/xYhB9LtnV4vh65bfaZZS1
qIwcWxJya356WZE4MdBmKwtAlHLAfByVqywA2aIAxGXLyzxLanETHO4Hwdb2DqSW1jaUiBIgU1FR
rTyurq4BJ/TNxACreO6yMnEiaaIYhCoLQByyKlqU5SZF+akD+QV7UwO/TJy4XYl59bC57Y0z566i
u6tbOX27W3dRVVWr/Nv1ridOG1kiPLVEFIBacbknxWbqY36xokhkihVlWQDkbZP35cz7Vm5Bb3jd
ApBRJgbZUjFYz4y4s9JqOhFjb42MP/4fyF3zDfz+8HfwdzZBrse/AGXLgKx/B3L+O0pd/wJ3ru1E
ZkmraEAtT6chH6j0glIEBYUiKC4VPoExiMppQk5NIyLDQ+AVkCGuowspGUl46BGF2Nw8PHTzRmBa
PXJrO0WLaxKD/wvzxTAMw8zZZIq15FtiAEvMrkRyQb0YyOWe+s8iB//g+Hxcs3+IK9Z3YXr9/nO5
bOUKF89w5QAsB9QXLx+fU4ucimbclmOKGHj9YnLh7pcojmsRg7J8n/xZ0kpbxPnCYHXdEePjY9A9
fRG6Z66J63DB5u3HkZmVK4pAFU6euSpWlJufu6xMvIjcqh0q5tflURxyqlqfFgC5OV5u4ZAfd5SR
hUVeJqWwATdd/aCrdxmFRaXKgb9LlIEbN+8o326QbxfIgTxe+am6qci/lRG3T5YbWQDkbZP35cz7
Vu6E2NghC8DZXy4A8mcE65p7RGtpVU7ouYg7K6OuCyHXzZG5fiEGnJ3g+fkn8HUygc+l/4qY6/9P
RFz9zyL/AfdP/gXuWm5FZlm7WLtvezqNrMoWpGSlw9svCanVDQgNDENQSiWy65oRHREKr8BMpFW3
IyYyCG6+SUipFg9QUrwoA4/gHZaChJIOZIsHUm5WeW7eGIZhmDmZ7MpWOLhFIlGs0aaItedEMeDP
THppK86bOcLJ6QF8fILg+zj4uTzyDoCRsQUeBiUrB/AXL58gSkGuGHucH0Yr18IDYvPh7p8kjmtV
njbzvOllrbjjGQlT8xvo6+uBzvFzOGVkLYrGPWjtOIHo6HhkZmbh1FkL5XlnXlYmQSSjtBlhCQVw
9UlAXk27KDeRSC0QRUaUG2UJEGvyMoliAJeH5RZ3+Z7/kWPGSExMQW9vN2pramFy+TrOmtxUft5f
vgUv3wKY+lSdnMaz5JSLy4v7T942eV/OvG/liruic/j1CkC2GLTlpovnIiacXd+NgBtWCBBr/oWL
FsDmL/87Ah+5w8/HDu73LOF2z0r8b4NH960RFuiB9ELRTqpECVBOQ1y+shmx0cF4GJqL9HIFYiOD
8SAwDZk1LYiLCYXr7Xu4/9AHDzxDEVHYiBxRBnLFHZiWnQ1//0dwD0pDcpkoAeLB/Mn8MQzDMHMu
OVVtygIgP2WmsgCIgfbY6SvIzy/AxMQohocHnwswgavXbsLRPVT1oDyjAMi154C4gqkCINbO5RYD
uYXhSTLE5Z0fRuDSZWuxFt6OlJR0BAeFiYQiPDwadbVi8E5Igq6BufK8My8rI68vUxSA0OkCkF/b
obxtqdOfdpB7+j/7VFs90oqbcOteAI7pnkdWVg5aWppgYWkvrjcNbS3NsLhmp9xBMCZb/rpfo3IL
ifITedOXl58UyBEDvSwA8rbJ+3LmfSu3wCu6Rl6jALT0KAde2SSei5hwbn0Xgl1dcOMP/wzLP/4W
pn/+RKzNizsrvAtmoZ0w9OvAec8KpOaUK3+GMDWvVExLDtjy8mIwLy+Gt9sDuLo9gofXY7h5uOOO
qz/iKhWiAITB0zcBcfJOEY0op6YDOaUNyKjsQGHLKAoKMuEmLhOe04x8UQp+Mn8MwzDMnEuuGG8c
3aOUBUC+bz1zgJTJKG+FwXlrODndRWhoOAICgp9LRHgkThuY4IF/vFixFIPyC5eXg3JeVQvuiAIg
154D4wvgIQpAnhjTEvOfDMpTyShvwwO/OOjpmyAyIkqZ6OhYREfFiP9jlIdv374r5ue6WMNue+6y
MokimWUtCEsswF0xnhXUdSoLQFphnXI/OrnjoCw5ysh94sQALd9OcHRwQWJCIkzNbHBM3xy6epcQ
EhyGkJAw6BwzhG9kJjIr2p5ddkZyxUAvC4D83L+8L2fet5lixbvpdQpAfUuvWOsWg6+4c56LnHB5
E+ITk5GUmYdY8X9qejoehSXAyKcNN6OAAy7A1iupSMrIQVpOEdLyy8W0OpWXz6vtQlpiqPIbklLF
DZEzmlvViPAAL3gnFSM2cmofgIz6PhSI1iQvl1dchOCoeARFJ8MvMAAPA5KQWt6h3Kzyk/ljGIZh
5lzyxHgjC0BKXg3kTmwvDnBy579HYak4c/EGThteg9456+dy8qwFrtl7KHeOk+/Lv3j55MJGFFS3
KQuA/Gx8UHyhGEuSUSCuV54287zy8nLnvGt2Hsrpvnhd8vrlfMj5kfM187IycoDPFoNuRGIh7vkm
orC+Wzk4yz315c/sy5XbmZHlxjMwAYaXbJXXZ2ZzT3k7XL0jxfVZQf+cJWydvZUlJl0UixcvL5Mv
7kMn+cVGotzI+3LmfSvfgm/qHsUZg1cqALsr61t7kV/XpZzQc6ntFAVAgcS0LBQ1DyEluxD55TV4
GJSEZUaZWHWhFJ8eLsR3h0OQkpmLtNwipOdXiGl1Ky+fLwpAek4uYnJqxOAupi+mly+SkV+E6JxK
pOeKEpBZhWx5mry+anGZumYkJKYgIDgSflEZSCppR6FoVLI8PDdvDMMwzJxMgRhvnDyikSrWYKf2
6Jd7sj8fubadU90l0j39/7PkiuOyqzrFYCg/dv7Ty6YUNaFQrFS6eMaIAb8BwQlFYtBNQZG4Xnna
i+dPK2lRTk9O98XrenL9cn5evJxMikhOZQcik4tx/3ESiht7xeAchaySRuXmeFka0kvl/1N/p4lk
V8mxrkeZPDH+yVKQI67/yXFyvJRbFWQBkPsXyMi/lRF/F4oVYmdx/yUXNCjvy5n3rdwC39wzBoNX
LQANogAUiNYiB+eZkRPOrWqZ2gIgSkBcYhKSUlIRLtbQb4kbePNemPLbnO48jBTnSUJ8QiIyi2vE
tMSNUE5DPND1vShqeH7ayuPE9T07TZaFJ6d3obCxH8VNAyhR9Ik29aw4MAzDMHM/ci1ZDpKZxY3K
v/Pk1t+3mNzqTpQ39T4tACGJxaIApKKiZUB5mqrL/JqUNvYhJrUU93yTlOOW3AKQKwZ/uRVcXl+u
GJSfRg7Uch7k8eKyytPFcc+fT54+9feT/2eeVirGzdvuogCI2ybvv5n3rRwvW16vAIiBtqFHOeCr
Sl5VK3IrmpQ7VeRWNiO/ugVl9a0oa2hFuUhpfduz08SVq5oGwzAMw8gUifHGPSAFwTG5SC+sR1pB
3VtNuhgY4zMr4PooHlli7Vp+9v+ed/zUWw7iNFWXedPI+U8X/3sHp8EvKhelzf144JeE0PiCN7uu
/J/5W0ROMzatTNy2OGSKkiHvy5n3rdya39I7/noFoKihF4V13SpTpFxjf9X0qJwGwzAMw8gUi0Er
WwzMHoFpuOMZCxcxUL/VeMUp/4/PqkWJGNuKxbgUnlQqrkscP33a24yzuA2+ETnIr+kSt60XGSXN
cPNLmbo+Fef/VRHzf9c7AUl59crrevG+LRBpfa0C0NaHYoUsAT3PIu4whmEYhvm5FL5h5OBV2tT/
TlPSKN9GnppPuWm+TMV53kaeTFeOncrb1vjub1vxjNs2c+yWW/NbeydevQA0tok7SiEmKJsSwzAM
w6grYrB8Z/lQr0vmxeubjtyaP1UAzvxyAdi1a9dPCkBBXQ8UnYPo6x9Ae2cXOjq73yidXT3vL929
Gpuunr73mu7e/veWnr4BjU1v/+B7Td97TP/AkOZmcPi9ZmBo5L1lcHhUYzM0MobRsXG09Qwpx+yZ
BaCtbwL6+r+iALR0DWF4aADdXV3o6e5+o/T29ry39PX1amz6+/veawYG+t9bBgcHNDZDQ4PvNcPD
YpnxnjIyMqyxGR0dea8ZGxt9b5Hf3a+pmZgYV34jYlf/8NsvAM2iAAyJhUqXKADdYjB/k/T09Ly3
9Pb2amz6+vrea/r7+99bBgYGNDaDg4PvNUNDYpnxnjI8PKyxGRkZea8ZHR19bxkbG9PYjI+LAjA5
gc4+FoCfRNXAqClRNSirM6oGZnVF1cCoKVE1KKszqgZmdUXVwKgpUTUoqzOqBmZ1RdXAqCmZVQVA
/pRh//AoJpU/bChMjGFQLJCHxYwOD4hBYWAYo2PD6Ot5u8Wgu7sXQ6NyU8iUyfFR9PeK65geDHt6
+jAk5mFkeBADgyMYnxjFQK+47IwB843T06u8XWMzptkjjpPvTY2Nj4j5+GkR6esfwqi8b/rEeV84
7W1F1aCszqgamNUVVQOjpkTVoKzOqBqY1RVVA6OmRNWgrM6oGpjVFVUDo6ZkFhWAHjGwdaI6JwGP
3Fxx29ERTh4BKKiuRlpwCNLKGqCoLkJGUgGaewfQJwdLFYP560cWiw6UpUbh4X1xvU5OcAuIRnW7
WCD1y8FQvh/diYqMdBSU1qO+NB0hAYmo7RpRFpWx4QExiL/51oJ+UWzaGkqRGZ+Dxu4B9IvBb2Cg
B4ryfGSmFKG1Tx737Px9/X3obK1CVlwmajvEvM847W1G1aCszqgamNUVVQOjpkTVoKzOqBqY1RVV
A6OmRNWgrM6oGpjVFVUDo6ZkFhWAAUygEXf3LMVv/+VbbNy5C9tPXEZ0Xi68r1rCP68cSa6G2LTA
AOkDwOjAs0FK7rCnenB/lQxhHBWwXPo5fvunxdiyaxeOXnJAXot4YsqtDv2jYpivw60Na3DiUiDy
M4JgZeqOsoF2pLp7IT6vEf1Dg6KQqB5Ifz59GJkcQFGIBTZ/fABR7ZMYEwvhcXQjzvYENi86j5wh
UTKU8yEHpwEMjQ6jPtcVO367Gd5Vgxgf7n9uwHyz+fhpnty37ytPbs/7iKqBUVOialBWZ1QNzOqK
qoFRU6JqUFZnVA3M6oqqgVFTMqsKwLgYaO/s2gp9s3jx95QRcfkx5V8DSLljiG2LjZApCsD4iFjz
7u5SflxPOWi8cQkYEtMvheWKDbjiVqK8Jkluju8XC4X+XjFfkzW4vX0zdC8Go336dExk4swn3+HM
nQx0iyfwm62JiwIwMYDiMGvs/Po4EvvEdOUDgiGk3T6LXT9eQp4oAJPytvZ0oau7D8NjI2gseIB9
n+yAb/UgJkbkwmtg6hMTfXIBLreOqLqu18uLA7K6o2pgVldUDYyaElWDsjqjamBWV1QNjJoSVYOy
OqNqYFZXVA2MmpJZVgAa4LpvM3YcvIn4whIUFFWic6QSLodO4E5kLpLcTLBzqTFyR8fRnOSKfSuW
4ccl63DZLRmtI6MYUDnA/1JkASiH9cqVOHjODelFJSirVKB3eBANCQ7Y+OevsXjvZqz/YhWM7aJQ
kBUAc52LsL+hjz/9b/8H/vbfF+CERxbGR4feYOCdKgAlkTbY8vE23E8rRXFeHkrKs+B+YR+01pih
eGIcjbG3sWvZcnFbN8MqMA/VVd449Ok+hHU2IdDwJAx09bB10Vf4dOkuuKe2Y2xUFAaV1/fqUTUo
qzOqBmZ1RdXAqClRNSirM6oGZnVF1cCoKVE1KKszqgZmdUXVwKgpmWUFoAnu2ivxm7/5Hb7+biF+
3HUGqR1VsPx+BS4+TEGSx2XsXn4ZuT05OPvFF1irbQpbw+34dudZBBX3YnK4X8UA/0uRbwFU4caa
b/BP//wnzFu4DCeuRqB9KBOGi+bB4HYW6vJ8sPXj32HfrXjkxt7C9k+PIKolBxfmLcbpm1Go7erD
QL98K0L1YPryyAIwiKokW/zw//qf+HjeQixcsAALv5+PP/3mr7Fw602Udmfg1CefY8NxC9gabMG3
h6/gcaQ7Tnx1EJF9jbi99s/4p0+OI6EiDw9Ob8bGwzYoGwCGlfsvvHlUDcrqjKqBWV1RNTBqSlQN
yuqMqoFZXVE1MGpKVA3K6oyqgVldUTUwakpmWQGoh8ueLThm5I/mCWBkYESsnRfBXKzlm3mnTRWA
H02RWxWCTb/5GIu0tmHnrp3Yfs4JObVdGBnsUzHA/1LkFoAyWP24DkYOKZBb4UdHxjFQ/hDbt5kj
rXFIHNOBB3t24KxVGDITbmPv1yeRNloD68VrYfaoGEMTY7/uLYDw69j19THEd4urEi8GoB/JTmew
d50V8soDsfYf/4Ql27djl7itO83dkJJ0HzpfHERETx3ubN4MoxtJkJdqCDHEIe3DSGgExgdVXd+r
R9WgrM6oGpjVFVUDo6ZE1aCszqgamNUVVQOjpkTVoKzOqBqY1RVVA6OmZNYVAOcdG3HYwAeNY5MY
7JODcyGufL8Kl71Skeh2EduXmCC7PQmH/jgfF0PqxLAnTYjzyo/zqRrgfylT+wBYLF0JfdsEdE9M
inkewWBHJLQXLIZ1WAsmWpNw8LM/YPeNGOTGO2Lnn48jeagCVxeswEW3XPSNjf6qAlAUZoVtfz6M
mA5xS8RCcBI9SLA/jR0rryK3JRb7frcQ5nEt07cVaC64h91/3I2wnka4aM3Ham139E30Idh4H7Yd
vIlK0Vm4BeDNo2pg1JSoGpTVGVUDs7qiamDUlKgalNUZVQOzuqJqYNSUzKoCMDbZgAfae3H6YgAa
h8cw0DuIkckSXF+3HdZ+mUj1vobD601RMDaIQk8DfPtvf8L8+fMxb585Uqu6MTb0Zm8BjE1Ww3Hb
Ivz7v3+KbxcswPe7jRBf24NylyP4t3/7Cot2rseqr1bDxCUBecl3obNEH2mDQ4g6vxz/+skXOPog
C+Mjb7gPwPgASqPtcWjxacS3j2NULITHJruRfOc8Dm+xRqkoCDn3T+Grf/kECxbMx/zjtohPegiD
RScQ09uAe9vX4IfPv8c3C77GV4t2wzOjRzyw3Afg10TVwKgpUTUoqzOqBmZ1RdXAqClRNSirM6oG
ZnVF1cCoKZlFBUB+uU8XWhUKNDW3o0sMzvK43l5xXKMCre2d6GxvRVNjC7p6+8V0u1FXVoT8/Hzk
l1ajtbPnjT8J0NvbjbamOpSVyOnloaC0Ei0d/RiRn/8vKURhRRUUijZ0iHno6mpHs0LOgxhkOxtQ
VlqEioY2yM/vqxpIfzF9vejubFNOs1MUAlki5Hfxd4nb2tzUiu6+QQyL21qrvK0FKKioQ1tHh7if
OjE8WQW7DZtw6qI3siqqUVmnQK8oJqq+POh1o2pQVmdUDczqiqqBUVOialBWZ1QNzOqKqoFRU6Jq
UFZnVA3M6oqqgVFTMqsKgEyvWADLAfDJYfmteP1iwaTcxN4nF879yi/e6RElYPDJi1dcx6/7LgBR
HgZmLHzE9GSZkB+rU75AxHGDQ4PKHf36xDwMDk191K5vYGqhMTTwhoP/dPrkx/emp/n0uH65MJ4+
Tpw+9OTFKs7XL++HIfHAoQLXFi+GzuUo9IpDY8ODYvB/No1fE1WDsjqjamBWV1QNjJoSVYOyOvP0
Nfge8mQw1MSoGpTVGVUDs7qiamDUlMy6AvBiVA3W6oqqgXH2RJaCFqQ/fozo5Ap0iTX/138L4uVR
NSirM6oGZnVF1cCoKVE1KKszqgZmdUXVwKgpUTUoqzOqBmZ1RdXAqClhAfiZqBoYZ1N6evoxMjmJ
8dHBX/V1xKqialBWZ1QNzOqKqoFRU6JqUFZnVA3M6oqqgVFTompQVmdUDczqiqqBUVPCAvAzUTUw
akpUDcrqjKqBWV1RNTBqSlQNyuqMqoFZXVE1MGpKVA3K6oyqgVldUTUwakpYAH4mqgZGTYmqQVmd
UTUwqyuqBkZNiapBWZ1RNTipK6oGJk2JqoFRnVE1OKkrchDU1ExMTEA0AHT1j7zdAlBY34vGdrFA
nbFD31yLqlLAqCeqSgnz7qOqjGlKVJVBRj1RVUYZ9WR4aBCtXf3KMfutFoC6ljf/aN67jKrBnmGY
9x+5tZBhGPWlp7sLirbut18Aapu70dHehtbW1lmTzs5OlQsehmEYhtG09PZ0o6m95+0WgOJG8XeV
ArU11WhsbJwVqa2tVUZu7lO1+ZP5abjFhGEY5sPNOysAhRUNyonPFnKHj4qKCtTX18/KNDQ0qDz+
faWurg7Nzc0sAQzDMB9o3mkBkO8vzBZyb9fKyko0NTXNusiBtqqqSrmFQv6t6jzqjJwHWQBqampY
ABiGYT7QqL0ATI6PoaOpEf2j00cIo8OD6O6ZccQ7ID/qIwe02fgWgNwTVm4BkAOv/FvVedQZeR+1
tbUpCwkLAMMwzIcZtReA8R4FrA4uw42MJwP+OPL9z2GZliUyy9qnj3v7nhSApwNaVxe6e/swPDl9
BmF0oA9dL9xB6ogcdOVmd7n2Lf+eedrg2PTMzTTy675f4Zci7yO50yQLAMMwzIcb9b8FMN6LcKeT
0LbPnTo80grvM6uxy+IR4jMap457B14sAD39QxjpbkOigyl0Dh/CEXNLhFY0KX9L/8U76WXp6u7B
wOAwhof60N3TL65Dfi2v6vP+XFQVAPlDSPJjlMke53Hk0BEcO6kLXd2j4u9jMH+chYF++fPHqqen
nK+hF+ZLxfleFhYAhmGYDz/vYR+ASdQluEHvsDlqxKGJ+hDo7TGEe0gYgpMUoiDk496lLdi8eScu
BBejqz0PjmfdUIk+5D70RkCIOG6wBA8v+KB2aoKvZGYB6OkTg2JXPXyvHcWSladw2fIGTM5oY+fG
i0hrGVH+vv+Q/IU+5a//yW8KG8KAGIyVd1j/9DeWjYxgYrgFSUEP4eJbgN62FNy08UVZa6/y/FOX
k7/QNzUg94nCobzc0CAGXygZKrcAiPnsE5fNCXXGDdsL2PzJl/h2/k6Y2N7E/eiiqeKhnJ6YT1kE
RGFQHjcyisnhZsT6ueN+QCG6mhJga+OHys4+5XwN/cx8Dcj56mIBYBiG0YS8hwIgBv2WdFgaHcbd
okk0++vjpKMP3KxMYGgbiiDLgzhscAF2dpexabM2rB/6w2znfoQV5cN63b/g4713kJ/hjX07HCDq
wiubWQD6BwfRVJSLUxt34HbBwNQZetpRlpKNknoFqipLkZNTBkVbHYqzkpGcno9aMYAO9HWhqTwP
qcnJSMkoQXtHBW7rb8ea/S6oai1HQmwmKhsb0VBTifysVOV5GjvlV6z2o62+GOkpyUjLK0FFQyu6
pwuF8kFQVQCmMzAiZ64fQQYXYXYtDsPy4PgQOpvLkSWml5JXjpY+MbD3daCyOAOp6aXobC2C3fFt
2KBzH9WtZWK+slClEPNVXYG8zFSkZpVC0Sm/frUPrbVFSEtJUc5XZWMreqa/vIkFgGEY5sPOeykA
QBf8bC7jyp2HsDM0QEBOHgLu2MLMwgpHFnyFjxb+iLVr12L1ik2w9stBpMtuHLvmCTe9LdDS84Cn
tS4M/Kump/VqZhYAOSDn51Ri+8EHaBwVa8M9XejuFyPtZD3cLh3BdwvXYOO2c7C3Ownt/ZuxZfse
nLiXirbOFmS7GGLbxo1Yt2oHjlx0gPaCv8Xf/G4n7vu7wMjAEreu62P1wvXYvHEp5v1xCfTuV6Kr
NhTXdD7HvIUL8fni1Vhz9jG6JobR9+RB+JkC0N3dj3E04OFxAxhfDESLuC2DikIE2uyFltZWrD1w
CtaxNaiPf4gjKxdi6Q/rsGOjLrZ99bf4u4/3wy3gDoz0rWBvdRqrv1+PDesX49uPVsDIsw5dVf4w
PfSZmK/v8NmiNdh0IQg9k8Pi/mABYBiG+dDzngoA0BZzF0aH/oRPj3uKNdhWBDtdg8l1F5hsWoeb
oVPr9jXZWSio6UVPsQ2+/loLdn65CL9xFYtWL4dD5aDyPK/qxQKQm1sNrcNeUIz0TW1CF2vRGK6A
w9Ed2HvCA001odj10W+x6ogRzh9fi7//6yVwSa9DR008bC5dxsn9K/HdmlOwtLqIM1YJ6Fb44fCu
c7h27hCWbrBE5cgEFMFm2Lf/KhyvaUPb8AY6JkaR9vAKdh13R9v4mxSAYPRgAgWPLuC7336KXQYX
cGL7d/jjwv2wvHgaK3/YDBt/D9w3dYGFhTGMbJPF/D7Cod1ivgwPYPlWW9SNjqPG9xL2HbGEg/kh
HL3gJAb9IcTfNcHe097oYAFgGIbRiLy3AoChXBgv+hgrLyeKA8MItL0II8cMNGY74PCq+Vi/fjV+
PG2PxNpeTLQE4cCXn+J2JTCScBW/22GCwoEZu++/gpkFYGBwAFW5hTi2/SwS2kcxOTKMoeExoL8Y
dsaGuHI/By25tzDvr+ZDx/wqLK9Z4abDA4SGu+Himu04a3IdV89sx7KNerh61Rj6VonoaQqAzi5D
mJkbQdc0AqNioC6Pd4b2fkMYnj2DS3fyxVyMIsXjCvbqPnyzAmASgn4MIs7yMD7+lzU4Z3sdVhaW
cLwfhMyCDDxyPAvtQwdxQtcaV8zPwehmCjrrfKC9W8yXmRH0r8VgTPwrjHSAzqGzMDA4i6tuJfLe
QazrJRzQ92EBYBiG0ZC8vwIghrXW6lo0d8g1+Un0tDWLGRFr4UJ9UQLCw2OQ3zL9/vxoH1oaqtAt
Pzk41omq1l75M8avZWYB6OkfxGBTCW5or8byk15Izy9BsucDXN15CLuPnMIFh1R0tSXi3KrFsPMv
QkdVNGwcHiHQwwbbfncC/uUtyL1/BV+vPgnzqyex74QbSgvdsX+bPi5dPIUDZ/0xIG5fWYQ4/wE7
PHY9hX0HDiMyKwuPLuzHzuOiALzGWwATqMeDQydgYOiPTnFfVYTa4PDKzQjMbEJFhh+uuwYjyt0e
1wwc4evniIPLlmP3qWM4oueF4tx72LddzNeFUzhyPgRDooTkB17D9iMO8L19DHsPH0dsVjrczu7F
Hj0WAIZhGE3JeywA6jWzAMgb3jc4iM7KHNzar4X58+bhm+/24JZ/CDxv34Kjdy5GJkZQFe2EXUu/
wbxlWjAOLEBrSyP8zxzBD/PmY+XKdVhreA8pSVbYO289TJ1v46q1C+672uGaUzz6xRp+TepDnLsS
gM7BMjy8eAhrVv+Ij7//HvNO+6JfDLRPPpr38wWgDyPjTQizvAkHpzi0jo9jrK8NiffOYvk33+Kb
Lbq4k92K9sJEXN2wHPPF9I28ElASfw07vtkIc9fp+XKxg7VLMgbGh1Ce6AZjsxB0D5bgntF+MV8r
8IcFP2CxUaAoLiPoYwFgGIb54KOxBUB54/vkb1H3P/s9cPkbyfL/Pnke+RG5wenTxfn6p75BsH9w
QJwuzi/OO/TkNPF/b2+f8n/l71s/+Tid/KKh0VG0lebC2eIiLpw9ieWHD+LY41JMDvc/m4+fLQAi
Ylp9ymnL6XYpP/LXPzAoDveJeZTz2ytui7h+5bxNzYNyPl6Yr6nLP5uvlqJMOJpfEPN1HEsOH4Fe
UIVyvuR9xALAMAzzYUfjCoAcYOWg9jTisDzuxePlnSP//+lpz87fO33ci5dVZvry/UPDaC3Jxm1z
YxgZncM1zxhUdw+hf/rjdjKygDwpAPLvp9OYjiwjTw/LB27675/M2yvN19T/cr6aCzNwy/Sccr6s
vRNQ2zusnC95uScFQOU0GIZhmFmbFwf6l0WjCoD8wZ2Ojg61pr29DZ2iNIxO77MwOTKI3s52cfyz
88iv9ZXlRP4egPx75uXfVabmqw9j0/tSyvnqmZ6vzs5OZRmprq5W/q3q8gzDMMzsjKrBXlU0pgDI
nwOWa7TyV+5mW+Ta/5N5k3+/ePr7ymy9vxiGYRjVkb96K39YTm69VTXoz4zGFAAiIqIPnfwl18bG
RhYAIiIiTcICQEQfvJoQB+yY/x1++OEHkYXYccoVVa/5/SBv23BdAnweXETO00XfJMbHRjE69gsz
1p4GAwtXxNZNf/cJ0RtiASCiD9wIEq+YQ2+bA7KKi1FcGIcrpudhFPI6PxH2DjSFwtZkJSKapw+j
F5GebrgbJH/79Gc0BuC7rfp4UNQ7fQTRm5mDBWACRWE3YGVlJXIDGfIXbzCA7Owc5DeppxE3Fz+C
u7Mt3IJSkFrTg7HOCkRkVWPquwmJaHYZQoLZLTiZ5k4fBh7dvgADm2CEeTnBytoa1+0eIqVuTJwy
ggJPV1hbXYdHRNrUa3qyA0m3b4rljQ2CsyoxNNKJHP8MtIsV9WFFOkJzCjAs1t5bc/OQmdmByYFC
3LMVyyeHR8jrFpcfrUNwzGPctr+PeNk52pLwwN4K5vq7sevINiR3yisBxnsLYLZjGZbsuoXqPjHX
VVG4LpZz172S0D4+dR4lRQhW7DdBYPUgmtI9cNsnGvJq0JAAO3FbrG89RnF7PxpzglHZMvU7KEPN
SUjML0DfzOmQxptjBWAUKT4nsXr3eujq6kL36A7oG5sguzQLOtpHoRdUP32+d6kNd9avwBH9U7Bx
i0JUWSdaYq/it3tvo2n6HEQ0m4wj2/4iVv1+CXbt24d92zdiyXYThBfmw/u2BYyMjHBqz2actnNF
frY/dLcdgJHhMWzefRKB+a1oyrbBrvVHYHh2HzZrWyIxOxsuhw4jQCyyqu+swP/3+wMo721HuL05
LlsEwsbWCFsPieXTfi0ctb+L0iRX/PvvvsemU9cQWFyOWxf3YN2+Y9DZvhCLVu9AWs/UXI515eDi
hnmYv9kaOUXJOH1KG/vEcm7vnnW47B2FTvn15pIiFGuPmOKOvzcOHNoBY0dfdLbmwdzWBCfPGMFI
+xCM7nnjocV2bLubIy4wivizh6B3zQtdsuMQTZtTBWCgLhpHDpxGyIyRVpEXjbq6LJzSM8BZvyLl
Z+MHnrxQMIH+7k50dvWJl8D0MYN9ys+r9w0qfzx/yvig8rjO3ifr8BMYHRtRXrZrYGZlnsRIbxIu
/vkSElqe/cBQQ6Qlvjh6F1Nb8iYw0COm1dmNIb7YiGaBMWTcMMfBZafgdPcu7t57iLh05aZDsdJ8
DUd2bYfW8k/x48GTyIh/jCUrlmDPKUMEppaitLYHjRFX8PuFa3HC3BrhGSWob+tCboorbj1OxKO7
Nji8VRtBifEI8HSBj7cRthmYok459RycvHIG1g42WL7TDtXyqKr72HX+Bgrl353huGmyCTGt8oDU
jeC7znAOaEDxow3YYBU5dXTtXSw1tERmy/SyqC0Wq+b/Hn/1N/8AXb+p9qDw3Y2/+v1n2LBtO7av
/ha/3XEOEWnROLvzAdq6cmF/1RmRRTOWeUTCnCoApX76WHZ1+kUx01gJDE4ewDcrl2LJ999g0yUv
DI6OoSrSHiu/F416/gqceZwjbkQ5HPfvwKpVK7Bsqw5i6wfFeD2A4HvnsGbNGqzWOoWAQgUq4xyx
YNMu7N0wH1+uPomo2l4x9EsDiLm8G//w//47aO0wxVlbC5iF16ErzQ5fHr2PnskRNOU/xsEda7Bm
9TqccIpC77DygkT03gwj0dwedhdSpg9PGcm6jVVGJoguq0Nl6BUYnddBQmkJ0vPyUZbmhqPfrMKl
u0XoqM9Ccn4Z8sOvY/vHm3EvswWN4rjr23ZC3+Ue/N2uYP8ZCzhahiEz9hS2nDXF1N4FhTh51QQW
t6yw8pQTysUxvUliLd3CCg3yZIU/LPU3I7ZNHpDa8Mj+BhwCFchzX4Gd9jFTRyseYZGRDdKbptco
miKwetdR6BsbQ3+vHWrFUbUeG7B4pyFSKutQV5mHsPQ8tHS3Ic3NDKY33ODx0AONU5cmempOFYAi
z2PQck4Q69gvGC3BqU3rsc02HT2dRbhjuhaPQx9j7wl9PCrtx0B9OM5ePIybjubYvHMXzG45wzc0
DjEZzWiINsJvVu6DhaUlzI8sxbxTVvC8boDfrbiE8qEBZNovwRWf+On39ycxPpSFq9+ZI68kHRfP
6eKodyW6M+3xzWk/DDRFY+uuddisdw2WZqfw45rlMEvqU16SiN6XIcResMBlnSD0Tx8jDZd64tih
Y7B0vQvbU8uwbpcOfAIscUr7FFzvOEJn5WE4uxchLVwbhw5fhsttK+z5Thf+6W0YH6nFxTWfY4td
BLq6EqC19GsYeYphvy8bevqncOLqLdhfOoIj164hPfw2PtlxDXliITLZm4ezJ/fi4BVrmB9eheXz
VyFe+Qa+1IsQG31s0rJGarIvdp4wgOmtW7iivwl6dx6h+ckGygY/zNt2Hj6F5fC98gOOmEVAUROH
o2v346TdXdy1PoetFndR2D6GzkpnLP9xKzwC1fH2KM01c6oA1MeLJq3v89Od7YbzcfykPkziOoHx
KjGAb4W1eCEdu3ga5crSXA8TO0tc9E+Fh+15HD+2HXq65vBLbUHMzc/xxbINOHXyJE7pG+KKdwKi
RKNfeD5UOenCOz/C1CduxnUWwWbRdZTW5sLsoj5OPq5Cd4Y9FpwJRXn6DWxZ9hts1T6Nk6f0YGRx
B0kNUzvhENH7Mo76pHSkRFU9fStwyghyXKyhq6MNneOncN0zFn0YQ/y189DROQpDJx8o5NrGeAMe
nTkpjjsGc+94TG1070FKQjQCC+Xo3YOcoNvIaZ3aTjheE4kLutrQNrBCtFzt7s6Dc2A6WkemtyOW
eOKirg6OnbgCt6gAKGYs0NpzA3FF9yriagbRkuOGo9raOGrpjeqZ+zf3VcAjIA7lYtEyXB0Pl2uu
qBgW60Hl/tATt0X7lDUSxOWVZ83yxukVh5H4y4tX0kBzqgBM9Nfgmu5anPLLVf4QTl9nOQJuGSE5
Nw0njp+EYUSLeE2XwfXKSniH+mHfCX14FveirzYUhhcP4uIta3hFp2BirBHXf1wLXYN4lCZfwY/b
naZ24GtJgY1fCLwdzuFrfT/lloZch8W49Cj2WQGYyIPFt1dRVJWFS0ZTWwC60m7g02Pe6GmOwNFN
B+CQKV98/QgKfgDPfL7yiEj9+nI8sHLFKlxxrvrpVtNZZEL0IubN82vMqQIg9dZFwHDfp5g/fz7m
f/sVLnkko7OnEqZXzHA9qUPU4Br43NyJ6KYxNMbdwqof5D4AP8IooACdLZm4tn4Jvv3uByzedhqR
xQOYHBuE75V9+ExMb97SvXBIKEVe+C1svhapfNGUeu7FrbB0PH0rf6IMd7Y5o6K+CLdumONKeB16
8x9g3cXHYsgfR1O0C9Ys+lJc5/fYYuaDuu7n1zmIiNRhrKcROUUl6JzNo7+w5n4D/upCOf4/FyqY
V8z/JvL/M6nA31ypQEHLm+9oNucKgNLI9Mz29OLJjvbjExPTbWgSExPj0413EoPy9/p7B56eb3J4
SFxXN/qGZ+4RO4peOb3+J8dNYGy6Wk3KaU3OrFli+uMTmBTHTSivU5w2OYFxedz0OUYG5Pw9+1U/
IiJS7V8tq/AXOgX42KoEH8lYMr+Uz66X4v80LsZfHCpAesNP3hR/ZXOzABAR0QfhN1bV+J8mxehr
qUN3cx06mphfCrrrYRxQgb84WIjMRhYAIiKag/5FFID/cbEYTfW1aKirRZ38aXHmZ9PfWgf9xywA
REQ0hz0pAApRAOpFAagVAxzz8+ljASAiormOBeD1wwJARERz3vsuADU1dWJg65ga6Lq60CX+72xr
Uc5LjYrzz4ZoVAFQ7mjPMIzG5tdSNU1NzWzzfgtAA5raivHonA5WLV2KJUuWKLP7kgtyq5qhaFB1
mfcfjSgA6Zk5iIpOQHxCKsMwmpjEVMQlpCA8IlYsrDqmlwyvLj1jahkip8FMJUzcl1XV8hcEZof3
WwAUaOlKhcnnm3H4tCXue3vj0X0zaH2zCzY+GWjuakdrYz1qamrRoGgVhaABCkUT2lrb0N7RifYW
hXKnPNXTfnfRiAIQE5uE1rZ29PX1T33zH8MwGpVekYHBQaSkZaK6euo39l5HVEyisjgMDg4x0yko
LEV2Tv70PfT+ve8C0NyRAvOFRvCOe/L8asHtrTtw3j4AWcW5iMspEwN/PQozIpGdX4DM7DQEB3vj
nrMj3CPyUScKgrpLgEYUgATR/uXg3y8WAj09PQzDaFjkgmdycgK5eYViLez1f9BGrvHKQY+eqayq
Vd6fs8V73wLQmYmr36/BynW7cey0Hs6c1sWR7VaITkyG481TWGodg8GOZjw0/hIW9x/i/JHN+Kev
lkJr00p8v2kP/PPqlAVB9fTfTTSmAPT09L7SzDEM8+Glq6sL4+NjyMkteOMC0N8/85d0qKKyhgXg
aZ4VgFXr9+G08Wls/HoRdK/7o6O3Hs7WulhxI1YUgBY8MpkHK7eHOLdPC8vOh6JnoBXuZz7CpcAy
NDc2qJj2uwsLAMMwH3xYAN4+FoCZefIWgAHcwkogf8atL+MeNumaIzwtD/ft9LDGLhUY7YCX4TxY
urrD6PRRbLOLR0dTMZz0Pod5SDkLAAsAwzBvOywAbx8LwMzILQDJMPnzEdi6J6GuvQ2d3QWwWLcb
lx19EeBuhk2bz+C+9x3s/+zvcfGWO/R0dmOVRSTam4pgd/TfYRJYjhYWABYAhmHeblgA3j4WgJlp
QGNLHrzO3UZgTC7qmhrQ0NSODJ/zuObuh/yMMFzavQxLlx6HoclRPI6Pw/3b9rj2OANNjeUIuqMH
r+RKNHIfABYAhmHeblgA3j4WgOcjn1dN7S1QNIpBvEYcV1ODhuZ2tDYpUN+gQFuXfC62o729Uwz6
jWhuaUFbUz1qauugaOlAU4P6vzCIBYBhmA8+LABvHwvA3A8LAMMwH3xYAN4+FoC5HxYAhmE++LAA
vH0sAHM/LAAMw3zwYQF4+1gA5n5YABiG+eDDAvD2zcYC8H+bFKO7qRbtilq0NjK/lImuOhj5a0gB
kF8JKhcEDMNoVjo7O1kA3rLZVgD+zboa/5dxMRLyaxCXV4MY5heTXVqDfR7l+ItDH3gBGB4ewcTE
OMbHxhiG0bCMjY0qlwX5BcVv9GNAsgCMjo5NHyKpprZBFKrZUwD+4Wol/mJXnhjMCpjXyUGRfflI
rZffX/hmZnUBiIiKR3JqpvLJmiMaK8MwmhW5pirX/gODIlBX1zi9ZHh1EVFxSE6Ry5ACZjry54Dz
8mdPAXBK74ZRSCvOhLcxr5qwNhiK/41EFL1vXnBndQGQP+Mpf7lK/nY1wzCaG7nWKrcGvi4uQ34a
uSWlr79/+h4iTTarCwARERG9GywAREREGogFgIiISAOxABAREWmgWV0A5E4/Pb19DMMwzFtKb18/
xsbGp5eypMlmdQGIi09GZHSC8vsAGIZhmF+foOBIFJeUTS9l3z/5ZU9yEFIoFMxrRN5nzc3Nosx9
oB8DjItPweDgm3/LERERPU9+LFJ+H8BsERkZidDQUMTExDCvGR8fH3R0dEzfk69vVheA+IRUfo0n
EdFbNNu+CjguLg4VFRVP12qZV4tc+4+OjlYO4m+KBYCISIPMxgJQUlKCuro6lb9897ZSI9KgaEa7
WGOWa83tzY0qz/f6qUFNXSNam5vQWP9ub8PMNDQ0ICoqigWAiIhejWYWgDoomhWoyIuDm5MjHJ1u
41FSGTpamlSc9zVTV4/68jxExacir7wa9e+4yDwJCwAREb0WTSwA9YpG1ORH4/q2zVjy43qsX7kM
n2ttxfWgTDSL0+SgLa+/rm7q/FN/v+Q45TSfnV7f1I62ZEd8seYYnBJK0NrS+PQy7zIsAERE9Fo0
rgCINfTmlhpE3TXB1jXWqJQ7zQ/1Ii3oOm4EpqKlqQmNDWItvr5B/D9dBurlYRFxWB5XJ6ahaFIo
zyfns0F5fIM4vQGK1i50pDrhm40n4ZJUirbWZuVpdbU1qufnLYUFgIiIXovmbQGoQ1NLA7KDLbHw
nxfgmL0vsvJzUFLTiaG+HpQle+HQlkVY/MMi7L7qj4aKeJw9uAHfi8PfL1yFk7ej0Jjvi617NmD+
vNUw9M1HTdwdbFj0Ob78fCH23Y5BZ8Z9fLduM1b++AW+/GYF9F2iUC+KQL3K+Xk7YQEgIqLXopH7
AMi1djHQZfrdwK4Vn+KrLz/Hn7cYIDLRH0e1N2H5IUPYXNDF6tWLoe9bjJpkT9hcs4ChOG3z/p0I
8nPFJ3/YgMuPU1CV7om9+/fAwCUSaWH3YHzxCHwfOWPRV8twwjkKEXfP4MTpnQgp7kNro4p5eUth
ASAioteiiQVAfgKgqbUTfd3tUNTXQ1FbhnvXdmPeyjVY98N/w7fLN2HjunXYtPc0nALj4Gi+Az+u
3oD1S77Adxu04O/3APO3nkVwZR8q/fWhtX89ggr70NfVgc6eYfSk38Y3G3TxIKcD9XHWMNTbhMf5
LADPYQEgInq/NK0AKN+/ry1H4F1znL0TjSYx1nS11sPPdh8Oax/DjvXrcTmgAZjsRFT4I9hcPYFV
J88jRgH0ZjvDUGc9vB7dwzdaevApaEFHyi2s3b4dN+Ma0V2bAbc7VxDs7YCFWrpwzWhCZcRVGJze
BL8CFoDnsAAQEb1fmrcToNxprx7Z4Xexd/P3+HrBfMz7+kt8fegs0isbkOJqju+++hPmz/8aC/ab
IjA3Cnb71uKbrxfgy4//CZ+t2IPQIHcs2mUE3+wqdLc2IszFBN/P/wLzPv8aq87boyT2Lpbs0Mf9
TFEAoqxhbLgTgQW9LAAzsQAQEb1fmrkPQD2aFPJ7AJIRGRGBiMhIJBVUo6mpGc2NlchKjkZERBTS
8qvQ2t6E8ux0xEZGIDI6DqnZhaiqLEduQTEqqmtQW69Ac10Z0uIjxXTikV2hQGtdOXLyi1BeLW5D
ZSmKiwtQUVM//ZHBdxMWACIiei0aWQCUkTsCNim/QlemqbFeHCcGdOVH/GYcVyO/N0AM8k/Op5j+
GGBjA+qVn++Xl2lA0/TpioY61Mw8XZwmPyZYz48BPu91C4D8MaChoeHpQ0RE9GtVVc+uHwNSXwH4
sPLBF4DYuGRERSciMSmNYRiGeQuRPwdcVFw6vZR9/2QBKCsrUw5oyi/fYV4p8seTPugfAxoaGkJX
Vw+6uhmGYZi3ke7uXoz+it+Qf9vkzwGnp6ejsLAQBQUFzCumqKgIgYGBaG1tnb4nX9+sLgBERPRh
y8/PR3x8PJKTk5nXSFJSEhITE9Hf3z99T74+FgAiIiINNKsLwKTI+Pg4xhiGYZgPMnIZz7x5Jifl
SPlmZnUBSEnLRGRUPOLik99uElKUHzFUedocydT8p/zkeE3Mh3JfxIvnpXxuqjrtvUXMT0KiiPyf
UWv4+n71aOryMCY2CdGxiRgdfbN9OmZ1AZA3rqurW9y40bea4eFhDAwMqjxtrmRgYADDIyMqT9O0
KO+L4bl/X8jnpHxuqjrtfUXuiNvdN4iu/hFGjekeGMHIiOrHhPlp5DJgRAOXh/I5EiUKwODg0PSo
+XpmdQGQrU4uFN82+UTp7OycPjQ3dXR0YGwW7cn7Psn7Qr4Y5rpu8RqQBWA2GejvQ1lTN4rbxlHS
NsqoIcUipe2jGH/zLbsap729HRMTE9OHNIvcSvfBFoB38U2AciH7IRSAD2HQexvkfSFL3VzX1dWl
XOOeTfr7elEuCkBJ2xhK20YYNaREpKx9BGMTbACvShYA+X64ppFv/7MAvCYWgA8LC8C7wwKg/rAA
vD4WABaAV8YC8GFhAXh3WADUHxaA18cCwALwylgAPiwsAO/OywpAmXj5NI4BzSJNIvV9QLkYtGae
5+l520eVA5qq05ifhgXg9bEAaFQBaEaolx+SSjoxUBsOvc0bsX79eqxfpwPHuKrp87zcSwvAWC3c
Luhgg5yWyHHrOChm6XNKdQEYQlFiENwDipXfoaApXlYAFGnuOLxpw9RzY7MhHhW8r8LUigifx4jM
ap4+rNrLCkBnwWOc2DT9HBcxC6wQx3Yj6hWm+Wv9tACMoqJrAoUF0dDR2oTFP67BohW7cPp+Jop6
gAox2D8/oI2ivHMc5R0vHs+8LC8vAOOoirmNvRunn9PbjRFY9tPlpiZiAdCoAlAME219OIVVoC7Z
Bku/14VPSAhC7jvAcOdyXA6QC8iXe2kB6I/DvuXbcd7xMUJC7uP4vnO4HfbLheKXTLbEwdw8EO3T
h98G1QWgF6EOxthvGPaaBaAVAfc9EZnbMX14blFdAIaRdPcslq42Fo9lCB7ZXcBObU80TZ+qXs2w
0dODxcPi6cOqqS4A4yjwu4TFi/XwWD7HRQIDffHgnhtM9M/A0rNk+nzvhqoCUNkzibQoO8z7ej/M
vUJwz8UFxzf/gL12SSgWL6tq8ZJtHJ5KW28dbljdhl1oPWrETSsXp9eL/xtFqjtZClTl5QWgF8HX
T+DHLVemnge2F3BklxbuZPROn/6m+hHr44PQ9J9+p3xXWSjMbBLFX03wcfFCUqmK5eYswAKgUQWg
DNf0LuBeVCWq0+7gkF7g9PFioRJxDTt238fPDWUvLQC98Th++AaKpz+J5XP0BExvpmKorQRx/n7w
8w9FTu0AxkZ7UVFRgoTYVBTXK1BXGgM/P38kVslpjqKhphrl2fHi/MFIq+hAZaQ5vv1qJ9wzFXhb
H1RRXQD6EOVqhhOXo58rAKOdpYgK9ENgagmePE36GrIQGiCOi89CUX09yopKUVnbgNraapSkRcEv
IBy5DXPjp5hVF4ABxHtYwsAmf+pgRzCOzLuAYvHY1aRGKB+voJgCtMsHZKIN6bFBCAzJQpvyU6ed
yEoIRmBQFjoGhtBeVoWa5n4xFA+htbQDY+KvjtJatHaJ65xoRWaUP/wj0tAhXo3jwx0oKS1CXEw6
qlpaUZkXiZAgJ+jsO40byjX3l1NdAEaRG2iL45dTpg8LffXIy42FlfEF2PnLgtqOvDh/+AVGo7jr
7W7lUFkAuieQGu2M9XvuIks8RdrFcjczxg4rV9siTtGJhMgw3LznDceAAmSUpopSvQKrTvoiS24h
aCiHx0Nv3HyUhLjGMVR0ct+CF/PyAtCFIAdTnLXNmj48gDBbQ+gYxoq/R1CbEyae14FIrpletvWU
iNd4IKJSqjGinNQ4yrPkefyRVN4mlhEDqK2qRJp4PXg/jkW5ogk11WXi+SyWdSEJaBgeRL7XKXw5
/wRiy6tQVFAKRfeYmEwLMmY850fFc766rASZcSHwC05GtXic1Y0FQEMLQE2aM/Yf9xJD35Seykic
X3sWaT9zf7y0AAym4vjKNdh53BgXzutgzcHzCBOrNCNlgTDXPgydw1ux9aRYUw5ywKqvlkFLnH71
4jmYmx2Ajs4B7Lx0D7GpwTi2ag02bd8DrY2LsXLbJZie3o5//c1nOO6SIQaPt+NVC8BIWxbunv0a
K9ZrYfGaNbiY1aR82+SazudYu0ULKzZuw5ZTV2FuaoVbN82gtXg9dh06CK1VC/Dj3jsokoPcLKe6
AIwi6+E5LJy3DRcuXMABnV3QvpGEsREFEu2NoK1zBJu1juNqaBGKHl7HztVrsW7RVpy8FIkMPwfs
Xb0aG5Ztg57RAzifOQXjG9Gi6N3Fkt/tRmZfC27tMMAd/xTE39uE9Zs2YNPypTjkE47MYCss+nQ5
dmibwdpkK/YcWIQD21fgn77ZhkvhtdPzpprqAjCB8hBz/PDFJhiK23Hpsht8fG6KF5wFTK+YwTGw
CBXh5jA4LZ6fJw7jgHUQytvfbGGgys8VgLU7HJDQNo4qscAvqk7FiWWn4F5YDe/rxti+/xBWbTmB
PXoWWPnJb/HblRYIEaXJ0+YYth3SwU6R3TYJyGgZRQXfHnguLy8A3Qh2uIzT1xKmDwPlAXdw/qgD
0jIewcpwl1gOHcQOE1fEV5Qh0kgb67dtwpKv9sHerxxlMWbYvXIhtLQ2YvWSk7jrchVrv9uEvXtX
49PPtGDtcgM7l+7C1u1a0FqxGFq3neFotAa/+ZdlsPd/BJMzV+GTWIhU143PPeczxHN+yaersP/Y
PmxZ8D12X4pHj5rHYhYAFgAlWQCM1/y6ArD1iB6ML1jgYY5COWBPduXgrqU5jmpvxEff7oWteBHu
3GQtXo7d8Nj/Az6avx5Hjx7C9x9/ii2Hj2PbRgM8yJUzoIC9rgGu21vjxJmHaFFeydvxagVgBLmP
zbBP+xrk70X1p1zHxhM38fCGPk6aeinP0ZR0F2dOm+HyFUvY2VzBtvVGiFLeNVkw2H4afnPgbYGf
KwDffbsF54yNYeIShDLlBo1elMZ7Qv+oNrSWL8RGEw88NjuGNdv24Za3H8LEGozf1eNYvWkn7Hx9
EPg4B5l+4vJWTgi0PIZ5q/fA6YEPbGwd4f74AY7vPoFcuRWhIxBb9p7D7RvG2LXNWdzzDbA+uBv3
MuX914nL+nq4+rhczsBL/VwB+P7zDTgrb8elB/DxtlMWADMzSzi4OOPwN3/EAi1tHNXZgH/7qy9w
JaR6+rK/3usUgOOLT8Ctug1x4V44fFAHPy5ZiOUHLkPfxBKWAQ0oyHLDN3/5j1iw4yh2an2Pv/zr
H2GT3iMuP4myGQOgpue1CkDQfZgdOQ3tbUvw50VaYjm0H/N//xF2mjnBZON67L56GQ9cQpAQHgj9
/bvhmTT1RmRLbDzC75li/UoT1HaUw93SCtaWV7B3ixXS5etkPBn79xvA0dUep85HiCPKYKp7WTzf
bKGz9xTyZjznncVzfsOWm2JpJ9S5Y8+WqygdfHHe3y0WAA0tAC++BVATaYU9e91+9v32lxaAvngc
P2CJjLbpw9JYPq6v3gHTm0GICL2FDRtOwdbJAtpGIeLESlz4fim26t9S/qZ1aGAQUuLv4sChG8hs
kS+AalgbiTXB61dw6OSDqRfIW/KyAhDpag69a6nTh4EMT3McNIpU/j1a+hBHDlzEVVNjXLpTqDyu
JsoJZ/TMcUUUgJs3zKGtdx/18sU9moHTBy8hKH+uFoABJHhcw6mrz+4L8WAiy80cJ1afQUBkFJzO
H8bWs/5orstGpP8tnNXRxkEDd5RWi8OBjjA+fgR7T/ugtcEf564ew55dVvAL8MPptVo44+uNhHgf
7D9wWwzvctLJOLHXGDduXsHxy3IBnQ6dHRcQ2yhPbMctQyPceFwmD7yU6gIwhrygG9A2jp4+DNTG
38FpXXOYmVuJ0mYKrc9W46J7oHgOhovCEopC8fp6W37xLQAxu+IkZMU6QmvnDTg6W2CPWLu09YmA
qeExbBDPoWMGV3DVvxYZkTb44h/W4YI47b53IG49iER09SDKO55Mm5F5nbcAIsRhYyNrnFy1BruN
naeWQwFBSCupRVluHAI9r2L/ppOwsBFr/0euIU3x7E3IfrE82HvkPronquBoYgar6+Y4cuIOqpRX
W4xzR4xhbX0ZhwzDxOFyXD15Gba2Jtijc1/MiTD9nLeRz/mL4cqVjpEqb+zdZ48KFgC10NACUIxL
0zsB1sqdAH84icdhYQh74ICL+1bhdvLPD1ov3wcgBvs2GyKk+Nm8TI7m4sIXB3DBNQ5Zfrb4fMFh
XLS9gF2H74t1yTEk2RzAcR0TpKTEwN7xHjwf3caBPZcRWyu3HVTgynEjWNhewb4tJ+CZWPX0Pfhf
S3UBGECUgx5WbDBBqLw/wqIQ4nsThvsXw9Y3DA7n92OnSzzKIyxxaOcGuASG456xDo6fugzjc5dx
7ep57DhghzI5lo4k4cjWM/DNeZu7Lr4bLysAsa4XsFuUw2eLhRGk21lg5w9XEJ6SAusjezHv7D1E
2l+FyekbuG0rBitdQ9yysMIVXWvcEWtb+3eYiGdbP25v+ncsOOKL3sZibFnwOTY/ysTQaCXsDs+D
8T1/BN84jfXn7fD43lXsOeYrrnMEoRdXYd9ZC0T6XsPShYtx3u/ndyh9WQHI8TXH1sOe4hZJkygO
t8ORQ+dx7twF2HhE4qHhRhhbeiMlzRfnzR8gVa6SvyU/uxPgNwdw9VEY7ru64uTWZbgQlg+/mzew
5itjOESlwPjQQfx5twnOnNXGjlOPEF0QD72Ny6FvFyuKlCsOGvsgtm6I+wG8kJ/bCTDoui5WbjUV
r+0w5U6Aekf2I0wxhJTre3DihLlYDkWKEuoCn8QEeBw9DWsnT1w9cRBnrZzhdGk3Tp2+Ji4biKtb
T8HM+ATW7nFFx0gpbpw5D/Nrpti17DDMPMSy47YxVutdQ2DILexefw6p+aHQ07mAuwEhcDj9A86/
8JzffeyReMaLV1jpA2zebInSARYAddDQAtCMEM/HSCzuwEBtGE5tXI91a9di7dojcIitnD7Py720
AAyVwc3ZH4XNz19nY4Q7Tqxfh927dmD/BTdEJIbinkfK1NsOY63wtToornstjt5LQktvFR66BKKs
Qz4ZWxHqFYD4/CT4mR6G7gU/zNy48GuoLgATqEt0xf4N65Xzs3b9Dlzyz0RjkjX2bFyL9XoP0KB8
jQwi1d0CBw7swbz1a/CDoStCAkMRGRGEu25xaJHdZaxS3A4/5Na/vbXJd0V1ARAL0ZRg3PfNf37H
y856+BhqY5O4f/YcNYKZfxmGFPm4tU8LGzfvh0eheCE1FcHp0DZs3LQbrulTZTLP6woexJSL+6UL
AYFeeFww9aZTf7knDPeJ+3qHKTLE86atNAauDzOVbx2hOxOXd22C1p4N0DOzQ3LBzxdT1QVgHPW5
4XDxyFQuYGUBaC6Ow0OPQAT4ByAuTzyPu/JgcUzMw+YDsIqrfmslU1JVAJ58DFB780YsWrEaPyzf
iVP3MlAiXjbV1XWwP62DpeL4dXvP4OT9JESFW2HbKj3cK+hFVqo/dm8Ul9lqgGuJrSgV05KD3YuD
oCbn5QVgHJXRTtg9/fpet+0cAp7slT+sgKf5XnH8eui6JaJdjAydcV7QW7cBm05eRZbs8QPlcDi3
RXnZEzahqG3IwIN78egba0GMXxDCApywb+dmHN+zBms3GSCoVD7H83Hn2H5cvvEAD/zCkVfbi+E6
Hxi95Dk/1pIGZ+cotEztdag2LAAaVQB+nZcWgDlEdQF4NcP1pbh14ZRYY9DByuO6uJj4tmrJ+6G6
AMw9qgvA+/XTAjAV5RcBiadf03TkFwEp38cXxbd2eOo4hXhIGsTxlT3ibzE6VHWMorx7+nLitNpu
rvmryssLwDvW6IvtW29MvwUwt7AAsAC8Mk0vAGNdzYgL8IKHx0MEppUrdxCcy1gA3p2XFQDm3eV9
FYDJoTaUljRgYA7+DCELAAvAK9P0AvChYQF4d1gA1J/3tgVgDmMBYAF4ZSwAHxYWgHeHBUD9YQF4
fSwALACvjAXgw8IC8O7IAlAmCkCxKAByYGLefYpFSlkAXgsLAAvAK2MB+LCwALw7sgBUiAJQKgqA
3MmPefeRWwHkLyuyALw6FgAWgFc2Ke61iYnnPhw258j5l7eDPpz7YjbejsnJCYyNT2BUvFxGxYDE
qC/06ub68vxNsQAQERFpIBYAIiIiDcQCQEREpIFYAIiIiDQQCwAREZEGYgEgIiLSQCwAREREGogF
gIiISAOxABAREWkgFgAiIiINxAJARESkgVgAiIiINBALABERkQZiASAiItJALABEREQaiAWAiIhI
A7EAEBERaSAWACIiIg3EAkBERKSBWACIiIg0EAsAERGRBmIBICIi0kAsAERERBqIBYCIiEgDsQAQ
ERFpIBYAIiIiDcQCQEREpIFYAIiIiDQQCwAREZEGYgEgIiLSQCwAREREGogFgIiISAOxABAREWkg
FgAiIiINxAJARESkgVgAiIiINBALABERkQZiASAiItJALABEREQaiAWAiIhIA7EAEBERaSAWACIi
Ig3EAkBERKSBWACIiIg0EAsAERGRBmIBICIi0kAsAERERBqIBYCIiEgDsQAQERFpIBYAIiIiDcQC
QEREpIFYAIiIiDQQCwAREZEGYgEgIiLSQCwAREREGogFgIiISAOxABAREWkgFgAiIiINxAJARESk
gVgAiIiINBALABERkQZiASAiItJALABEREQaiAWAiIhIA7EAEBERaSAWACIiIg3EAkBERKSBWACI
iIg0EAsAERGRBmIBICIi0kAsAERERBqIBYCIiEgDsQAQERFpIBYAIiIiDcQCQEREpIFYAIiIiDQQ
CwAREZEGYgEgIiLSQCwAREREGogFgIiISAOxABAREWkgFgAiIiINxAJARESkgVgAiIiINBALABER
kQZiASAiItJALABEREQaiAWAiIhIA7EAEBERaSAWACIiIg3EAkBERKSBWACIiIg0EAsAERGRBmIB
ICIi0kAsAERERBqIBYCIiEgDsQAQERFpIBYAIiIiDcQCQEREpIFYAIiIiDQQCwAREZEGYgEgIiLS
QCwAREREGogFgIiISAOxABAREWkgFgAiIiINxAJARESkgVgAiIiINBALABERkQZiASAiItJALABE
REQaiAWAiIhIA7EAEBERaSAWACIiIg3EAkBERKSBWACIiIg0EAsAERGRBmIBICIi0kAsAERERBqI
BYCIiEgDsQAQERFpIBYAIiIiDcQCQEREpIFYAIiIiDQQCwAREZEGYgEgIiLSQCwAREREGogFgIiI
SAOxABAREWkgFgAiIiINxAJARESkgVgAiIiINBALABERkQZiASAiItJALABEREQaiAWAiIhIA7EA
EBERaSAWACIiIg3EAkBERKSBWACIiIg0EAsAERGRBmIBICIi0kAsAERERBqIBYCIiEgDsQAQERFp
IBYAIiIiDcQCQEREpIFYAIiIiDQQCwAREZEGYgEgIiLSQCwAREREGogFgIiISAOxABAREWkgFgAi
IiINxAJARESkgVgAiIiINBALABERkQZiASAiItJALABEREQaiAWAiIhIA7EAEBERaSAWACIiIg3E
AkBERKSBPvgCMDo6On2IiIiIZopPTP0wC0BkdAISEtOQkZnLMAzDMMyMpKVnIygkAsPDI9Oj5uuZ
1QWgs6sbdfWNqG9QMAzDMAwzM2J8bGtrx6R8L+ANzOoCQERERO8GCwAREZEGYgEgIiLSQHOyADTG
3cOBHxZhyZIlIouxQ/cOKsenT/y1JicwPj6BN3tHRVONIOOuPvQuPkDzi3fc2CBSH51GcOng9BHi
Lu6pQYT7WcQrpo8Q93ZDcjQ8TGPQPX3MK+vMhImtOxIbnk2faLYZqI+E9f6TiJ1+zvc35sBD3w/1
UwffQC1cd2/G4sVyGSiyaA/uprdMn/ZrTWJifBzjEzNfzIOINdOBtWsahpWHe5Fg+RARsbVcVs5h
c7AAjCH9uiVOrLFEYm4ucrOiYHblHPSC3vylNNN4axLMzELB7RGvbrK1BEEWa7BQ+y7Sy346hIdb
fAab5BnHj9XggcnXeFA6fVgsQoq97sBopSteexE2OYi2zh4MjE0fJpqF+ss9sOh//Z/YdjdNLMGA
vrJQGH1ugcKpk1/bxEgWLv7hCJyj05Arl4OPLbDs4iM0v5VPTbfD/64bfOObpg9LPbi/5gv8wx8P
IE25w3kX3Dcaw/FunvJUmpvmYAEYQarNbdgbp08fBkIeXMIJy2DEB7nhloMDHO74IK1hXIzmCsSl
hsPN5SESGiaA4VoEuInTHR4grlKuMbYhOS8HUY/FcS7+yG8bRWPkeXz11RY4Jdax2b6SSdRmRMHJ
3h/xD53gGZ0ztYYw1oK0ACfcunkdOls/hmOeWOwNlCP8oSPsLc7hwO7v4VutnIAwidLHD3B5szta
p4+Z0ovMkLu4dcsBfkU9U0f1FCJYPIa3HJ3xKCIN3b3dyC+pQkf/IFqbKhCVEI5HLrfgGlkFfoME
zRadJXG48sVuGNpcR1xhL4Zb4nB5oQ1K5In9VfB/IJdL7kiqa0dLTj7KKsTzfaIP+QVxKO4Qy7KR
VuSE5aN1dGqpNDGUDauFdqhSHhL6grBF+zpiEqOUrxcHsRy8F1WFCVE3Ghpz4PvwAdwiC5TloznL
T3m6U1C+eI1MoKWpHFFxIfAUrxu3xEYM9Gbh3KaVWH/CHXV9TzattsFruynOH9kNc9dyjKMPPrvN
4OZZiPa6NDhMX+ed0GIMjY+jpasUEeFBeHjLCb7FTWjIFtfp7If8+qlXZVdhmPL8jt7JaOcL9b2Z
gwVgAgWu5lj3u2XYf+QIjuzbhqVahvDPzYOPkzkMDM5Ad48WdG1dUFfgi48/+g6rDl+CV24ZfHzt
cejUGZzRPQxtazcU5vji22+WYLOYzsEta2Fw5z5iPQzxpz8uxPnHReKa6BeN9yM15BpsE8VqQYs3
zls/RnNfF7L8LbB83Xpo6+zAgk9/B4+cRoQ46WP55p3Q2b8K87+dD/+66WmoLAC9SAlwwLodO6Gt
fQAbTh5HVkk5fGyPY7nWHmjvXoqv5i1GfFocVu49h5DSegRZHcRffbkBZ/S1sXarFgLlQpRoFmgv
CIelljPCHt6Cqc1jFNWk4tqSW1AMN8DHy3Z6uaSDk3IFRu8kbDyy0duSgvXz/gd2+4pXhcITe3a7
oHxoaqk0OZ6Pix8txtrdB3BELL92LNmAw27xKIh/hNP6YlpnzmDbvl1ILMnDDb2t+NuPN+C8azxK
C2Jw4sJZ5ekHj5/Co9RM3L2wB3/37Sac0dPGpv0HEJYRBr0V3+DbbbYo7nyyaa0VD7dbwO1+EBxO
XERwRzNC91vA3asQTcXBOK03fZ27tyA0Jxt3rx3Fv317ABe1tfDld+tgdNkEe1Z8C4Nbj1FTXYKz
pkbK8x8/fAgWotj0cQveezEHC8A4cm9bYt93R2Dj6AhHJxeExjUoT2nPuAXd/TuxdeWXWL7nENIT
Q7B4k8VUy652xTdf/ivmrd2FnVtW4rOlm+Hg4Yp1m/UQKrdO192D1TUdpJYWwuScLzrlZegXjfdU
4v7pA/CuGsLAQDVuHDZAcHwM7CxPwipr6jyR13/EXV9fnLt0Hn7KrYp1cLu4GF4VypOFnxaA8eZ4
nDm6HLbTWxiTPU9j03kzGJteQbjywSnFXdN1iE6Ox2bty4goq0OA1TH8YByjPH+u/de4Fvm0YRC9
V+0Fobi01BVNY2Vw0jaF6wNPWGt5o7jEBQu//lfMVy6XfsRni7VgG+QFJ68wJCf6Y//aPbD3Ckaq
rw3upJc/XSmZHMvD5U+3QM/yJhzFcvC2Syya5UbNoTr4XNuBnTt3YfEXf4WbwYm4rq+H/Q9qlZd7
dOb3+N8/WY5dO3di/Xe/x+ILd+B4/ihWmqcqT0+znYe7aQViZcoF98OnlqtTWuGuZQafiBIUJrnC
7NI9uB6/AQ+vSnFaL8Lt5HXuxPLP/jtMPSPhZHkJu+/Lt2WbYf3ZHnjLP8Uy1sTuOmzOLcP//afv
lfOgtfgP+Ldjzmh5s++xoV9pDhaAUaTdcIKNQdz04SkT+W7YYHgWvpmlKA4xh+E5baQkBGPJURsU
iHY5mHkVG9b9COeoQpSWFiAuJQ3FyQ+w7IglEkUBGM69hWvWp5GcmyqaqRfap6dLP2+46iFW/+Zf
8blYo58/fwE++91vsfu8HezNtuKxcoenUYSYr8J1ZzuYmZ9AutzcN1mKOwaLnisAJb5uuLrDH0+X
A+2xOKPzHVzLpg5mBlli3qFDuGZ5FnlyK+hINhwM1yEmZboAlNbA3+kc1t7MUJ4/xnoBbkwXQ6L3
TVkAFtmJ6gt0hFlh157dOLrEC9nZlti64UfciZ5eLiWloKSjCvcMrWFx6QSu3vOC421DHNphjYza
Z3vITAznwPK76yicueY80QF3Ox1scwoX0yoSr7F5cA2JgZVY2z7oKV9sw3hw8rdYf8EPRaWlKMqI
R2RuJpwszmCLc75yEuFWi+CWlo0H1+3gEt6oPG6KLABX4BFahwlR9N0st2Ppn/Th/zgXQY/PYpOt
n7jOEnicWwB772DcuncdOmHN4nKFsFxghRz5vmCZJ87ecMDlo19io94d5It5KMlJQlBWBQbf1k7c
9FrmZAFIvnodF/f6YuYG3tEybxzXOQ5rNy+4XtyE9dv2IDnuMb7YfgVpPZOYHC6C6Z7D2HXBEV6e
9jhsfgM+AY74bvsFRHaI4pxpjYtXDiO5LBOHF+6Ho38xuF/5L+lB6Lk9OPkgE73i8evq6kZLWQDO
7joIw8sG2HjCBC4uV7H597+BS1whnC1OYJuRFZyvHcfqjz6B59M3MCdR7mePnf+yA9YuLuIyd/E4
KQNed65gs56FOHwLx/R34HFsIuwvHxOPoQ1uXzXE3lWrkZASjeW7ziKoqBKPrh/Hd6aJyimGX/kY
5twCQLNEa44/znx+DVN9thbW8/+I//b3JsotAlb7jmD3RSflcumQiSkelQ6h2vk4vlq9Hzm9HfC6
shJfbbGGov/ZXkkTQxkw+egc4lpmLKVGOhHqpINdei7w8nLFwUV/D1vfaFwxPA4t5wJxBlG0H9ti
xeqTcPHygp2FEQzdfXH9wlEsvz5VnAMvfQbnzCL4XNHD9n0OooxM7fMv1+RdVhjC2XPqFtSFG+Nv
/9PvYRRQjIwQQ+w4Zi+u8yGOL/0bmLoGwsbhMnb4yNX+POV8JvWKPwucceyaDUJ8PLFt7THcEPNw
z/IMdt0OxcybQeozJ98CaBBr7/FBpdMfR3liFLmuVjh6YD8OHNKG6d1QtDaWwcU/CY2D0xvOWlNx
Vf8A9u8/idsJop0Ol8HZOxbV4sk31iSmmRSK5uEuBBoa4ZJl7HMFg1RpQaytN/IaZ2y/m+xARtAd
pBXmwcP8oLivL4i1fytkyztTEQtLcf8fOHgBt7ycUTLjgwH9dcmwPXYEB/fvF5c5hAueYoE13oxH
1ifE4QO4FCY3NQrtSbA30cPxfRdgcGYXEqtq8DAgBhVtXShOi8D9pKlPg1QlOSG5mo8gzQ4DzWWI
cUl9umVxoDwBNo5xEOseYrmUBrMny6XYqdI6UpeCm/65kD/x0pLmjvCkbMz8XdTJMQUSnOJQ2//8
m+eD9Wm4eVi+7g7gyKlzSC1rREpsBHyzn2w9GEGGjykOiNfZQQt/dA4PID85HB5pU59PLE9wRnbH
AJoSH8LwiDni6p5caz9yH8Yit6hN1AipBY+dfRBR3o2J/hLcOSKvcz8OH9VDdF4tMnMS4V8iX38t
yvmsl4uI1myEJmegcxSojr6pfK0fML4rlgPc2+p9mYMFgDRWXzluXxZrS3v3YedOLVy6nTi1ACUi
otfGAkBzx2gvynOTEBsbizixJtH0/CYgIiJ6DSwAREREGogFgIiISAOxABAREWkgFgAiIiINNKcK
QEtLC4qKilBcXMy8h8j7vq5u+mNKIyNoam6BQtHMzJE0NbVgaIh7TqrT0NAQFOJ+V/V4MMyvTaNI
R0cnJieffUfE65hTBeDWrVtwcnKCp6cn8x7i7u4OMzMzjI2NobKqFoEhEUhLz2bmSIJColBUPP3V
iqQW+QXFCA6NVvl4MMyvTUpalnhdR2J4+M2+S3lOFYA7d+6gp4df7vI+ycdgcHAQpWWVKCuf/nIe
mhMqK2uUAxKpT05uAWpq385PlROpEp+YKpbJ8iujXt+cKwDybQB6P+RmJmdnZ+VmzbLyKhSXcG1y
LpGlraBQ+dNYpCa5eYWoEMWL6F2QW/7jElJYAOjdYwGY21gA1I8FgN4lFgBSGxaAuY0FQP1YAOhd
YgEgtWEBmNtYANSPBYDeJRYAeitqa2vR0fHTn9YpLS1V7vUvsQDMbSwA6scCQO8SCwC9Ff7+/jA1
NUVnZ+f0MUBgYCAuX7789JMXLABzGwuA+rEA0LvEAkBvhRzc79+/D3Nzc7S2tiIkJASGhoaoqXm2
8GIBmNtYANSPBYDeJRYAeqvkF/4cOnQIFy5cQH39859fZgGY21gA1I8FgN4lFgB6qyYmJhAeHv70
K39nYgGY21gA1I8FgN4lFgBSGxaAuY0FQP1YAOhdYgEgtWEBmNtYANSPBYDeJRYAUpsXC0BJafn0
KTQXyMeMBUC9ZAGQP5xF9K5oVAFQ9Vl1Uh/5GMgCINcm5Q/LjI2PM3MkhUVl/DEgNZM/BlRSWqny
8WCYX5vR0XFExyZqRgGwt7dHbm4uFAoF8x7S0NAAGxsbZQGob1AgODQKcfHJzByJfLyqqrk5Wp3K
K6qUPwes6vFgmF+bmNgkRMUkiCIw9WVtr2tOFQD52XRHR0e4uroy7yFy87+bm5t4so0qHw/5DYHy
7/cbOQ9Poup05knk4zWpfOTejJzGkyKoaZEfiZULydcl3zabHa8T5kON/OTWm5pTBYCI3h+5/42P
jw/i4+MRGxurMYmLi1N+K2ZaWtr0PUH0YZijBWAQmc4BiImtxVT3GUL2vUBEhVViXHlYfRRJN/A4
MUPM0Vsw3gwfj/twSVFMH/ES7Zm47OCDrJbh6SPmoiEk3zaEqX0YuqePeWqoAymPLyK+/tn66nhH
CSJ9riJ7xi4gbdmPcXrNGqxevVqZA/r3UPPmZfitUDWfH4rm5mbExMQoi4BcaGhK5O3Oy8tDRkbG
9D1B75rccsL8cn6tOVoAuuC17QJu2mdi6p2PHjzebwIbi2SMKA//kl7EPX6Eh+G/fu/cOq+1ML7z
EJ2//rEQxtHSpEBDl+qBvTYrBDbOmeKvPlTVNaNnRN115+2ZVGTDw2Q55h32EM+Hgeljn+iG96VP
4ZgzYzTvSoOD8Xz4Pn3IxpFz2xqHvzuHALmmFuOPixfOQjfwp19gpFY/mc8PhxwIo6OjlQsM+eNR
mhL5FkB2djYLgJpkZmYqv4xMlk3m5yPvpye/1fIm5mwBeHzAEh6Pni1lE8/YwulGhvI9zt7KROVX
2nqn1kxtIRhqRqqPFzy9fFHcNoTJ4WpcP7wJG3Tuo65nxs4TE+1IDRPn8wxAZqs8og8FFVkI8wtE
fHm78ixPtBcFKa/D+tiXMLgXriwizfkRyuN8EyuV1zvZWYtYb094PvJDZdfU++biSGREPhLne4y0
ZnmEuC+qshHmH4Tk4jq0NIsC0D2CSTHPaTmpiBTTexRZgK6RIcTZH8DClZeQVVmPqsYWdCtnfQxV
6cHK6w0r61MerlfUID01An7eXogpfv33Ld+9CZTHBMP1jh9CnG8hIKNi6nEabUaWvG9cb+HUvi9x
X37KsL8ccYFecLO7gKNHViKsSZ5RGkWWkwtu6qVOHwbivc1xxDQYOQlT94eXTxhyG6dKUmNSFLw8
vRCWkoep/WWHUB4eIM73CImFteJeG0JVcinkwzTRU43sygoMiidTf10tSorEc3OiCbH+4rH0iUCx
fL1NdiC7KBXBvsHIUIi5H6p8yXx+OFgAWADUQb7tkpOTg8rKSpSXlzMvSVVVFUJDQ5W/3fKm5mgB
GEDI8aNYv2w39M+cwZkzJ7H+Ey1YPyhGb3M+Thzajq07dmD5zm3wSE1Hlt8V7FinDZ19S7HNyA9N
TTm4sPpTfLzsPNIU0x+fmOhEpLslVm3aiB1b1mOr2U1UlEfhx0WL8OXSvbCMqJg6n9BbFY+9WvOx
RVzHoj/8Dxy1j0ZVdQ70z5/C8ePHsfuYIXzzChHraoCtWsdxZNtC7DGNxdhIFxJ9bmD1pg3YsW09
1pwzRU5RNDatWIJPlxyCXUAwTM7q4qhPNQazrfE///ULaG3ZgbWrVsIyIAD39Zfit5/th4+fIxYd
uIzIuj5UZPpCa5uYZzEvK06cRm5pFkyOaOGPyzbiwJ6NWK9jgPxnP/A3O4y1I8r/OpySh4FKZ5yz
j8LASDeSvUywdNUqcVt+xBef/RmBZS0ItNPGkrWbsX3dt/h64UrEtE1PQ1SGEs/r2PLHdTgpnwOn
tbFqy2k8SM2El70JjonHQXu7Fo5fd0VpSQJMdu2Bts4BrNm0Bw+z2tFV+wBH1+3BMZ3tWL3bGDH5
xXiw/wB8xMDd7r8Xf/nDZqSJ52rWAysYXgjGQ3czcdnt2LFxLQ7aPUBNgS++/OI7fK91GndyahFo
f/Ql8/nhUGcBkF9FLfPS05477uXnfRthAVCvhIQEFBcXK+/3J88D5qeRr8OoqCjlIP6m5mwBCD52
HFvXHsUVMzOYmV3Azq924YZLFkLvbcRWh5yps2WaYs0FG9wx24c/rdqLG76BiM0oQ+9IO0Lu3Ya9
97NBfajMDbuO7Ia/cq28G842R2Ds7IIdmw3hVfP89v08D11sdshT/l3vvROWLndgrTcP/+2rdTh4
8CA2L/wDFhs7w/Xydny94SDuhsUjJaMaI5U+OKizDQ+nN1zU5AahJD8Um9aexl3lrDSJAnASuo+r
0ZNigz+tt4Jyb4DSm1h72Qb+gY9w2VZcb18klu23QHhOGmwNf8S52Kk3Pgq8j2HPjbswObwPB93l
pvBh+Jl+DddC5cmzxkhLPu4an0SkLCbjFbh+1ATJWbEwu6yPW0XyHD3wMVsFzwA/6F4wRZTcSWAk
E47nViCoQZ4uTaD4oQ12frYN5+VzwPwa3P3LlFuABovdcf74Qezd9D1WiIE/IdYPK9cswd7TxgjJ
qERBeRc64kzx0XfrcOqqDcLFc6KyvhvlGbdhG5iNCM8b2LpyL4JS0hDm44RH/pbYeUIfGcq7uQwm
psdwzdlBFAJTpMlNF52hOHj20kvm88OhtgJQV4/6+gY0NogF3U9Oq0N9QyPq62YeJ84vB4uZ53uL
YQFQL1kAioqKlJ+8UPV4MFORz0sNLQBTbwG4ez37THPiWTu42MTDw24edL2nv6Gu7C7mXXBFRnY6
IuMT4W1zFFuXnkNWlwL+t2/ihtezb7Lry7TF/hNbkaB8O6Uf91xNceKGHfacMoV3qdy0/sQkYm8s
xeWoqW8krPXcBVNHe5jrfILNFzyRmJSEhOhwRORWoLYkBdEJ8bh3aT/2bL6FzCwXHD+5AZFPtthM
DmNUEYl1h41xv0RuiajFJcNTOPm4Cl0ZtzDPwG9qH4cGHyy5ZA83dyectxHlpj8KKw5aIjA1Flb6
X8MuV55JrExHWWGDuSMuGhvBMFw0mYkGuF/+Hu6z7MvfevJdsORv/hGfL/gO3y1cgI9//wmOmd/A
TYv9iFbuEdgG36vrcdPZGqbWF8SQK/SmwMHoxxkD6xiyb9/B9eMx04enlftjl5EuHEOSkPjoCk6f
2oH4ygYkJ0YhJtgeuss345JLHgZaixEZE4vIR6bYt3AHXBIUaOnMhc2eYzC+cxvut01x2twa9pd9
kRZ/DnsMTqFU+T5FPS7ZmuGC3XVsOGmDjH5RHnNu4txV45fM54dDLQWgvhntDZmwPbQCB0weobS+
HQ31U6fVNzajOicSjua78DC9BS2Nogw0taMs/i5sLI4jpLALzQ0vTO8thAVAvVgAXi0aXQC8tp6H
rV3G1AAp1hh9912CvXUKSrPvY63OZXj7+eGmiRYMxCDhcWM3LtwMQdAjM2z/83nkNzcg9JYxdh5w
RHnb1FsAk31FuHpRH0es3ODndRPHzh1GcJQ3lu80wP3C53eyqIu3x4r9evDxC4TRd/+IY1cfId7d
Hqu2XEaIWEB6OJrh2O27cLm6Deau0fC7fwY75l1HXXsx7K6exQGLe/ATa5Z6F48iIt4fq3eegmO+
3BGuGmdPHMJBzwr0Z9vhDyuPwU3cDqcr22Bw9yFSw+9g6zpL5MTdwZc7LyJS3G8RHqbYcOYm/MT5
jA03415wAPRO6EDncb0oAHVwMfwMLrNpC8BEBwKMd+PUgww01stNWfUoSLwH/d06OH3hFPZcdoKf
pwW2/OljeCXnwMJYG8dvuuGhlTbW/nkegpVbaKQxZNjZ4vxWL/FseGa8zAdHT5yEY1A0Qhy0sXPH
drgH2IlSdBHB4QEw2rAHZteykJmgB4PzdogI9oDO/P1w9qvGODphs+lLrL7iLspAOvas/hY69sWY
6MuAnv5pnHF8DD/Xy9A20Ud02H18s90Ece0TmOzPhbH+oZfM54dDHQWgobUDFeEuuHJ6LRYfuIPU
/ApxfWKgV7SiZ2gCXeUxsDz5BW7Gt6KzoxP9YgHQkuIA41PL8TC3D62Nqqf7a8ICoF4sAK8WDS4A
g8h1CxNr2/VTO49hCPle4UiIn1rtyvK6CC0tLWiZe0OubI/WxOLyFi1s3bYDFoEFyvO0prrjxDZ9
+MsdvJ5oScfl4+JyWvthldwBjJTh5v1AZDa/+DWLw4i7vUuc7whOnjoGnzy5JWIU0c6nlde7/aIX
5PK/M8cPBuLw1u074RBXrbwkOsSgdmqrON8uXIlRiOuohIObP1Ka5E6CHQj294Z3bgd6U6/jb377
OdbI23HhHqrl5ueOFJhuF2u3tz1h7ReFIrm2PNEKz2uHlder8zBXuXNa4GMf+OaL2zXZhfQQa6TP
osFocqwGgVfuI2/mc3a4FtGet5CYmQSbU/L+PwVTO1OI5TlGSh9Cb684bosurB7cQtnTfRonUJ+U
iDC33Bc+gjmCLCdT7BWPt9aWbThtJQZzcVz0pVPi8FbsvXATRcpp1OCB9j5sEec5fuMRGpWb9/uR
EukLp/hG8fcgUkW5iqmamvpYVTj094lp7tDFvUJxXE82rt0LR2XvVAXtLfLAaZXz+eF49wWgXiyQ
KuB90xbW9o/gZWYAp6hMNLT1oT7bD9dFQT+2XwsrV8/D3ZwRNKa64JLhGWhvW4LVOzYjUDywLABz
HwvAq0WDC8CHry7sKj497vWKH2skevfeeQFoaEZzUTTsbM/DNbEDjbHmOHLeB/W1BbhqsANLtPbh
xMFVmL/gB3gn5ODM4TVYs08Hhzd/i4U/aiG4hFsAPgS/WADq6tEgnoPP7Qfy9DT5rY3P7w9SJw43
PDetOtSLyzfUP9lxVB4Wl6t78x1J6xoan/va9MaGd19eWAA+YCPdCuRXt2L6w4NE7927LQB1aGxp
RmGYKwx27IBrchkyox5AZ8MReD12gPapE/AoHMVIXQyuG67CzVsW2GVgisQmoDPTCedPr4V3HrcA
fAh+qQDU1dagJD8flTUvnCYG8JqqcpRXlKNaPJ+eHFddWSqOq0TNk+PE5StKilFdM7U3fW2dPFyO
yqoa8feM6b1i6sRlqsqLkJ2ZjtSUFKSkZaCopEo8b95OCZA7vTY1NfzkeBYAIlKbd1oAxFpdS3M9
4u4ex0d/8+/48uuv8NWXf8bvP52PQ6dOQc/wEIKqgYGKYJjqrIH51ZM4YnwJWWKx0ZxgA7396+BT
wALwIfi5AlDf2ILa1FvY+t03OOuej1bFs4GxsbUXOd5nYWR6FvHlvWhqqIWitQcJt3fC0NYBudWd
Ys1cgea2TJgt/hjbDB+jprkTrR3puL7KEC6+aahrbXrNT5M0oq23Ah7HtuOzf/0In3/zNb797E9Y
dvg64qpa0dLw5lsVZGS5KC/ORWp6AarlPlMzTmMBICK1eZcFQG6SrcmPwIWN62AcUIw2RT0Uijok
+lrhyKat2H38AFbv0YbuntWY/9EXcIvJhP6htdigrYtDP36JBd/+CL/ifrSxAMx5P1cAGlubkXD9
BHSM9KFt4ImqlgbUi+MVrV0YnACqg/ShZ6yNqLIBdHf1YFgcl+O6CSevWSG7qktZAFo70mD8yRf4
44Kd8KvqRE9PGq7MOw77h8mo62hDe4cY7MSA2NPRCkVTszh/i7iOGihautDVqkBNjSir4nwtcq28
RhSA/gLc2ngKV0yDUNnXjf7KKBw/rYeLXvkYGxtCn5hWb08XWhrrUdfQLMa6bpFONItyUN/Uhh55
em+XKDNTp3d1dKCze+oyna31SPK7iYO6HqjtbkFDTc3T+4IFgIjU5l0WgDqxsK8oTIDntYdIr2iE
orEBjYomVBfGwd/zLmJi/GGhfxiHjpzHTTdHpFb1oSruFgy0D+HoMWM4PfZAdnkLGqc/Mvg2wwKg
Xi8tAHVi8K5PxCX96/B97Ic7F0/jYVErOltEKbh/Els3b8WP3/4bVuqcR2ZtNyLs9mCjOG7J53+D
rZfuoKh+qgA0tSXD4vtTMD59WAxcQagZycG1hbpw9MlGW0sx7pkdxubNm3HgqjtiQ33hfOUh8pva
Ef/QGEbu0WhtLoSXqRM8AjNQ29KC9r4COG45A0vrKDRNjGKgMhxHdHRw0doBBif2QEtMS2ufMbyT
y1GR+Qgn9LSxc99ZeGY2oCbGEXu0NmPz9tO4H1uCutxAGF69CqND67BhnymCs7LgqjsPf//PS2Hu
nyFKiOLpVgAWACJSm9cuADVy5ygFWsRCRi5oZFpbmpRrbKrOX1cvFvBdbVCIQbxGHifWduoamtDa
1i6uuxVdPX3o6+tBZ3snGuuqxdpTB3r7po7rENNuqKuZutwvpa5elItm5flVnv5CWADU62UFoE48
3pUR1jC65YFSsaYccfcizl5PQGPeI6zctBkG1+1gvPtbbD5ihBB/NyzZuB3mt29Bd/Vvsf2coxi4
nhSAJJj9cAYudz1wRecYHFITYP+jAR54RcPzwUUs3n8SVqYmOLh/E/YbGOH8CT34lypwY8vf4a83
XEVdaRD0jxrAPqhY+cNY7f1luLd3Iz7+x4/wzcKFmPfpl1ihY4/Uilx4OZjD5IoFjm/7HscsbBDg
aIS//M1qXLwfiJTwB9hy7CiOnzWFifZWbDIwh9ctQ/ztvy3G2ZuuMDm0FPo3b+COuQ4WLj4G7/Ri
8bx9toOjRhYAublELhDa2joYNaa9oxPyN/df1N8/wMdjjqRdDJwjI2++W+nrFoC6hjpUFmciMsAH
nh4e8PD0QnBEOmrF5V/vfda3F/m9EzWVJcjLTkZRZb3qPclfCAuAeqkuAPWiHCoQeGE/tu/VhWtw
KG6eOYTtu43x0EUX+64+QG0/UBN8Bucu6+LG5YM47BgL+SndnLtaOG1lg+zqZwXg8rzTcI9NR9Rt
SxicPA/DDaZwu+sJ/a3/F/76T9/hxyWLseDbBdgvBmInZ3vcvGkn1twvwPjkMdja38IN2+tIaexC
U12jGAALcXvbcZzSvYWw1HgxKMcjv7geitoiOF5cg0VLfsSCP/01Vp+4hEe3r+KL3XaoFfOV7bAW
f/+vv8GCH5Zh8cJv8MVOQ9y1M8aXW02R3QMUu++EwbUr8PF+gGOn3VHTKd8CeP55qVEFYGxsDCFh
0UhITEVSSgajxgQEhaOy6qc/cRcdmyiSpPIyzOxKYHAESkqfffvl63q9AlCPlu56xNw8gwX/43eY
v3wpli/8Fl8v248bydXobHr2Pe9PLzN9WO749JPjnh5+dpqqEvHiNOtqnz/c2NyOqhQvXNH9DndS
RTFSPH95VWEBUC+VBaChFV11iTA/shwfff4DlooBetmir/Dpj9q4eHK9KAD3lINq4X1tHD16EjYX
tbDPNgbyO1zjTFfiyDlb5NbOKADf6uJOaBHaamNx5dQi/PG/7cQ9bx9cPPA1dlqlYmCsH2WpQXBP
SkGwyx2cXv4NDtvdxT17bXyz4iQc7P1Q3dmKerkTYF8BHLQMYGkVhcbhHrSK10mrKNxJjvvxtdEd
NIhiUuhxGPoXzsDNSRSAA7Yo7uhHlvM2zFt7Ggl1/RhoyoN3SAj8nIzw593XkNUygDTn7ThjaQZP
Nycc0fdEQ58YrKs1eB+A4ZERxMWnTB8idSoqLhODx7PfTngiPiEVw8P8toK5oKKyGvkFxdOHXt/r
F4BKBF0xh9EuN9TLCfQ3wMPeEJsuBKKzvwttra3KXzJrVsgtAvVoapk63NrSPPX1v2Ltqnn6PC3N
TcoBQSFOaxQlQO4s1Sb+lp/drleIhXpTo1ggKtDyZJqNDaitb5yaXmszFA11aGhsRkf3ABTZfrh6
egHupLAAzEY/LQB1aOpoQprLJezV0kdk/RCG+/owMtyER6YHcUxHF1q7VmHFli1Y8Ye/w4rdZxCb
GIdta7/Euj27seSf/xs2GDigsKF7qgC0J+L8Z9pweJyBltEu5Lvo4q/+H1/iSlgu0r1vYsn8H7Dl
wG4s27ANpx7noT3lAZZ/9x2MA7OQE2aK7xd8D8foBnS1yPlrRHt/PuzWncCly0Go6pE7DNaK52QL
ShJssWvJKmzZvQfLPvmfWHbgArxuX8Yfd1ghr6kV7aVJOLNpPeat2Ybda9dgpZEdvJ0N8UetK8ho
HkSqwwboXjNDkL8TFv/jIhg7x6Cm/dlbaBpbACYmpr7/j9SnoLAEpWWV04eekQVAvg1As598/OTj
+KZevwBUIcTcFLrrryOlqQ41ubG4aHAIh684wlRvB5YsXYolSzbgjEssFB05cNy/TRxehFV7TyKi
qBNNlZEw3bAGSxd/j+0G15FckI5bB84jsKAdpSGm2Gp4EYll1UhwsceVS8HISHKG1pJ5mLdwHYx9
c9Bb4I99R3diyaINOO9fjJIQM2xetgDffv57/EksxD2yRQlhAZh1VBWABkUN8hJiERWQikpR+KYG
WQXKMkIQnZCC7HhP2FhYw97RFWFpKahqaEVeuD2uXbWF8717iMrOQZUYrOXWoPqGUqQExCOroBy1
ohC0NRQj1D8KiQU1aG+pQULAbVhctcDNRwmoa25Ba20+gqOTkFYiimdZJpKigpBXLfcheTJvlciM
SEBqaiFq5J7+cp7F9TQ0VSLuriOuWVyF1Q17PI7OQGFOKvyj01EpT1e0or4gAvaWFrCwvouEgloo
ylLhG5GK8vomlGVFIiEjHWVl2fC1c4BHQDqqm5+9fcYCQGrDAjD3qb8A1CPW3gDf/J//iD99/SU+
//RT/LDOFHENjcgNfwAbSyucO6qFrYf3wtPDGqvWbYGxuTlMLlvA2TcXGV7HMG/lQdjYmuPsxZvw
DkmAp+kBWERVIMZ2O/7294vxMD4V3g7nYWxqjT3ah2HoHIxIN1PsObYLd12s8Okf1uLsg0iUZwbh
4IG9OGrrjaB757BzzULcz+hkAZiFVL0FUFMjHgdFM1ra5Brw9Gbwmhrlb0Q0NzehqbkdXWIM6erq
RGvT1Gf55cf2urs70dnZiRblVqYnl6tHU1sz5K9NymnUyPfx21vRJA7XyOdtW6dywOtqb1ZeV01d
g3KrlEJ+c2C9As2tYtCcscNpTU2dcstUk/xOghkf05OvgeaOqWnJtLUo0NCoECVjak/+GjFtuaWg
S57e1YFmUR5qG5rE6XL+xWmNLWiWZae+Ee3idrS1iNedJn8MkAXg/WEBmPve1xaAkxtvIK25BmXF
JaisbkRLTTEczXdgxfKVWPHdJ/h2zQaEJKRDf/9aLFmxBHoXnRGcVIzqjEfYun41Vm5Yi3NXPZCU
W4ykOFec07eAma01Tu/ZC7NbjrC/dA3Od45gm/Z+xFSPAU0pOHnpHI5eNMLSnecRVNkDRbQFdM6e
QkQV0FUUBMuzC/kWwCyleidA5sWwAJDasADMfe+jAASZmkJ/ixOKh+RP9TZA0daDqgATfH/UCLEK
oD/XBcbH1sH2gQf8ktLR0ZEFo2/mY+s+N0QlOMA/qwrdjcHY/Q/fQtcqCsWVKbi4eB62njOBt891
rN6yAzqnHqE41gzLth+AZ0EfxqtCcPzkNpy3NMP3OwzhWyjWEuOvY+ehg/Ao7EdzujOOLZ8PF24B
mJVYAF4tLACkNiwAc9/7KADBZmaiADiiQO7BLI6vq2+BojoaZttXYv6Cxfj2k3/CJ0u2wzPSDdrz
/4x5S5diwbKdcPAqRH7cRaz742dYtHIJflh5DF7RVehT5MPsyBosP/8IjS1p0F//CXRdMtDfUgt3
69OYN2++8uNbOyxcURHlgK82n4F3trhceyPume3Gl199iW8++Rzf/fAD3LkPwKzEAvBqYQEgtWEB
mPvUWwDkYF+L8oIC5GYWobpheucokfqmBpSkxCHA1xu+foGISspEdVMTCuMi4Ovtg4DoRJTK91oV
dcgMC4KPty9CkzNRKffgrqtCYWE+0goq0dBYg5LsRLH8qJn6JcGqPEQG+sDHLwzp5U1oqy1CckYu
SqtqUNfYgsaKTHG6r7jOCCTnpInj+T0AsxELwKuFBYDUhgVg7lN3AZDfBCi/479RfuZ/5i+31cg9
pOVnpae+HVB+xE+Wg8bmFuVh5ccAxcAsd8hStLZOHdesEIO13PGqTly/KAJyhyn5t6IZjXLnLPmt
gfWNaGkV02xtmdqhq64BzU1TPxtbI09XfkxQXmeLOL5JOb3n5vclYQFQLxaAVwsLAKkNC8Dcp/YC
8IGEBUC9WABeLSwApDYsAHMfC8CbhQVAvWQBKC4uVj7PZAlgVEehUChfjywA9M6xAMx9LABvFhYA
9YqJiVHe16WlpcoiwKhOWVkZgoODld92+aZYAOiVsADMfSwAbxYWAPXKzc1VlgC5JYB5eeLj4xEb
G4u+PvmLB29mThaAycnJ6WNIXX6uAAwMDE4fotnsbRQAuWCWP4EqB0VNSVNTk3JQSk9Pn74niD4M
c64AxMQmcQvAeyB/REbVjwHFxqVwC8AcIR+/X/NjQHJTo6+vr7IEyC0BmhJ5ewMCArgFgD44c6oA
jI2PIyIqXlkC4hJSGDVG/pRsbV3D9CPxTEJSqvIxUXUZZnYlKDgSFRXV04/c65M/x93e3j79C3ua
l4EBFl36sMypAiCNjo5iYHAQg4xaMzQ0jAkVb73IQWFwcOgn52dmX5SPIbeeEdG0OVcAiIiI6Ndj
ASAiItJALABEREQaaE4VgL6+fjS3tKGFYRiGYTQ8zS2t6OruwZt+Mn5OFYDYuCTExCYiJTWTYRiG
YT6YpKZlITU9+7WSnJKBoJBIDA+PTI+Sr2dOFYD4xFTl3sxEREQfGvmpqvHxV480NS4OKf9+XXOu
APT09E4fIiIi+jDIldvOzk50dXW9ckZGRlgAiIiI5rKhoSHloK5q8H1ZWACIiIjmOBaAX8ACQERE
HyJVBaCnp0c5OMv/Zx7/JCwAREREc9yLBUAOynKfgKKiIuX/qgZpFgAiIqI5bmYBeLLWn5WVheDg
YGRnZz/dGjBzUGYBICIimuOeFAA50Ms1fjnoh4aGIiUlRfm/PCyPn/l2AAsAERHRHPekAPT19aG6
uhpBQUHIyclRDr7yf3lYHi9PfzIoswAQERHNcTMLQGVlJTIyMpRr+/39/cr/5WF5PAsAERHRB2Tm
PgAdHR3P7fgn/5eH5fEzB2UWACIiojluZgGQa/wz3+t/2XEsAERERHPczALwqmEBICIimuNYAH4B
CwAREX2IWAB+AQsAERF9iFgAfgELABERfYhYAH4BCwAREX2IWAB+AQsAERF9iFgAfgELABERfYhY
AH4BCwAREX2IWAB+AQsAERF9iFgAfgELABERfYhYAH4BCwAREX2IWAB+AQsAERF9iFgAfgELABER
fYhmFgD5q38vDsryMH8NkAWAiIg+ME8KgByMa2trUV5ejv7+fuWgL/+Xh+XxMwdrFgAiIqI57kkB
6OvrQ2VlJUJDQ1FdXS0G90FUVVUpD8vj5elPBmUWACIiojlu5haApqYmxMbGIjIyEiUlJcr/5WF5
PLcAEBERfUBm7gMg1/Kbm5sRFxeH4OBg5f/y8My1fxkWACIiojluZgGQke/7y8E5KSkJCoVCeXjm
gCzDAkBERDTHvVgAlIOuGJg7OjpeOkCzABAREc1xqgqAzIsf/ZsZFgAiIqI57mUF4OeicQVAvg9C
RET0IRkdHVUOxHJHv1fN+Pg4EpLSNKMARMcmor6+Ed09YmYZhmEY5gNJV1c3Oju7Xi/iMuFRcZpR
APLyCxETl6RsPAzDMAzzISXxNROfkIrk1AyMjY1Pj5KvZ04VACIiIno7WACIiIg0EAsAERGRBmIB
ICIi0kAsAERERBqIBYCIiEgDzZoCICdORERE6tHe3j47CkBrSzMGBgYYhmEYhlFD5OD/XgtAUUMf
KurbUFdbg9raWoZhGIZh1JCamhrl2wA/94NDT/JOCoCcWH1rL/r7epUzwTAMwzDMu49c85f/qxrw
X8w7KwB1LWJGxMRVXSnDMAzDMO83724LgCgA/b1TV8AwDMMwzOyKHKObO972PgBiYlVNPWgWzUK2
C4ZhGIZhZlfkGF0rVtblmP3WCsCTichWwTAMwzDM7MzMwf/J2P2rCwDDMAzDMHMrLAAMwzAMo4F5
owJQLAqAvCDDMAzDMHMzhSKvXAB2795d0zsItA9AeSGGYRiGYeZmWkVGAZw5a4TpYf7lVq5cVXbm
jOG4gcHZcdkYGIZhGIaZuzl79tz4+g0bRqaHeSIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiItJ0f/EX
/39fUMSswbDeVAAAAABJRU5ErkJggg==</Preview>
  <Form>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
++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</Form>
  <Code><![CDATA[$MainConfig = Get-Content .\config\main.config
Write-Host "Load config"
foreach ($line in $MainConfig)
{
	Switch ($line)
	{
		{ ($line -like "#*") -or ($line -like $null) -or ($line -like "{*") } { }
		default {
			$Name = [regex]::split($line, '==')[0].Replace(" ", "")
			$Value = [regex]::split($line, '==')[1]
			try
			{
				Get-Variable -Name $Name -ErrorAction SilentlyContinue
			}
			catch
			{
				New-Variable -Name $Name -Value $Value
			}
			finally
			{
				Set-Variable -Name $Name -Value $Value
			}
		}
	}
}

$formAPS_Load={
	#TODO: Initialize Form Controls here
	Write-Host "Load module"
	Import-Module -PassThru "$PathToModule$ModuleName" #-Force -ErrorAction Ignore -WarningAction Ignore
	$test = "tesgkdfdagv"
	$Global:isTest = $true
	$Global:OFS = "`r`n"
}


$exitToolStripMenuItem_Click={
	#TODO: Place custom script here
	$formAPS.Close()
}

$aboutToolStripMenuItem_Click={
	#TODO: Place custom script here
	[System.Windows.Forms.MessageBox]::Show("APS v1.0","APS Application");
}



#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}


function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}


function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
	$ComboBox.ValueMember = $ValueMember
}
#endregion

$buttonCreate_Click={
	#TODO: Place custom script here
	#initials parameters
	try
	{
		$Global:OFS = "`r`n"
		$textboxCreateLog.Clear();
		$errorprovider1.Clear();
		$Type = $comboboxCreateType.SelectedItem;
		$ADlogin = $textboxCreateLogin.Text;
		$filename = $textboxCreateFileName.Text;
		
		if ($textboxConfrimPassword.Text -ne $textboxCreatePassword.Text)
		{
			[System.Windows.Forms.MessageBox]::Show('Passwords does not  match', 'Information', 'OK', 'Error')
			return
		}
		$textboxCreateLog.Text += "*LOG*---------Password OK" +$OFS
		$global:Error.Clear();
		
		
		$File = New-Object -TypeName psobject
		$AESKey = New-AESKey -IsTest $true
		$textboxCreateLog.Text += "*LOG*---------AES Key generated OK" + $OFS
		$MainPassword = Convert-ToSequrePas -InputPass $textboxCreatePassword.Text -IsTest $IsTest -AESKey $AESKey
		$textboxCreateLog.Text += "*LOG*---------Security password OK" + $OFS
		$CFLDR = -join (1 .. 24 | % { [char[]]'ABCDEFGHIJKLMNOPQRSTUWXYZ1234567890abcdfeghijklmnopqrstuvwxyz' | Get-Random })
		
		
		if (!(Test-Path $PathToFile))
		{
			mkdir $PathToFile
			$textboxCreateLog.Text += "*LOG*---------Create $PathToFile Folder  OK" + $OFS
		}
		else
		{
			$textboxCreateLog.Text += "*LOG*---------Folder $PathToFile  OK" + $OFS
		}
		if (!(Test-Path $PathToArchive))
		{
			mkdir $PathToArchive
			$textboxCreateLog.Text += "*LOG*---------Create $PathToArchive Folder  OK" + $OFS
		}
		else
		{
			$textboxCreateLog.Text += "*LOG*---------Folder $PathToArchive  OK" + $OFS
		}
		
		#generate new null archive
		mkdir "$PathToArchive\$CFLDR\root"
		$textboxCreateLog.Text += "*LOG*---------Creted Root Folder  OK $PathToFile\$CFLDR " + $OFS
		Compress-APK -InputPath "$PathToArchive\$CFLDR" -filename $filename -textboxCreateLog $textboxCreateLog -RootFolder $CFLDR -PathToArchive $PathToArchive
		$textboxCreateLog.Text += "*LOG*---------Compressed OK" + $OFS
		
		#adding information to aps
		$File | Add-Member -MemberType NoteProperty -Name "Security credentials" -Value $AESKey, $MainPassword
		$Date = Get-Date
		$File | Add-Member -MemberType NoteProperty -Name "Date created" -Value $Date
		$File | Add-Member -MemberType NoteProperty -Name "Personal info" -Value $ADlogin, $filename
		$File | Add-Member -MemberType NoteProperty -Name "Type" -Value $Type
		$File | Add-Member -MemberType NoteProperty -Name "RootFolder" -Value $CFLDR
		$File | Add-Member -MemberType NoteProperty -Name "Archive" -Value "$filename.apk"
		
		
		#out aps key
		$File | Export-Clixml -Path "$PathToFile\$filename.aps"
		$textboxCreateLog.Text += "*LOG*---------File Genereted  OK" + $OFS
		
		
	}
	catch
	{
		
		$textboxCreateLog.Text+= "Error $_ when trying create new APS key"
	}
	
}

$textboxPasstoKey_TextChanged={
	#TODO: Place custom script here
	
}

$loadAPSToolStripMenuItem_Click={
	#TODO: Place custom script here
	$textboxPasstoKey.Clear()
	$openfiledialog1.ShowDialog()
	$Global:PathToAPS = $openfiledialog1.FileName.ToString()
	$textboxChosenFile.Text = $Global:PathToAPS
	try
	{
		$Global:APS = Import-Clixml -Path $global:PathToAPS
		$textboxRunLog.Text +="*LOG*---------APS  loaded" +  $OFS
	}
	catch
	{
		$textboxRunLog.Text += "*LOG*---------Error $_ when trying import APS key" + $OFS
	}
}

$buttonRun_Click={
	#TODO: Place custom script here
	$listview1.Items.Clear();
	$global:listviewArray = New-Object -TypeName psobject
	$SeqPass = $global:APS.'Security credentials'[1]
	$AESKey = $global:APS.'Security credentials'[0]
	$InputPaswword=$textboxPasstoKey.Text
	$APSUnSeqPass= Convert-FromSequrePas -InputPass $SeqPass -IsTest $true -AESKey $AESKey
	if (!($APSUnSeqPass -eq $InputPaswword))
	{
		[System.Windows.Forms.MessageBox]::Show('Passwords does not  match', 'Access denied', 'OK', 'Error')
		return
	}
	
	Expand-APK -filename $global:APS.'Personal info'[1] -RootFolder $global:APS.RootFolder  -PathToArchive  $PathToArchive
	
	$global:ASK = Get-ChildItem -Path "$PathToArchive\TEMP-{$($global:APS.RootFolder)}\$($global:APS.RootFolder)\root" | select *
	
	if ($global:ASK -ne $null)
	{
		$parent = $global:ASK | where { $_.Attributes -eq 'Directory' } | select Name
		if ($parent.Count -gt 1)
		{
			$comboboxParent.DataSource = $parent.Name + "none"
			$comboboxParent.SelectedItem = "none"
			$textboxRunLog.Text += "*LOG*---------Add $($parent.Name)  to parent item" + $OFS
		}
		else
		{
			$tmpArray = @("$($parent.Name)", "none")
			$comboboxParent.DataSource = $tmpArray
			$comboboxParent.SelectedItem = "none"
			$textboxRunLog.Text += "*LOG*---------Add one $($parent.Name)  to parent item" + $OFS
		}
		
		#adding to table information
		Add-ToListASK -ASK $global:ASK -IsTest $isTest -listview $listview1 -textboxRunLog $textboxRunLog -listviewArray $Global:listviewArray
	}
	else
	{
		#we need create to the aps path  and document where will be save passwords and logins
		[System.Windows.Forms.MessageBox]::Show('ASK does not have any password', 'Information', 'OK', 'Information')
	}
	
	Compress-APK -InputPath "$PathToArchive\TEMP-{$($global:APS.RootFolder)}\$($global:APS.RootFolder)" -filename $global:APS.'Personal info'[1] -textboxCreateLog $textboxRunLog -RootFolder $($global:APS.RootFolder) -PathToArchive $PathToArchive
	
}
$buttonAddPassword_Click={
	#TODO: Place custom script here
	try
	{
		$FileName = -join (1 .. 24 | % { [char[]]'ABCDEFGHIJKLMNOPQRSTUWXYZ1234567890abcdfeghijklmnopqrstuvwxyz' | Get-Random })
		$AESKey = $global:APS.'Security credentials'[0]
		$Password = Convert-ToSequrePas -InputPass $textboxAddPassword.Text -IsTest $IsTest -AESKey $AESKey
		$textboxRunLog.Text += "*LOG*---------Password Add OK" + $OFS
		
		$File = New-Object -TypeName psobject
		
		$File | Add-Member -MemberType NoteProperty -Name "PWD" -Value $Password
		$Date = Get-Date
		$File | Add-Member -MemberType NoteProperty -Name "Date created" -Value $Date
		$File | Add-Member -MemberType NoteProperty -Name "Personal info" -Value $textboxAddLogin.Text, $filename
		$File | Add-Member -MemberType NoteProperty -Name "RootFolder" -Value $($global:APS.RootFolder)
		$File | Add-Member -MemberType NoteProperty -Name "ParentObject" -Value $comboboxParent.SelectedItem
		$File | Add-Member -MemberType NoteProperty -Name "Host" -Value $textboxHost.Text
		$textboxRunLog.Text += "*LOG*---------File Add OK" + $OFS
		
		Expand-APK -filename $global:APS.'Personal info'[1] -RootFolder $global:APS.RootFolder -PathToArchive $PathToArchive
		$textboxRunLog.Text += "*LOG*---------Expand APK OK" + $OFS
		if ($File.ParentObject -eq "none")
		{
			$File | Export-Clixml -Path "$PathToArchive\TEMP-{$($global:APS.RootFolder)}\$($global:APS.RootFolder)\root\$FileName.ask"
		}
		else
		{
			$File | Export-Clixml -Path "$PathToArchive\TEMP-{$($global:APS.RootFolder)}\$($global:APS.RootFolder)\root\$($comboboxParent.SelectedItem)\$FileName.ask"
		}
		
		
		Compress-APK -InputPath "$PathToArchive\TEMP-{$($global:APS.RootFolder)}\$($global:APS.RootFolder)" -filename $global:APS.'Personal info'[1] -textboxCreateLog $textboxRunLog -RootFolder $($global:APS.RootFolder) -PathToArchive $PathToArchive
		$textboxRunLog.Text += "*LOG*---------Compress APK OK" + $OFS
	}
	catch
	{
		$textboxRunLog.Text += "*LOG*---------Error $_ when trying import APS key" + $OFS
	}
}

$btnAdd_New_Parent_Click={
	#TODO: Place custom script here
	Expand-APK -filename $global:APS.'Personal info'[1] -RootFolder $global:APS.RootFolder -PathToArchive $PathToArchive
	mkdir "$PathToArchive\TEMP-{$($global:APS.RootFolder)}\$($global:APS.RootFolder)\root\$($textboxNewParent.Text)"
	$global:ASK = Get-ChildItem -Path "$PathToArchive\TEMP-{$($global:APS.RootFolder)}\$($global:APS.RootFolder)\root\"
	$parent = $global:ASK | where { $_.Attributes -eq 'Directory' } | select Name
	if ($parent.Count -gt 1)
	{
		$comboboxParent.DataSource = $parent.Name + "none"
		$comboboxParent.SelectedItem = "none"
		$textboxRunLog.Text += "*LOG*---------Add $($parent.Name)  to parent item" + $OFS
	}
	else
	{
		$tmpArray = @("$($parent.Name)", "none")
		$comboboxParent.DataSource = $tmpArray
		$comboboxParent.SelectedItem = "none"
		$textboxRunLog.Text += "*LOG*---------Add one $($parent.Name)  to parent item" + $OFS
	}
	Compress-APK -InputPath "$PathToArchive\TEMP-{$($global:APS.RootFolder)}\$($global:APS.RootFolder)" -filename $global:APS.'Personal info'[1] -textboxCreateLog $textboxRunLog -RootFolder $($global:APS.RootFolder) -PathToArchive $PathToArchive
	
}

$listview1_DoubleClick={
	#TODO: Place custom script here
	$SelectItemLogin = $listview1.SelectedItems[0].SubItems[2].Text
	if ($SelectItemLogin -ne "parent")
	{
		$SelectItemPas = $listview1.SelectedItems[0].SubItems[3].Text
		$AESKey = $global:APS.'Security credentials'[0]
		$UnSeqPass = Convert-FromSequrePas -InputPass $SelectItemPas -IsTest $true -AESKey $AESKey
		$UnSeqPass | clip
		[System.Windows.Forms.MessageBox]::Show("$SelectItemLogin password copy in your clipboard", 'Information', 'OK', 'Information')
	}
	else
	{
		[System.Windows.Forms.MessageBox]::Show("The parent has not any password", 'Information', 'OK', 'Error')
	}
	
}

$button1_Click={
	#TODO: Place custom script here
	$CFLDR = -join (1 .. 24 | % { [char[]]'ABCDEFGHIJKLMNOPQRSTUWXYZ1234567890abcdfeghijklmnopqrstuvwxyz' | Get-Random })
	mkdir "$PathToFile\$CFLDR"
	$textbox1.Text += "*LOG*---------Creted new Folder  OK $PathToFile\$CFLDR " + $OFS
	#Compress-APK -InputPath "$PathToFile\$ChildNameFolder" -filename $filename -textboxCreateLog $textboxCreateLog
	$global:Error.Clear();
	$DeletingPath = "$($PathToFile)\$($CFLDR)"
	Wait-Event -Timeout 1
	try
	{
		Write-Host "Deleting folders $($PathToFile)\$($CFLDR)" -ForegroundColor Green
		Remove-Item -LiteralPath $DeletingPath -Recurse -Force -Confirm:$false
	}
	catch
	{
		$textbox1.Text += "*LOG*---------Error $_ $PathToFile\$CFLDR " + $OFS
	}
}

$Search_Click={
	#TODO: Place custom script here
	$InputSearch = $textboxSearch.Text
	foreach ($login in $listview1.Items)
	{
		
		if ($login -like "$InputSearch*")
		{
			[System.Windows.Forms.MessageBox]::Show("found $login", 'Information', 'OK', 'Error')
		}
	}
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>