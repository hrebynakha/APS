<File version="3.1">
  <FileID>2b855348-feeb-402b-ba34-805d19f52a6d</FileID>
  <LastExport>132508673333076879</LastExport>
  <Preview>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
iIjIBAuANrAAEBGRCRYAbWABICIiEywA2sACQEREJlgAtIEFgIiITLAAaAMLABERmWAB0AYWACIi
MsECoA0sAEREZIIFQBtYAIiIyAQLgDawABARkQkWAG1gASAiIhMsANrAAkBERCZYALSBBYCIiEyw
AGgDCwAREZlgAdAGFgAiIjLBAqANLABERGSCBUAbWACIiMgEC4A2sAAQEZEJFgBtYAEgIiITLADa
wAJAREQmWAC0gQWAiIhMsABoAwsAERGZYAHQBhYAIiIywQKgDSwARERkggVAG1gAiIjIBAuANrAA
EBGRCRYAbWABICIiEywA2sACQEREJlgAtIEFgIiITLAAaAMLABERmWAB0AYWACIiMsECoA0sAERE
ZIIFQBtYAIiIyAQLgDawABARkQkWAG1gASAiIhMsANrAAkBERCZYALSBBYCIiEywAGgDCwAREZlg
AdAGFgAiIjLBAqANLABERGSCBUAbWACIiMgEC4A2sAAQEZEJFgBtYAEgIiITLADawAJAREQmWAC0
gQWAiIhMsABoAwsAERGZYAHQBhYAIiIywQKgDSwARERkggVAG1gAiIjIBAuANrAAEBGRCRYAbWAB
ICIiEywA2sACQEREJlgAtIEFgIiITLAAaAMLABERmWAB0AYWACIiMsECoA0sAEREZIIFQBtYAIiI
yAQLgDawABARkQkWAG1gASAiIhMsANrAAkBERCZYALSBBYCIiEywAGgDCwAREZlgAdAGFgAiIjLB
AqANLABERGSCBUAbWACIiMgEC4A2sAAQEZEJFgBtYAEgIiITLADawAJAREQmWAC0gQWAiIhMsABo
AwsAERGZYAHQBpssAD29vcYlRET0orKy81gANMDmCkBwSCSaW1rR0dHJMAzDjCBJyWnIzSs0/mUl
W2VTBUCKiU1ESGgUwiNjGYZhmBEk4EkoqqtrjX9VyVbZXAF4amCAYRiGGUlIG2y2ABAREdGPYwEg
IiLSIBYAIiIiDWIBICIi0iAWACKiYbqX2YYtD2ux0afOZmPnW4ctj2qRXNVp3GqyVSwARETDNMej
Cm8sSMUbqzNtN6tEFqbibDz/Jts6FgAiomFaeKcGb6zLhE9SCRJyShGVaVtJzy+D65MivLE8E1eS
WoxbTbaKBYCIaJgWyAKwPhM5RaVoqS2Drsq20tVQjjuxxXhjGQuAFrAAEBEN09MCkJJXiprKMpSV
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
2XPmdBvHPBERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
EREREREREREREREREREREREREREREREREREREREREWndG2/8/5uDBwVT5klLAAAAAElFTkSuQmCC</Preview>
  <Form>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
++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</Form>
  <Code><![CDATA[$MainConfig = Get-Content .\config\main.config
Write-Host "Load config"
foreach ($line in $MainConfig)
{
	Switch ($line)
	{
		{ ($line -like "#*") -or ($line -like $null) -or ($line -like "{*") } { }
		default {
			$Name = [regex]::split($line, '==')[0].Replace(" ", "")
			$Value = [regex]::split($line, '==')[1]
			try
			{
				Get-Variable -Name $Name -ErrorAction SilentlyContinue
			}
			catch
			{
				New-Variable -Name $Name -Value $Value
			}
			finally
			{
				Set-Variable -Name $Name -Value $Value
			}
		}
	}
}

$formAPS_Load={
	#TODO: Initialize Form Controls here
	Write-Host "Load module"
	Import-Module -PassThru "$PathToModule$ModuleName" #-Force -ErrorAction Ignore -WarningAction Ignore
	$test = "tesgkdfdagv"
	$Global:isTest = $true
	$Global:OFS = "`r`n"
}


$exitToolStripMenuItem_Click={
	#TODO: Place custom script here
	$formAPS.Close()
}

$aboutToolStripMenuItem_Click={
	#TODO: Place custom script here
	[System.Windows.Forms.MessageBox]::Show("APS v1.0","APS Application");
}



#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}


function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}


function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
	$ComboBox.ValueMember = $ValueMember
}
#endregion

$buttonCreate_Click={
	#TODO: Place custom script here
	#initials parameters
	try
	{
		$Global:OFS = "`r`n"
		$textboxCreateLog.Clear();
		$errorprovider1.Clear();
		$Type = $comboboxCreateType.SelectedItem;
		$ADlogin = $textboxCreateLogin.Text;
		$filename = $textboxCreateFileName.Text;
		
		if ($textboxConfrimPassword.Text -ne $textboxCreatePassword.Text)
		{
			[System.Windows.Forms.MessageBox]::Show('Passwords does not  match', 'Information', 'OK', 'Error')
			return
		}
		$textboxCreateLog.Text += "*LOG*---------Password OK" +$OFS
		$ChildNameFolderChar = -join (1 .. 24 | % { [char[]]'ABCDEFGHIJKLMNOPQRSTUWXYZ1234567890abcdfeghijklmnopqrstuvwxyz' | Get-Random })
		[string]$ChildNameFolder = $ChildNameFolderChar.ToString()
		$CFLDR = -join (1 .. 24 | % { [char[]]'ABCDEFGHIJKLMNOPQRSTUWXYZ1234567890abcdfeghijklmnopqrstuvwxyz' | Get-Random })
		mkdir "$PathToFile\$CFLDR\root"
		$textbox1.Text += "*LOG*---------Creted new Folder  OK $PathToFile\$CFLDR " + $OFS
		Compress-APK -InputPath "$PathToFile\$CFLDR" -filename $filename -textboxCreateLog $textboxCreateLog
		$global:Error.Clear();
		$textboxCreateLog.Text += "*LOG*---------Compressed OK" + $OFS
		$File = New-Object -TypeName psobject
		$AESKey = New-AESKey -IsTest $true
		$textboxCreateLog.Text += "*LOG*---------AES Key generated OK" + $OFS
		$MainPassword = Convert-ToSequrePas -InputPass $textboxCreatePassword.Text -IsTest $IsTest -AESKey $AESKey
		$textboxCreateLog.Text += "*LOG*---------Security password OK" + $OFS
		$File | Add-Member -MemberType NoteProperty -Name "Security credentials" -Value $AESKey, $MainPassword
		$Date = Get-Date
		$File | Add-Member -MemberType NoteProperty -Name "Date created" -Value $Date
		$File | Add-Member -MemberType NoteProperty -Name "Personal info" -Value $ADlogin, $filename
		$File | Add-Member -MemberType NoteProperty -Name "Type" -Value $Type
		$File | Add-Member -MemberType NoteProperty -Name "ChildNameFolder" -Value $ChildNameFolder
		if (!(Test-Path $PathToFile))
		{
			mkdir $PathToFile
			$textboxCreateLog.Text += "*LOG*---------Create Folder  OK" + $OFS
		}
		else
		{
			$textboxCreateLog.Text += "*LOG*---------Folder  OK" + $OFS
		}
		$File | Export-Clixml -Path "$PathToFile\$filename.aps"
		$textboxCreateLog.Text += "*LOG*---------File Genereted  OK" + $OFS
		
		
	}
	catch
	{
		
		$textboxCreateLog.Text+= "Error $_ when trying create new APS key"
	}
	
}

$textboxPasstoKey_TextChanged={
	#TODO: Place custom script here
	
}

$loadAPSToolStripMenuItem_Click={
	#TODO: Place custom script here
	$textboxPasstoKey.Clear()
	$openfiledialog1.ShowDialog()
	$Global:PathToAPS = $openfiledialog1.FileName.ToString()
	$textboxChosenFile.Text = $Global:PathToAPS
	try
	{
		$Global:APS = Import-Clixml -Path $global:PathToAPS
		$textboxRunLog.Text +="*LOG*---------APS  loaded" +  $OFS
	}
	catch
	{
		$textboxRunLog.Text += "*LOG*---------Error $_ when trying import APS key" + $OFS
	}
}

$buttonRun_Click={
	#TODO: Place custom script here
	$listview1.Items.Clear();
	$SeqPass = $global:APS.'Security credentials'[1]
	$AESKey = $global:APS.'Security credentials'[0]
	$InputPaswword=$textboxPasstoKey.Text
	$APSUnSeqPass= Convert-FromSequrePas -InputPass $SeqPass -IsTest $true -AESKey $AESKey
	if (!($APSUnSeqPass -eq $InputPaswword))
	{
		[System.Windows.Forms.MessageBox]::Show('Passwords does not  match', 'Access denied', 'OK', 'Error')
		return
	}
	
	$global:APK = 
	$global:ASK = Get-ChildItem -Path "$PathToChildFolder\$($global:APS.ChildNameFolder)" | select *
	
	if ($global:ASK -ne $null)
	{
		$parent = $global:ASK | where { $_.Attributes -eq 'Directory' } | select Name
		if ($parent.Count -gt 1)
		{
			$comboboxParent.DataSource = $parent.Name + "none"
			$comboboxParent.SelectedItem = "none"
			$textboxRunLog.Text += "*LOG*---------Add $($parent.Name)  to parent item" + $OFS
		}
		else
		{
			$tmpArray = @("$($parent.Name)", "none")
			$comboboxParent.DataSource = $tmpArray
			$comboboxParent.SelectedItem = "none"
			$textboxRunLog.Text += "*LOG*---------Add one $($parent.Name)  to parent item" + $OFS
		}
		
		#adding to table information
		Add-ToListASK -ASK $global:ASK -IsTest $isTest -listview $listview1 -textboxRunLog $textboxRunLog
	}
	else
	{
		#we need create to the aps path  and document where will be save passwords and logins
		[System.Windows.Forms.MessageBox]::Show('ASK does not have any password', 'Information', 'OK', 'Information')
	}
	
	
}
$buttonAddPassword_Click={
	#TODO: Place custom script here
	try
	{
		$FileName = -join (1 .. 24 | % { [char[]]'ABCDEFGHIJKLMNOPQRSTUWXYZ1234567890abcdfeghijklmnopqrstuvwxyz' | Get-Random })
		$AESKey = $global:APS.'Security credentials'[0]
		$Password = Convert-ToSequrePas -InputPass $textboxAddPassword.Text -IsTest $IsTest -AESKey $AESKey
		$textboxRunLog.Text += "*LOG*---------Password Add OK" + $OFS
		$File = New-Object -TypeName psobject
		
		$File | Add-Member -MemberType NoteProperty -Name "PWD" -Value $Password
		$Date = Get-Date
		$File | Add-Member -MemberType NoteProperty -Name "Date created" -Value $Date
		$File | Add-Member -MemberType NoteProperty -Name "Personal info" -Value $textboxAddLogin.Text, $filename
		$File | Add-Member -MemberType NoteProperty -Name "RootFolder" -Value $($global:APS.ChildNameFolder)
		$File | Add-Member -MemberType NoteProperty -Name "ParentObject" -Value $comboboxParent.SelectedItem
		$File | Add-Member -MemberType NoteProperty -Name "Host" -Value $textboxHost.Text
		$textboxRunLog.Text += "*LOG*---------File Add OK" + $OFS
		if ($File.ParentObject -eq "none")
		{
			$File | Export-Clixml -Path "$PathToChildFolder\$($global:APS.ChildNameFolder)\$FileName.ask"
		}
		else
		{
			$File | Export-Clixml -Path "$PathToChildFolder\$($global:APS.ChildNameFolder)\$($comboboxParent.SelectedItem)\$FileName.ask"
		}
		
	}
	catch
	{
		$textboxRunLog.Text += "*LOG*---------Error $_ when trying import APS key" + $OFS
	}
	#$comboboxParent.SelectedItem = "none"
}

$btnAdd_New_Parent_Click={
	#TODO: Place custom script here
	mkdir "$PathToChildFolder\$($global:APS.ChildNameFolder)\$($textboxNewParent.Text)"
	$global:ASK = Get-ChildItem -Path "$PathToChildFolder\$($global:APS.ChildNameFolder)"
	$parent = $global:ASK | where { $_.Attributes -eq 'Directory' } | select Name
	if ($parent.Count -gt 1)
	{
		$comboboxParent.DataSource = $parent.Name + "none"
		$comboboxParent.SelectedItem = "none"
		$textboxRunLog.Text += "*LOG*---------Add $($parent.Name)  to parent item" + $OFS
	}
	else
	{
		$tmpArray = @("$($parent.Name)", "none")
		$comboboxParent.DataSource = $tmpArray
		$comboboxParent.SelectedItem = "none"
		$textboxRunLog.Text += "*LOG*---------Add one $($parent.Name)  to parent item" + $OFS
	}
}

$listview1_DoubleClick={
	#TODO: Place custom script here
	$SelectItemLogin = $listview1.SelectedItems[0].SubItems[2].Text
	if ($SelectItemLogin -ne "-")
	{
		$SelectItemPas = $listview1.SelectedItems[0].SubItems[3].Text
		$AESKey = $global:APS.'Security credentials'[0]
		$UnSeqPass = Convert-FromSequrePas -InputPass $SelectItemPas -IsTest $true -AESKey $AESKey
		$UnSeqPass | clip
		[System.Windows.Forms.MessageBox]::Show("$SelectItemLogin password copy in your clipboard", 'Information', 'OK', 'Information')
	}
	else
	{
		[System.Windows.Forms.MessageBox]::Show("The parent has not any password", 'Information', 'OK', 'Error')
	}
	
}

$button1_Click={
	#TODO: Place custom script here
	$CFLDR = -join (1 .. 24 | % { [char[]]'ABCDEFGHIJKLMNOPQRSTUWXYZ1234567890abcdfeghijklmnopqrstuvwxyz' | Get-Random })
	mkdir "$PathToFile\$CFLDR"
	$textbox1.Text += "*LOG*---------Creted new Folder  OK $PathToFile\$CFLDR " + $OFS
	#Compress-APK -InputPath "$PathToFile\$ChildNameFolder" -filename $filename -textboxCreateLog $textboxCreateLog
	$global:Error.Clear();
	$DeletingPath = "$($PathToFile)\$($CFLDR)"
	Wait-Event -Timeout 1
	try
	{
		Write-Host "Deleting folders $($PathToFile)\$($CFLDR)" -ForegroundColor Green
		Remove-Item -LiteralPath $DeletingPath -Recurse -Force -Confirm:$false
	}
	catch
	{
		$textbox1.Text += "*LOG*---------Error $_ $PathToFile\$CFLDR " + $OFS
	}
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>